"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
exports.INTENT_DIRECTORY = "intents";
exports.AGENT_JSON = "agent.json";
exports.ENTITIES_DIRECTORY = "entities";
function validateProjectDirectory(directory) {
    const intentDirectory = path.join(directory, exports.INTENT_DIRECTORY);
    if (!fs.existsSync(path.join(directory, exports.AGENT_JSON))) {
        throw new Error("Missing agent.json, please verify you are providing the correct directory");
    }
    if (!fs.existsSync(intentDirectory)) {
        throw new Error("Missing the intents directory, please verify you are providing the correct directory");
    }
    return true;
}
exports.validateProjectDirectory = validateProjectDirectory;
function getIntentDirectoryFiles(directory) {
    const intentDirectory = path.join(directory, exports.INTENT_DIRECTORY);
    const fileList = fs.readdirSync(intentDirectory);
    const intentFiles = fileList.filter((fileName) => {
        return !fileName.includes("usersays") && fileName.includes(".");
    });
    const utterancesFiles = fileList.filter((fileName) => {
        return fileName.includes("usersays") && fileName.includes(".");
    });
    return {
        intentFiles,
        utterancesFiles,
    };
}
exports.getIntentDirectoryFiles = getIntentDirectoryFiles;
function getDialogFlowApiVersion(directory) {
    const agentFile = path.join(directory, exports.AGENT_JSON);
    if (!fs.existsSync(agentFile)) {
        throw new Error("Missing agent.json, please verify you are providing the correct directory");
    }
    const fileData = fs.readFileSync(agentFile);
    const jsonData = JSON.parse(fileData.toString());
    if (!jsonData.onePlatformApiVersion)
        return "v1";
    return jsonData.onePlatformApiVersion;
}
exports.getDialogFlowApiVersion = getDialogFlowApiVersion;
function getEntitiesDirectoryFiles(directory) {
    const entitiesDirectory = path.join(directory, exports.ENTITIES_DIRECTORY);
    if (!fs.existsSync(entitiesDirectory)) {
        return {
            entities: [],
            entitiesEntries: [],
        };
    }
    const fileList = fs.readdirSync(entitiesDirectory);
    const entities = fileList.filter((fileName) => {
        return !fileName.includes("entries");
    });
    const entitiesEntries = fileList.filter((fileName) => {
        return fileName.includes("entries");
    });
    return {
        entities,
        entitiesEntries,
    };
}
exports.getEntitiesDirectoryFiles = getEntitiesDirectoryFiles;
//# sourceMappingURL=ProjectDirectoryUtils.js.map