"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const virtual_core_1 = require("virtual-core");
const ProjectDirectoryUtils_1 = require("./ProjectDirectoryUtils");
class SampleUtterancesBuilder {
    static fromDirectory(directory) {
        const intentDirectory = path.join(directory, ProjectDirectoryUtils_1.INTENT_DIRECTORY);
        ProjectDirectoryUtils_1.validateProjectDirectory(directory);
        const { utterancesFiles } = ProjectDirectoryUtils_1.getIntentDirectoryFiles(directory);
        const sampleUtterances = new virtual_core_1.SampleUtterances();
        const jsonUtterancesList = utterancesFiles.forEach((fileName) => {
            const intentName = fileName.split("_usersays_")[0];
            const utterances = SampleUtterancesBuilder.extractUtterancesFromFile(directory, fileName);
            utterances.forEach((utterance) => {
                sampleUtterances.addSample(intentName, utterance);
            });
        });
        return sampleUtterances;
    }
    static extractUtterancesFromFile(directory, fileName) {
        const fileData = fs.readFileSync(path.join(directory, ProjectDirectoryUtils_1.INTENT_DIRECTORY, fileName));
        const jsonData = JSON.parse(fileData.toString());
        if (!jsonData || !jsonData.length) {
            return [];
        }
        return jsonData.map((userSpeechDescription) => {
            return userSpeechDescription.data.reduce((utterance, speech) => {
                if (speech.userDefined && speech.alias) {
                    return `${utterance}{${speech.alias}}`;
                }
                else {
                    return `${utterance}${speech.text}`;
                }
            }, "");
        });
    }
}
exports.SampleUtterancesBuilder = SampleUtterancesBuilder;
//# sourceMappingURL=SampleUtterancesBuilder.js.map