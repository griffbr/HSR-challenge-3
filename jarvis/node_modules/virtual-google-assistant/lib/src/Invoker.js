"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const https = require("https");
const path = require("path");
const URL = require("url");
class Invoker {
    static invokeExpressFile(expressServerWrapper, port, jsonRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!expressServerWrapper.isServerStarted()) {
                throw new Error("Express server is not started yet");
            }
            const urlString = "http://127.0.0.1:" + port;
            const response = yield Invoker.invokeWithURLString(urlString, jsonRequest);
            return response;
        });
    }
    static invokeHandler(handler, jsonRequest) {
        let functionName = "handler";
        let fileName = handler;
        if (!handler.endsWith(".js")) {
            const functionSeparatorIndex = handler.lastIndexOf(".");
            functionName = handler.substr(functionSeparatorIndex + 1);
            fileName = handler.substr(0, functionSeparatorIndex);
            fileName += ".js";
        }
        const fullPath = path.join(process.cwd(), fileName);
        const handlerModule = require(fullPath);
        return Invoker.invokeFunction(handlerModule[functionName], jsonRequest);
    }
    static invokeFunction(googleFunction, jsonRequest) {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const response = {
                status: (code) => {
                    return response;
                },
                send: (payload) => {
                    resolve(payload);
                    return response;
                }
            };
            try {
                const googleFunctionResponse = yield Promise.resolve(googleFunction(jsonRequest, response));
                if (googleFunctionResponse) {
                    response.send(googleFunctionResponse);
                }
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    static invokeWithURLString(urlString, jsonRequest) {
        const httpModule = urlString.startsWith("https") ? https : http;
        const url = URL.parse(urlString);
        const requestString = JSON.stringify(jsonRequest);
        const requestOptions = {
            headers: {
                "Content-Length": Buffer.byteLength(requestString),
                "Content-Type": "application/json",
            },
            hostname: url.hostname,
            method: "POST",
            path: url.path,
            port: url.port ? parseInt(url.port, 10) : undefined,
        };
        return new Promise((resolve, reject) => {
            const req = httpModule.request(requestOptions, (response) => {
                if (response.statusCode !== 200) {
                    reject("Invalid response: " + response.statusCode + " Message: " + response.statusMessage);
                    return;
                }
                let responseString = "";
                response.setEncoding("utf8");
                response.on("data", (chunk) => {
                    responseString = responseString + chunk;
                });
                response.on("end", () => {
                    try {
                        const responseJSON = JSON.parse(responseString);
                        resolve(responseJSON);
                    }
                    catch (e) {
                        reject(e);
                    }
                });
            });
            req.on("error", (e) => {
                console.error(`problem with request: ${e.message}`);
                reject(e);
            });
            req.write(requestString);
            req.end();
        });
    }
}
exports.Invoker = Invoker;
//# sourceMappingURL=Invoker.js.map