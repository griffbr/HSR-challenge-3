"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
class ExpressServerWrapper {
    constructor(expressFile, expressPort) {
        this.expressFile = expressFile;
        this.expressPort = expressPort;
        this.serverStarted = false;
    }
    startServer() {
        return __awaiter(this, void 0, void 0, function* () {
            const fullPath = path.join(process.cwd(), this.expressFile);
            delete require.cache[require.resolve(fullPath)];
            const handlerModule = require(fullPath);
            if (!handlerModule.close) {
                throw new Error("The web server needs to be in the module.exports");
            }
            yield new Promise((resolve, reject) => {
                let timeout = true;
                setTimeout(() => {
                    if (timeout) {
                        try {
                            this.handlerModule = handlerModule.listen(this.expressPort);
                            if (!this.handlerModule) {
                                reject(new Error("Server took to long to start listening."));
                            }
                        }
                        catch (e) {
                            console.error("Error while attempting to trigger listening: ", e);
                            reject(new Error("Server took to long to start listening."));
                        }
                    }
                }, 2000);
                handlerModule.on("listening", (server) => {
                    timeout = false;
                    resolve();
                });
            });
            this.handlerModule = handlerModule;
            this.serverStarted = true;
        });
    }
    ;
    stopServer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield new Promise((resolve, reject) => {
                let timeout = true;
                setTimeout(() => {
                    if (timeout) {
                        reject(new Error("Server took to long to stop."));
                    }
                }, 2000);
                this.handlerModule.close(() => {
                    timeout = false;
                    resolve();
                });
            });
            this.serverStarted = false;
        });
    }
    isServerStarted() {
        return this.serverStarted;
    }
}
exports.ExpressServerWrapper = ExpressServerWrapper;
//# sourceMappingURL=ExpressServerWrapper.js.map