"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const RemoteInteractor_1 = require("./RemoteInteractor");
const LocalFunctionInteractor_1 = require("./LocalFunctionInteractor");
const InteractionModel_1 = require("./InteractionModel");
const ExpressInteractor_1 = require("./ExpressInteractor");
const ExpressServerWrapper_1 = require("./ExpressServerWrapper");
class VirtualGoogleAssistant {
    static Builder() {
        return new VirtualGoogleAssistantBuilder();
    }
    constructor(interactor, expressServerWrapper) {
        this.interactor = interactor;
        this.expressServerWrapper = expressServerWrapper;
    }
    intend(intentName, slots) {
        return this.interactor.intended(intentName, slots);
    }
    launch() {
        return this.interactor.launched();
    }
    utter(utterance) {
        return this.interactor.spoken(utterance);
    }
    addFilter(requestFilter) {
        this.interactor.addFilter(requestFilter);
        return this;
    }
    resetContext() {
        this.interactor.resetContext();
        return this;
    }
    resetFilters() {
        this.interactor.resetFilters();
        return this;
    }
    stopExpressServer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.expressServerWrapper) {
                throw ("This instance is not using express");
            }
            if (!this.expressServerWrapper.isServerStarted()) {
                throw ("Server not started");
            }
            yield this.expressServerWrapper.stopServer();
        });
    }
    startExpressServer() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.expressServerWrapper) {
                throw ("This instance is not using express");
            }
            if (this.expressServerWrapper.isServerStarted()) {
                throw ("Server already started");
            }
            yield this.expressServerWrapper.startServer();
        });
    }
}
exports.VirtualGoogleAssistant = VirtualGoogleAssistant;
class VirtualGoogleAssistantBuilder {
    actionUrl(url) {
        this._actionURL = url;
        return this;
    }
    handler(handlerName) {
        this._handler = handlerName;
        return this;
    }
    expressModule(fileName, port) {
        this._expressModule = fileName;
        this._port = port;
        return this;
    }
    directory(directory) {
        this._directory = directory;
        return this;
    }
    locale(locale) {
        this._locale = locale;
        return this;
    }
    getInteractor(model, locale) {
        if (this._expressModule && this._handler) {
            throw new Error("Use only handler or expressModule.");
        }
        if (this._expressModule || this._port) {
            if (!this._expressModule) {
                throw new Error("Express handler required");
            }
            if (!this._port) {
                throw new Error("Port required when using express handler");
            }
            return new ExpressInteractor_1.ExpressInteractor(new ExpressServerWrapper_1.ExpressServerWrapper(this._expressModule, this._port), this._port, model, locale);
        }
        if (this._handler) {
            return new LocalFunctionInteractor_1.LocalFunctionInteractor(this._handler, model, locale);
        }
        else if (this._actionURL) {
            return new RemoteInteractor_1.RemoteInteractor(this._actionURL, model, locale);
        }
        else {
            throw new Error("Either a handler or actionURL must be provided.");
        }
    }
    create() {
        if (!this._directory) {
            throw new Error("Please provide the DialogFlow directory");
        }
        const locale = this._locale ? this._locale : "en-us";
        const model = InteractionModel_1.InteractionModel.fromDirectory(this._directory);
        const interactor = this.getInteractor(model, locale);
        if (this._expressModule) {
            return new VirtualGoogleAssistant(interactor, interactor.getExpressServerWrapper());
        }
        return new VirtualGoogleAssistant(interactor);
    }
}
exports.VirtualGoogleAssistantBuilder = VirtualGoogleAssistantBuilder;
//# sourceMappingURL=VirtualGoogleAssistant.js.map