"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const virtual_core_1 = require("virtual-core");
const BuiltinSlotTypes_1 = require("./BuiltinSlotTypes");
const BuiltinUtterances_1 = require("./BuiltinUtterances");
const IntentSchema_1 = require("./IntentSchema");
const SampleUtterancesBuilder_1 = require("./SampleUtterancesBuilder");
const SlotTypesBuilder_1 = require("./SlotTypesBuilder");
const ProjectDirectoryUtils_1 = require("./ProjectDirectoryUtils");
class InteractionModel {
    constructor(intentSchema, sampleUtterances, slotTypes, dialogFlowApiVersion = "v1") {
        this.intentSchema = intentSchema;
        this.sampleUtterances = sampleUtterances;
        this.slotTypes = slotTypes;
        this.dialogFlowApiVersion = dialogFlowApiVersion;
        if (!this.slotTypes) {
            this.slotTypes = new virtual_core_1.SlotTypes([]);
        }
        this.sampleUtterances.setInteractionModel(this);
        const builtinValues = BuiltinUtterances_1.BuiltinUtterances.values();
        for (const key of Object.keys(builtinValues)) {
            if (this.hasIntent(key)) {
                for (const phrase of builtinValues[key]) {
                    this.sampleUtterances.addSample(key, phrase);
                }
            }
        }
        this.slotTypes.addTypes(BuiltinSlotTypes_1.BuiltinSlotTypes.values());
    }
    static fromDirectory(directory) {
        const schema = IntentSchema_1.IntentSchema.fromDirectory(directory);
        const samples = SampleUtterancesBuilder_1.SampleUtterancesBuilder.fromDirectory(directory);
        const entities = SlotTypesBuilder_1.SlotTypesBuilder.fromDirectory(directory);
        const dialogFlowApiVersion = ProjectDirectoryUtils_1.getDialogFlowApiVersion(directory);
        return new InteractionModel(schema, samples, entities, dialogFlowApiVersion);
    }
    hasIntent(intent) {
        return this.intentSchema.hasIntent(intent);
    }
}
exports.InteractionModel = InteractionModel;
//# sourceMappingURL=InteractionModel.js.map