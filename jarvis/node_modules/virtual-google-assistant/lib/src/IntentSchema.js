"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const virtual_core_1 = require("virtual-core");
const ProjectDirectoryUtils_1 = require("./ProjectDirectoryUtils");
class GoogleIntent extends virtual_core_1.Intent {
}
exports.GoogleIntent = GoogleIntent;
class IntentSchema {
    constructor(intentArray) {
        this.intentArray = intentArray;
    }
    static fromDirectory(directory) {
        const { intentFiles } = ProjectDirectoryUtils_1.getIntentDirectoryFiles(directory);
        const intentArray = intentFiles.map((intentFile) => {
            return IntentSchema.getIntentArrayFromJsonFile(directory, intentFile);
        });
        return new IntentSchema(intentArray);
    }
    intents() {
        return this.intentArray;
    }
    intent(intentString) {
        let intent = null;
        for (const o of this.intents()) {
            if (o.name === intentString) {
                intent = o;
                break;
            }
        }
        return intent;
    }
    hasIntent(intentString) {
        return this.intent(intentString) !== null;
    }
    static getIntentArrayFromJsonFile(directory, fileName) {
        const fileData = fs.readFileSync(path.join(directory, ProjectDirectoryUtils_1.INTENT_DIRECTORY, fileName));
        const jsonData = JSON.parse(fileData.toString());
        const intentName = fileName.replace(".json", "");
        const haveResponseData = jsonData.responses && jsonData.responses.length;
        const parameters = haveResponseData ? jsonData.responses[0].parameters : [];
        const intent = new GoogleIntent(intentName);
        if (haveResponseData) {
            intent.action = jsonData.responses[0].action;
        }
        parameters.forEach((parameter) => {
            const slotType = parameter.dataType ? parameter.dataType.replace("@", "") : "unknown";
            const slot = new virtual_core_1.IntentSlot(parameter.name, slotType);
            intent.addSlot(slot);
        });
        return intent;
    }
}
exports.IntentSchema = IntentSchema;
//# sourceMappingURL=IntentSchema.js.map