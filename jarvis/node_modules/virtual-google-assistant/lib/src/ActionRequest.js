"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid = require("uuid");
class RequestType {
}
RequestType.INTENT_REQUEST = "IntentRequest";
RequestType.LAUNCH_REQUEST = "LaunchRequest";
exports.RequestType = RequestType;
class ActionRequestV1 {
    constructor(interactionModel, locale) {
        this.interactionModel = interactionModel;
        this.locale = locale;
        this.requestJSON = null;
    }
    static timestamp() {
        const timestamp = new Date().toISOString();
        return timestamp.substring(0, 19) + "Z";
    }
    generateSlotField(slot) {
        return {
            dataType: "@" + slot.type,
            name: slot.name,
            value: "$" + slot.name,
            isList: false
        };
    }
    intentRequest(intentName) {
        const isBuiltin = intentName.startsWith("sys.");
        if (!isBuiltin) {
            if (!this.interactionModel.hasIntent(intentName)) {
                throw new Error("Interaction model has no intentName named: " + intentName);
            }
        }
        this.requestJSON = this.baseRequest(RequestType.INTENT_REQUEST);
        this.requestJSON.result.metadata.intentName = intentName;
        const intent = this.interactionModel.intentSchema.intent(intentName);
        if (intent.action) {
            this.requestJSON.result.action = intent.action;
        }
        const slots = intent.slots;
        if (!slots) {
            return this;
        }
        this.requestJSON.result.metadata.matchedParameters = [];
        slots.forEach((slot) => {
            this.requestJSON.result.metadata.matchedParameters.push(this.generateSlotField(slot));
        });
        return this;
    }
    launchRequest() {
        this.requestType = RequestType.LAUNCH_REQUEST;
        return this.intentRequest("Default Welcome Intent");
    }
    withSlot(slotName, slotValue) {
        if (this.requestType !== "IntentRequest") {
            throw Error("Trying to add slot to non-intent request");
        }
        this.requestJSON.result.parameters[slotName] = slotValue;
        return this;
    }
    toJSON() {
        return this.requestJSON;
    }
    baseRequest(requestType) {
        this.requestType = requestType;
        const timestamp = ActionRequestV1.timestamp();
        return {
            originalRequest: {
                "source": "google",
                "version": "2",
                "data": {
                    "user": {}
                },
            },
            id: uuid.v4(),
            timestamp: timestamp,
            lang: this.locale,
            result: {
                source: "agent",
                resolvedQuery: "GOOGLE_ASSISTANT_WELCOME",
                speech: "",
                actionIncomplete: false,
                parameters: {},
                contexts: [],
                metadata: {
                    intentId: uuid.v4(),
                    webhookUsed: "true",
                    webhookForSlotFillingUsed: "false",
                    nluResponseTime: 1,
                },
                fulfillment: {
                    speech: "",
                    messages: []
                },
                score: 1
            },
            status: {
                "code": 200,
                "errorType": "success",
                "webhookTimedOut": false
            },
            "sessionId": "1518537462114"
        };
    }
}
exports.ActionRequestV1 = ActionRequestV1;
class ActionRequestV2 {
    constructor(interactionModel, locale) {
        this.interactionModel = interactionModel;
        this.locale = locale;
        this.requestJSON = null;
    }
    static timestamp() {
        const timestamp = new Date().toISOString();
        return timestamp.substring(0, 19) + "Z";
    }
    baseRequest(requestType) {
        this.requestType = requestType;
        return {
            originalDetectIntentRequest: {
                "source": "google",
                "version": "2",
                "payload": {
                    "user": {}
                },
            },
            responseId: uuid.v4(),
            queryResult: {
                queryText: "GOOGLE_ASSISTANT_WELCOME",
                allRequiredParamsCollected: true,
                parameters: {},
                outputContexts: [],
                intent: {
                    name: uuid.v4(),
                    webhookState: "true",
                    displayName: "",
                },
                diagnosticInfo: {
                    webhookLatencySeconds: 1,
                },
                fulfillmentText: "",
                fulfillmentMessages: [
                    {
                        text: {
                            text: [],
                        },
                    },
                ],
                intentDetectionConfidence: 1,
                languageCode: this.locale,
            },
            "session": "1518537462114"
        };
    }
    generateSlotField(slot) {
        return {
            dataType: "@" + slot.type,
            name: slot.name,
            value: "$" + slot.name,
            isList: false
        };
    }
    intentRequest(intentName) {
        const isBuiltin = intentName.startsWith("sys.");
        if (!isBuiltin) {
            if (!this.interactionModel.hasIntent(intentName)) {
                throw new Error("Interaction model has no intentName named: " + intentName);
            }
        }
        this.requestJSON = this.baseRequest(RequestType.INTENT_REQUEST);
        this.requestJSON.queryResult.intent.displayName = intentName;
        const intent = this.interactionModel.intentSchema.intent(intentName);
        if (intent.action) {
            this.requestJSON.queryResult.action = intent.action;
        }
        const slots = intent.slots;
        if (!slots) {
            return this;
        }
        this.requestJSON.queryResult.intent.matchedParameters = [];
        slots.forEach((slot) => {
            this.requestJSON.queryResult.intent.matchedParameters.push(this.generateSlotField(slot));
        });
        return this;
    }
    toJSON() {
        return this.requestJSON;
    }
    launchRequest() {
        this.requestType = RequestType.LAUNCH_REQUEST;
        return this.intentRequest("Default Welcome Intent");
    }
    withSlot(slotName, slotValue) {
        if (this.requestType !== RequestType.INTENT_REQUEST) {
            throw Error("Trying to add slot to non-intent request");
        }
        this.requestJSON.queryResult.parameters[slotName] = slotValue;
        return this;
    }
}
exports.ActionRequestV2 = ActionRequestV2;
//# sourceMappingURL=ActionRequest.js.map