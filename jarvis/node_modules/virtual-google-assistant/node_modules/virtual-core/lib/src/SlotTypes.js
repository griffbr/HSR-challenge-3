"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SlotTypes {
    constructor(slotTypes) {
        this.types = [];
        for (const type of slotTypes) {
            this.types.push(new SlotType(type.name, type.values));
        }
    }
    addTypes(slotTypes) {
        this.types = this.types.concat(slotTypes);
    }
    slotType(name) {
        let slotType;
        name = name.toLowerCase();
        for (const o of this.types) {
            if (o.name.toLowerCase() === name) {
                slotType = o;
                break;
            }
        }
        return slotType;
    }
    matchesSlot(name, value) {
        value = value.toLowerCase().trim();
        const slotType = this.slotType(name);
        if (!slotType) {
            const match = new SlotMatch(true, value);
            match.untyped = true;
            return match;
        }
        return slotType.match(value);
    }
}
exports.SlotTypes = SlotTypes;
class SlotMatch {
    constructor(matches, slotValueName, slotValueID, slotValueSynonym) {
        this.matches = matches;
        this.slotValueName = slotValueName;
        this.slotValueID = slotValueID;
        this.slotValueSynonym = slotValueSynonym;
        this.untyped = false;
    }
}
exports.SlotMatch = SlotMatch;
class SlotType {
    constructor(name, values) {
        this.name = name;
        this.values = values;
    }
    match(value) {
        let match = new SlotMatch(false);
        for (const slotValue of this.values) {
            if (slotValue.name.value.toLowerCase() === value) {
                match = new SlotMatch(true, slotValue.name.value);
            }
            else if (slotValue.name.synonyms) {
                for (const synonym of slotValue.name.synonyms) {
                    if (synonym.toLowerCase() === value) {
                        match = new SlotMatch(true, slotValue.name.value, slotValue.id, synonym);
                        break;
                    }
                }
            }
            if (match.matches) {
                break;
            }
        }
        return match;
    }
}
exports.SlotType = SlotType;
//# sourceMappingURL=SlotTypes.js.map