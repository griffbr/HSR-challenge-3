"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Utterance {
    constructor(interactionModel, phrase) {
        this.interactionModel = interactionModel;
        this.phrase = phrase;
        this.phrase = phrase.toLowerCase();
        this.matchIntent();
    }
    intent() {
        return this.matched() ? this.matchedSample.intent : undefined;
    }
    matched() {
        return this.matchedSample !== undefined;
    }
    slot(index) {
        if (!this.slots || index >= this.slots.length) {
            return undefined;
        }
        return this.slots[index].trim();
    }
    slotByName(name) {
        let slotValue;
        for (let i = 0; i < this.matchedSample.slotCount(); i++) {
            const slotName = this.matchedSample.slotName(i);
            if (slotName.toLowerCase() === name.toLowerCase()) {
                slotValue = this.slots[i].trim();
                break;
            }
        }
        return slotValue;
    }
    toJSON() {
        const json = {};
        if (this.slots) {
            for (let i = 0; i < this.slots.length; i++) {
                const slotName = this.matchedSample.slotName(i);
                json[slotName] = this.slot(i);
            }
        }
        return json;
    }
    matchIntent() {
        const matches = [];
        for (const intent of this.interactionModel.intentSchema.intents()) {
            const intentName = intent.name;
            for (const sample of this.interactionModel.sampleUtterances.samplesForIntent(intentName)) {
                const sampleTest = sample.matchesUtterance(this.phrase);
                if (sampleTest.matches()) {
                    matches.push(sampleTest);
                }
            }
        }
        if (matches.length > 0) {
            let topMatch;
            for (const match of matches) {
                if (!topMatch || match.score() > topMatch.score()) {
                    topMatch = match;
                }
                else if (topMatch.score() === match.score()) {
                    if (match.scoreSlots() > topMatch.scoreSlots()) {
                        topMatch = match;
                    }
                }
            }
            this.matchedSample = topMatch.samplePhrase;
            this.slots = topMatch.slotValues();
        }
    }
}
exports.Utterance = Utterance;
//# sourceMappingURL=Utterance.js.map