"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VirtualDeviceValidator_1 = require("./VirtualDeviceValidator");
var PrettyPrinter = (function () {
    function PrettyPrinter() {
    }
    PrettyPrinter.prototype.prettifyAsPartialHTML = function (virtualDeviceTestSequences, partialResultItems, includeTimeContent) {
        includeTimeContent = (typeof includeTimeContent !== "undefined") ? includeTimeContent : true;
        var result = { tests: [] };
        for (var _i = 0, virtualDeviceTestSequences_1 = virtualDeviceTestSequences; _i < virtualDeviceTestSequences_1.length; _i++) {
            var sequence = virtualDeviceTestSequences_1[_i];
            for (var _a = 0, _b = sequence.tests; _a < _b.length; _a++) {
                var test_1 = _b[_a];
                var resultItem = { test: test_1 };
                resultItem.status = "scheduled";
                var validator = new VirtualDeviceValidator_1.Validator(resultItem, undefined);
                result.tests.push(validator.resultItem);
            }
        }
        for (var _c = 0, partialResultItems_1 = partialResultItems; _c < partialResultItems_1.length; _c++) {
            var partialResultItem = partialResultItems_1[_c];
            for (var i in result.tests) {
                if (result.tests[i]) {
                    var resultItem = result.tests[i];
                    if (resultItem.test.absoluteIndex === partialResultItem.test.absoluteIndex) {
                        result.tests[i] = partialResultItem;
                        break;
                    }
                }
            }
        }
        return this.prettifyAsHTML(result, includeTimeContent);
    };
    PrettyPrinter.prototype.prettifyAsHTML = function (result, includeTimeContent) {
        includeTimeContent = (typeof includeTimeContent !== "undefined") ? includeTimeContent : true;
        var colorRed = "rgb(244,67,54)";
        var colorGreen = "rgb(76,175,80)";
        var totalTests = result.tests;
        var succeededTests = result.tests.filter(function (test) { return test.result === "success"; });
        var failedTests = result.tests.filter(function (test) { return test.result === "failure"; });
        var overallContent = totalTests.length + " tests, " + succeededTests.length + " succeeded" +
            (", " + failedTests.length + " failed");
        var nowDate = new Date();
        var nowUTC = nowDate.getUTCMonth() + 1 + "/" + nowDate.getUTCDate() + "/" + nowDate.getUTCFullYear() + " " +
            (nowDate.getUTCHours() + ":" + nowDate.getUTCMinutes() + ":" + nowDate.getUTCSeconds() + " UTC");
        var sequences = {};
        for (var _i = 0, _a = result.tests; _i < _a.length; _i++) {
            var test_2 = _a[_i];
            var key = test_2.test.sequence;
            if (sequences.hasOwnProperty(key)) {
                sequences[key].push(test_2);
            }
            else {
                sequences[key] = [test_2];
            }
        }
        var sequencesHTML = [];
        var tdAndThStyleProps = "border:1px solid black;padding:5px;";
        var tdAndThStyles = "style=\"" + tdAndThStyleProps + "\"";
        var tdStyles = tdAndThStyles;
        var thStyles = tdAndThStyles;
        var trStyles = function (r) {
            var color = "";
            if (r === "success") {
                color = colorGreen;
            }
            else if (r === "failure") {
                color = colorRed;
            }
            return " style=\"color:" + color + ";\"";
        };
        var overallContentStyles = function () {
            var color = "";
            if (failedTests.length > 0) {
                color = colorRed;
            }
            else {
                color = colorGreen;
            }
            return "style=\"color:" + color + ";\"";
        };
        var statusIcon = function (test) {
            if (test.status === "running") {
                return "<img src='/assets/Spinner.svg' height=24>";
            }
            else if (test.status === "scheduled") {
                return "<img src='/assets/Schedule.svg' height=18>";
            }
            else if (test.status === "done" && test.result
                && test.result === "success") {
                return "&#10004;";
            }
            else if (test.status === "done" && test.result
                && test.result !== "success") {
                return "&#10008;";
            }
        };
        for (var key in sequences) {
            if (sequences.hasOwnProperty(key)) {
                var tests = sequences[key];
                var testsHTML = [];
                for (var _b = 0, tests_1 = tests; _b < tests_1.length; _b++) {
                    var test_3 = tests_1[_b];
                    var icon = statusIcon(test_3);
                    var html_1 = "\n                        <tr" + ((test_3.result && trStyles(test_3.result)) || "") + ">\n                            <td style=\"" + tdAndThStyleProps + "text-align:center;\">" + (icon ? icon : "") + "</td>\n                            <td " + tdStyles + ">" + test_3.test.input + "</td>\n                            <td " + tdStyles + ">" + (test_3.test.expected.streamURL
                        ? test_3.test.expected.streamURL
                        : test_3.test.expected.transcript || "") + "</td>\n                            <td " + tdStyles + ">" + (test_3.actual && test_3.actual.streamURL
                        ? test_3.actual.streamURL
                        : (test_3.actual && test_3.actual.transcript) || "") + "</td>\n                        </tr>";
                    testsHTML.push(html_1);
                }
                var html = "\n                    <div style=\"margin-bottom:16px;\" class=\"sequence\">\n                        <p style=\"margin:0 0 2px;font-weight:bold;\" class=\"heading\">Sequence: " + key + "</p>\n                        <table style=\"border-collapse:collapse;\">\n                            <thead>\n                                <tr>\n                                    <th " + thStyles + ">Result</th>\n                                    <th " + thStyles + ">Input</th>\n                                    <th " + thStyles + ">Expected</th>\n                                    <th " + thStyles + ">Actual</th>\n                                </tr>\n                            </thead>\n                            <tbody>" + testsHTML.join("") + "</tbody>\n                        </table>\n                    </div>";
                sequencesHTML.push(html);
            }
        }
        var showHeadingSpinner = (totalTests.length !== succeededTests.length + failedTests.length);
        var headingSpinner = (showHeadingSpinner
            ? "<img src='/assets/Spinner.svg' height=34>" : "");
        return "\n            <div>\n                <p style=\"font-weight:500;font-size:28px;font-family:'Roboto','Helvetica','Arial',sans-serif;\">\n                    Validation Script Results" + headingSpinner + "\n                </p>\n                <div style=\"margin:0 0 -18px;\" class=\"output\">\n                    <p style=\"font-weight:bold;\"class=\"heading\">Output:</p>\n                </div>\n                <div class=\"overall\">\n                    <p style=\"margin:0 0 -6px;font-weight:bold;\" class=\"heading\">Overall:</p>\n                    <p class=\"content\" " + overallContentStyles() + ">" + overallContent + "</p>\n                </div>\n                <div class=\"time\">\n                    <p style=\"margin:0 0 -6px;font-weight:bold;\" class=\"heading\">Time:</p>\n                    <p class=\"content\">" + (includeTimeContent && nowUTC || "") + "</p>\n                </div>" + sequencesHTML.join("") + "\n            </div>";
    };
    return PrettyPrinter;
}());
exports.PrettyPrinter = PrettyPrinter;
//# sourceMappingURL=PrettyPrinter.js.map