"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var BatchValidator_1 = require("./BatchValidator");
var PrettyPrinter_1 = require("./PrettyPrinter");
var SequencedValidator_1 = require("./SequencedValidator");
var YAMLParser_1 = require("./YAMLParser");
var invocationNameRegexp = /(open|launch|tell|ask)(.*)$/;
var urlRegExp = /^https?:\/\//i;
var VirtualDeviceScript = (function () {
    function VirtualDeviceScript(token, userID, batch) {
        if (batch === void 0) { batch = false; }
        this.findReplaceMap = {};
        if (batch) {
            this.virtualDeviceValidator = new BatchValidator_1.BatchValidator(token, userID);
        }
        else {
            this.virtualDeviceValidator = new SequencedValidator_1.SequencedValidator(token, userID);
        }
    }
    VirtualDeviceScript.prototype.findReplace = function (find, replace) {
        this.findReplaceMap[find] = replace;
    };
    VirtualDeviceScript.prototype.locale = function (locale) {
        this.virtualDeviceValidator.locale(locale);
    };
    VirtualDeviceScript.prototype.voiceID = function (voiceID) {
        return this.virtualDeviceValidator.voiceID(voiceID);
    };
    VirtualDeviceScript.prototype.tests = function (scriptContents) {
        scriptContents = scriptContents.trim();
        scriptContents = this.tokenize(scriptContents);
        var sequences = [];
        var currentSequence = { tests: [], invocationName: "" };
        var sequence = 1;
        var sequenceIndex = 1;
        var absoluteIndex = 0;
        var utteranceTests = new YAMLParser_1.YAMLParser(scriptContents).parse();
        var utteranceCount = 0;
        var config = {};
        for (var _i = 0, utteranceTests_1 = utteranceTests; _i < utteranceTests_1.length; _i++) {
            var utteranceTest = utteranceTests_1[_i];
            utteranceCount += 1;
            if (utteranceTest.name() === "config") {
                config = utteranceTest.object();
                continue;
            }
            if (!utteranceTest.isNull()) {
                absoluteIndex += 1;
                var input = utteranceTest.name();
                var test_1 = {
                    absoluteIndex: absoluteIndex,
                    comparison: "contains",
                    expected: {},
                    input: input,
                    sequence: sequence,
                    sequenceIndex: sequenceIndex,
                };
                var expected = test_1.expected;
                if (utteranceTest.isString()) {
                    if (utteranceTest.isEmpty()) {
                        throw new Error("Line " + utteranceTest.line + ": No right-hand value specified.");
                    }
                    if (urlRegExp.test(utteranceTest.string())) {
                        expected.streamURL = utteranceTest.string();
                    }
                    else {
                        expected.transcript = utteranceTest.string();
                    }
                }
                else if (utteranceTest.isArray()) {
                    expected.transcript = utteranceTest.stringArray();
                }
                else if (utteranceTest.isObject()) {
                    test_1.expected = utteranceTest.object();
                }
                else if (utteranceTest.value() === undefined) {
                    throw new Error("Line " + utteranceTest.line + ": No properties added for object.");
                }
                currentSequence.tests.push(test_1);
                sequenceIndex += 1;
            }
            if (utteranceTest.isNull() || utteranceCount === utteranceTests.length) {
                if (currentSequence.tests.length) {
                    sequence += 1;
                    var firstInput = (currentSequence.tests
                        && currentSequence.tests.length > 0
                        && currentSequence.tests[0]
                        && currentSequence.tests[0].input) || "";
                    currentSequence.invocationName = this.detectInvocationName(firstInput);
                    if (config.voiceID) {
                        currentSequence.voiceID = config.voiceID;
                    }
                    if (config.locale) {
                        currentSequence.locale = config.locale;
                    }
                    sequences.push(__assign({}, currentSequence));
                    currentSequence = { tests: [], invocationName: "" };
                    sequenceIndex = 1;
                }
            }
        }
        return sequences;
    };
    VirtualDeviceScript.prototype.executeDir = function (directoryPath) {
        return __awaiter(this, void 0, void 0, function () {
            var stats, items, results, _i, items_1, filePath, fullPath, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        directoryPath = path.resolve(directoryPath);
                        try {
                            stats = fs.statSync(directoryPath);
                        }
                        catch (e) {
                            return [2, Promise.reject("Directory to execute does not exist: " + directoryPath)];
                        }
                        if (!stats.isDirectory()) {
                            return [2, Promise.reject("Not a directory: " + directoryPath)];
                        }
                        items = fs.readdirSync(directoryPath);
                        results = {};
                        _i = 0, items_1 = items;
                        _a.label = 1;
                    case 1:
                        if (!(_i < items_1.length)) return [3, 4];
                        filePath = items_1[_i];
                        if (!(filePath.endsWith(".yml") || filePath.endsWith(".yaml"))) return [3, 3];
                        fullPath = path.join(directoryPath, filePath);
                        return [4, this.executeFile(fullPath)];
                    case 2:
                        result = _a.sent();
                        results[fullPath] = result;
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2, results];
                }
            });
        });
    };
    VirtualDeviceScript.prototype.executeFile = function (filePath) {
        filePath = path.resolve(filePath);
        try {
            fs.statSync(filePath);
        }
        catch (e) {
            return Promise.reject("File to execute does not exist: " + filePath);
        }
        var fileContents = fs.readFileSync(filePath, "UTF-8");
        return this.execute(fileContents);
    };
    VirtualDeviceScript.prototype.execute = function (scriptContents, context) {
        return this.virtualDeviceValidator.execute(this.tests(scriptContents), context);
    };
    VirtualDeviceScript.prototype.validate = function (scriptContents) {
        try {
            this.tests(scriptContents);
            return undefined;
        }
        catch (err) {
            return err;
        }
    };
    VirtualDeviceScript.prototype.prettifyAsPartialHTML = function (scriptContents, partialResultItems, includeTimeContent) {
        includeTimeContent = (typeof includeTimeContent !== "undefined") ? includeTimeContent : true;
        var virtualDeviceTestSequences = this.tests(scriptContents);
        var printer = new PrettyPrinter_1.PrettyPrinter();
        return printer.prettifyAsPartialHTML(virtualDeviceTestSequences, partialResultItems, includeTimeContent);
    };
    VirtualDeviceScript.prototype.prettifyAsHTML = function (result, includeTimeContent) {
        var printer = new PrettyPrinter_1.PrettyPrinter();
        return printer.prettifyAsHTML(result, includeTimeContent);
    };
    VirtualDeviceScript.prototype.on = function (event, cb) {
        this.virtualDeviceValidator.subscribe(event, cb);
    };
    VirtualDeviceScript.prototype.off = function (event) {
        this.virtualDeviceValidator.unsubscribe(event);
    };
    VirtualDeviceScript.prototype.checkAuth = function (scriptContents) {
        var sequences = this.tests(scriptContents);
        var promises = [];
        for (var _i = 0, sequences_1 = sequences; _i < sequences_1.length; _i++) {
            var sequence = sequences_1[_i];
            var promise = this.virtualDeviceValidator.checkAuth(sequence.invocationName);
            promises.push(promise);
        }
        return Promise.all(promises).then(function () { return "AUTHORIZED"; });
    };
    VirtualDeviceScript.prototype.detectInvocationName = function (input) {
        var matches = input.toLowerCase().match(invocationNameRegexp);
        if (!matches || matches.length !== 3) {
            return "";
        }
        return matches[2].trim();
    };
    VirtualDeviceScript.prototype.tokenize = function (script) {
        for (var _i = 0, _a = Object.keys(this.findReplaceMap); _i < _a.length; _i++) {
            var find = _a[_i];
            var value = this.findReplaceMap[find];
            script = script.split(find).join(value);
        }
        return script;
    };
    return VirtualDeviceScript;
}());
exports.VirtualDeviceScript = VirtualDeviceScript;
//# sourceMappingURL=VirtualDeviceScript.js.map