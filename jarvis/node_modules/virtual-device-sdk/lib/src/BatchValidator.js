"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var VirtualDeviceValidator_1 = require("./VirtualDeviceValidator");
var BatchValidator = (function (_super) {
    __extends(BatchValidator, _super);
    function BatchValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BatchValidator.prototype.executeSequence = function (sequence, result, context) {
        return __awaiter(this, void 0, void 0, function () {
            var virtualDevice, messages, _i, _a, test_1, message, results, e_1, test_2, resultItem, i, test_3, resultItem, validator, errors;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        virtualDevice = this.virtualDevice(sequence);
                        return [4, virtualDevice.waitForSessionToEnd()];
                    case 1:
                        _b.sent();
                        messages = [];
                        for (_i = 0, _a = sequence.tests; _i < _a.length; _i++) {
                            test_1 = _a[_i];
                            message = {
                                text: test_1.input,
                            };
                            if (test_1.expected && test_1.expected.transcript) {
                                if (Array.isArray(test_1.expected.transcript)) {
                                    message.phrases = test_1.expected.transcript;
                                }
                                else {
                                    message.phrases = [];
                                    message.phrases.push(test_1.expected.transcript);
                                }
                            }
                            messages.push(message);
                        }
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4, virtualDevice.batchMessage(messages)];
                    case 3:
                        results = _b.sent();
                        return [3, 5];
                    case 4:
                        e_1 = _b.sent();
                        result.result = "failure";
                        result.errorMessage = e_1.toString();
                        test_2 = sequence.tests[0];
                        resultItem = { test: test_2 };
                        resultItem.result = "failure";
                        resultItem.status = "done";
                        resultItem.errors = [new VirtualDeviceValidator_1.ValidatorError(test_2.input, undefined, undefined, "SystemError: " + e_1.message)];
                        result.tests = [resultItem];
                        return [2];
                    case 5:
                        for (i = 0; i < sequence.tests.length; i++) {
                            test_3 = sequence.tests[i];
                            resultItem = { test: test_3 };
                            resultItem.actual = results[i];
                            validator = new VirtualDeviceValidator_1.Validator(resultItem, undefined);
                            errors = validator.check();
                            resultItem.errors = errors;
                            if (errors.length === 0) {
                                resultItem.result = "success";
                            }
                            else {
                                resultItem.result = "failure";
                            }
                            validator.resultItem.status = "done";
                            result.tests.push(resultItem);
                            this.emit("result", undefined, validator.resultItem, context);
                        }
                        return [2];
                }
            });
        });
    };
    return BatchValidator;
}(VirtualDeviceValidator_1.VirtualDeviceValidator));
exports.BatchValidator = BatchValidator;
//# sourceMappingURL=BatchValidator.js.map