"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var https = require("https");
var VirtualDevice_1 = require("./VirtualDevice");
exports.VirtualDeviceScriptUnauthorizedError = new Error("Security token lacks sufficient " +
    "information. Please re-authenticate with Amazon here to update your security token.");
exports.VirtualDeviceValidatorUnauthorizedMessage = function (invocationName) {
    return "Security token lacks sufficient " +
        ("permissions to invoke \"" + invocationName + "\" skill.<br><br>") +
        "To correct this, make sure in the " +
        "<a href=\"https://developer.amazon.com/edw/home.html#/\" target=\"_blank\">" +
        "Alexa developer console</a> that the skill is associated with your account.<br><br>" +
        "If you are still having issues, contact us " +
        "<a href=\"mailto:support@bespoken.io\">support@bespoken.io</a>.";
};
var VirtualDeviceValidator = (function () {
    function VirtualDeviceValidator(token, userID) {
        this.token = token;
        this.subscribers = { message: [], result: [], unauthorized: [] };
        this.sourceAPIBaseURL = process.env.SOURCE_API_BASE_URL
            ? process.env.SOURCE_API_BASE_URL
            : "https://source-api.bespoken.tools";
        this.userID = userID;
    }
    VirtualDeviceValidator.prototype.execute = function (virtualDeviceTestSequences, context) {
        return __awaiter(this, void 0, void 0, function () {
            var result, _i, virtualDeviceTestSequences_1, sequence, err_1, failures;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = { tests: [] };
                        _i = 0, virtualDeviceTestSequences_1 = virtualDeviceTestSequences;
                        _a.label = 1;
                    case 1:
                        if (!(_i < virtualDeviceTestSequences_1.length)) return [3, 8];
                        sequence = virtualDeviceTestSequences_1[_i];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4, this.checkAuth(sequence.invocationName)];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        err_1 = _a.sent();
                        this.emit("unauthorized", exports.VirtualDeviceScriptUnauthorizedError, undefined, context);
                        throw err_1;
                    case 5: return [4, this.executeSequence(sequence, result, context)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        _i++;
                        return [3, 1];
                    case 8:
                        failures = result.tests.filter(function (test) { return test.result === "failure"; });
                        if (failures && failures.length > 0) {
                            result.result = "failure";
                        }
                        else {
                            result.result = "success";
                        }
                        return [2, Promise.resolve(result)];
                }
            });
        });
    };
    VirtualDeviceValidator.prototype.locale = function (locale) {
        this._locale = locale;
    };
    VirtualDeviceValidator.prototype.subscribe = function (event, cb) {
        if (event in this.subscribers) {
            this.subscribers[event].push(cb);
        }
    };
    VirtualDeviceValidator.prototype.unsubscribe = function (event) {
        this.subscribers[event] = [];
    };
    VirtualDeviceValidator.prototype.voiceID = function (voiceID) {
        this._voiceID = voiceID;
    };
    VirtualDeviceValidator.prototype.checkAuth = function (invocationName) {
        var _this = this;
        if (!this.userID) {
            return Promise.resolve("AUTHORIZED");
        }
        return new Promise(function (resolve, reject) {
            var data = "";
            var params = "?invocation_name=" + invocationName +
                ("&user_id=" + _this.userID);
            var url = _this.sourceAPIBaseURL + "/v1/skillAuthorized" + params;
            var req = https.get(url, function (res) {
                res.on("data", function (chunk) {
                    data += chunk;
                });
                res.on("end", function () {
                    if (res.statusCode === 200 && data === "AUTHORIZED") {
                        resolve(data);
                    }
                    else {
                        reject(exports.VirtualDeviceValidatorUnauthorizedMessage(invocationName));
                    }
                });
            });
            req.on("error", function (error) {
                reject(error.message);
            });
            req.end();
        });
    };
    VirtualDeviceValidator.prototype.emit = function (event, error, data, context) {
        if (event in this.subscribers) {
            this.subscribers[event].forEach(function (subscriber) {
                subscriber(error, data, context);
            });
        }
    };
    VirtualDeviceValidator.prototype.virtualDevice = function (sequence) {
        var token = this.token ? this.token : process.env.VIRTUAL_DEVICE_TOKEN;
        var tokenName;
        if (sequence.locale) {
            tokenName = "VIRTUAL_DEVICE_TOKEN_" + sequence.locale.toUpperCase().replace("-", "_");
            if (process.env[tokenName]) {
                token = process.env[tokenName];
            }
        }
        if (!token) {
            if (tokenName) {
                throw new Error("No environment variable specified for VIRTUAL_DEVICE_TOKEN or " + tokenName);
            }
            else {
                throw new Error("No environment variable specified for VIRTUAL_DEVICE_TOKEN");
            }
        }
        var locale = this._locale ? this._locale : sequence.locale;
        var voiceID = this._voiceID ? this._voiceID : sequence.voiceID;
        var virtualDevice = new VirtualDevice_1.VirtualDevice(token, locale, voiceID);
        for (var _i = 0, _a = Object.keys(process.env); _i < _a.length; _i++) {
            var key = _a[_i];
            if (key.startsWith("homophones")) {
                var word = key.substr("homophones".length + 1);
                var homophones = process.env[key];
                if (homophones) {
                    var homophonesValues = homophones.split(",");
                    virtualDevice.addHomophones(word, homophonesValues);
                }
            }
        }
        return virtualDevice;
    };
    return VirtualDeviceValidator;
}());
exports.VirtualDeviceValidator = VirtualDeviceValidator;
var ValidatorError = (function () {
    function ValidatorError(message, property, expected, actual) {
        this.message = message;
        this.property = property;
        this.expected = expected;
        this.actual = actual;
    }
    ValidatorError.asArray = function (message) {
        return [new ValidatorError(message)];
    };
    ValidatorError.propertyError = function (property, expected, actual) {
        return new ValidatorError(undefined, property, expected, actual);
    };
    return ValidatorError;
}());
exports.ValidatorError = ValidatorError;
var Validator = (function () {
    function Validator(resultItem, error) {
        this.resultItem = resultItem;
        this.error = error;
    }
    Validator.checkString = function (property, value, expected, caseSensitive) {
        if (caseSensitive === void 0) { caseSensitive = true; }
        if (!expected) {
            return undefined;
        }
        if (!value) {
            return ValidatorError.propertyError(property, expected, value);
        }
        if (!caseSensitive) {
            value = value.toLowerCase();
        }
        if (Array.isArray(expected)) {
            for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {
                var expectedValue = expected_1[_i];
                if (!caseSensitive) {
                    expectedValue = expectedValue.toLowerCase();
                }
                if (Validator.toRegex(expectedValue).test(value)) {
                    return undefined;
                }
            }
            return ValidatorError.propertyError(property, expected, value);
        }
        else {
            if (!caseSensitive) {
                expected = expected.toLowerCase();
            }
            var matches = Validator.toRegex(expected).test(value);
            if (matches) {
                return undefined;
            }
            else {
                return ValidatorError.propertyError(property, expected, value);
            }
        }
    };
    Validator.checkObject = function (parentProperty, value, expected) {
        if (!expected) {
            return undefined;
        }
        if (!value) {
            return ValidatorError.propertyError(parentProperty, expected, value);
        }
        console.log("CheckObject" + parentProperty);
        for (var _i = 0, _a = Object.keys(expected); _i < _a.length; _i++) {
            var property = _a[_i];
            var expectedPropertyValue = expected[property];
            var actualPropertyValue = value[property];
            var fullProperty = property;
            if (parentProperty) {
                fullProperty = parentProperty + "." + property;
            }
            if (typeof expectedPropertyValue === "string") {
                var error = Validator.checkString(fullProperty, actualPropertyValue, expectedPropertyValue);
                if (error) {
                    return error;
                }
            }
            else {
                var error = Validator.checkObject(fullProperty, actualPropertyValue, expectedPropertyValue);
                if (error) {
                    return error;
                }
            }
        }
        return undefined;
    };
    Validator.toRegex = function (expectedValue) {
        var regex = expectedValue.trim().split("*").join(".*");
        regex = regex.split("+").join("\\+");
        regex = regex.split("^").join("\\^");
        regex = regex.split("$").join("\\$");
        regex = regex.split("?").join("\\?");
        return new RegExp(regex);
    };
    Validator.prototype.check = function () {
        if (this.error) {
            return ValidatorError.asArray(this.error.message);
        }
        if (this.resultItem.test.comparison !== "contains") {
            return ValidatorError.asArray("Invalid test comparison: " + this.resultItem.test.comparison);
        }
        if (!this.resultItem.actual) {
            return ValidatorError.asArray("Invalid test result - no result");
        }
        if (!this.resultItem.test.expected) {
            return [];
        }
        var transcriptError = Validator.checkString("transcript", this.resultItem.actual.transcript, this.resultItem.test.expected.transcript, false);
        var streamError = Validator.checkString("streamURL", this.resultItem.actual.streamURL, this.resultItem.test.expected.streamURL);
        var cardError = Validator.checkObject("card", this.resultItem.actual.card, this.resultItem.test.expected.card);
        var errors = [];
        if (transcriptError) {
            errors.push(transcriptError);
        }
        if (streamError) {
            errors.push(streamError);
        }
        if (cardError) {
            errors.push(cardError);
        }
        return errors;
    };
    return Validator;
}());
exports.Validator = Validator;
//# sourceMappingURL=VirtualDeviceValidator.js.map