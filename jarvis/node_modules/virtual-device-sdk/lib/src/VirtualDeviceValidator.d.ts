import { IVirtualDeviceResult, VirtualDevice } from "./VirtualDevice";
export declare const VirtualDeviceScriptUnauthorizedError: Error;
export declare const VirtualDeviceValidatorUnauthorizedMessage: (invocationName: string) => string;
export declare abstract class VirtualDeviceValidator {
    protected token?: string | undefined;
    private sourceAPIBaseURL;
    private subscribers;
    private _locale?;
    private userID?;
    private _voiceID?;
    constructor(token?: string | undefined, userID?: string);
    execute(virtualDeviceTestSequences: IVirtualDeviceTestSequence[], context?: any): Promise<IVirtualDeviceValidatorResult>;
    locale(locale: string): void;
    subscribe(event: string, cb: any): void;
    unsubscribe(event: string): void;
    voiceID(voiceID: string): void;
    checkAuth(invocationName: string): Promise<any>;
    protected emit(event: string, error: any, data: any, context?: any): void;
    protected abstract executeSequence(sequence: IVirtualDeviceTestSequence, result: IVirtualDeviceValidatorResult, context?: any): Promise<void>;
    protected virtualDevice(sequence: IVirtualDeviceTestSequence): VirtualDevice;
}
export interface IVirtualDeviceTest {
    sequence: number;
    sequenceIndex?: number;
    absoluteIndex?: number;
    input: string;
    comparison: string;
    expected?: {
        card?: any;
        streamURL?: string | string[];
        transcript?: string | string[];
    };
}
export interface IVirtualDeviceTestSequence {
    invocationName: string;
    locale?: string;
    tests: IVirtualDeviceTest[];
    voiceID?: string;
}
export interface IVirtualDeviceValidatorResultItem {
    actual?: IVirtualDeviceResult;
    errors?: ValidatorError[];
    result?: "success" | "failure";
    status?: "scheduled" | "running" | "done";
    test: IVirtualDeviceTest;
}
export declare class ValidatorError {
    message?: string | undefined;
    property?: string | undefined;
    expected?: string | string[] | undefined;
    actual?: string | null | undefined;
    static asArray(message: string): ValidatorError[];
    static propertyError(property: string, expected: undefined | string | string[], actual: null | string): ValidatorError;
    constructor(message?: string | undefined, property?: string | undefined, expected?: string | string[] | undefined, actual?: string | null | undefined);
}
export interface IVirtualDeviceValidatorResult {
    errorMessage?: string;
    result?: "success" | "failure";
    tests: IVirtualDeviceValidatorResultItem[];
}
export declare class Validator {
    private static checkString;
    private static checkObject;
    private static toRegex;
    resultItem: IVirtualDeviceValidatorResultItem;
    error?: Error;
    constructor(resultItem: IVirtualDeviceValidatorResultItem, error?: Error);
    check(): ValidatorError[];
}
