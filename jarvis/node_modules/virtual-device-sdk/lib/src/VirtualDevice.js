"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var URL = require("url");
var VirtualDevice = (function () {
    function VirtualDevice(token, locale, voiceID) {
        this.token = token;
        this.locale = locale;
        this.voiceID = voiceID;
        this.homophones = {};
        this.baseURL = process.env.VIRTUAL_DEVICE_BASE_URL
            ? process.env.VIRTUAL_DEVICE_BASE_URL
            : "https://virtual-device.bespoken.io";
    }
    VirtualDevice.prototype.addHomophones = function (word, homophones) {
        homophones = homophones.map(function (s) { return s.trim(); });
        this.homophones[word] = homophones;
    };
    VirtualDevice.prototype.httpInterface = function (url) {
        if (url.protocol === "https:") {
            return https;
        }
        else {
            return http;
        }
    };
    VirtualDevice.prototype.httpInterfacePort = function (url) {
        if (url.port) {
            return url.port;
        }
        if (url.protocol === "https:") {
            return 443;
        }
        else {
            return 80;
        }
    };
    VirtualDevice.prototype.message = function (message, debug, phrases) {
        var _this = this;
        var url = this.baseURL + "/process"
            + "?message=" + message
            + "&user_id=" + this.token;
        if (phrases) {
            for (var _i = 0, phrases_1 = phrases; _i < phrases_1.length; _i++) {
                var phrase = phrases_1[_i];
                url += "&phrases=" + phrase;
            }
        }
        if (debug) {
            url += "&debug=true";
        }
        if (this.locale) {
            url += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            url += "&voice_id=" + this.voiceID;
        }
        url = encodeURI(url);
        var urlParsed = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        var result = JSON.parse(data);
                        result.message = message;
                        _this.applyHomophones(result);
                        resolve(result);
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var request = _this.httpInterface(urlParsed).get(url, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.end();
        });
    };
    VirtualDevice.prototype.batchMessage = function (messages, debug) {
        var _this = this;
        var path = "/batch_process?user_id=" + this.token;
        if (debug) {
            path += "&debug=true";
        }
        if (this.locale) {
            path += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            path += "&voice_id=" + this.voiceID;
        }
        var url = URL.parse(this.baseURL);
        return new Promise(function (resolve, reject) {
            var callback = function (response) {
                var data = "";
                response.on("data", function (chunk) {
                    data += chunk;
                });
                response.on("end", function () {
                    if (response.statusCode === 200) {
                        resolve(_this.handleBatchResponse(data));
                    }
                    else {
                        reject(data);
                    }
                });
            };
            var input = {
                messages: messages,
            };
            var inputString = JSON.stringify(input);
            var requestOptions = {
                headers: {
                    "Content-Length": new Buffer(inputString).length,
                    "Content-Type": "application/json",
                },
                host: url.hostname,
                method: "POST",
                path: path,
                port: _this.httpInterfacePort(url),
            };
            var request = _this.httpInterface(url).request(requestOptions, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.write(inputString);
            request.end();
        });
    };
    VirtualDevice.prototype.waitForSessionToEnd = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ms;
            return __generator(this, function (_a) {
                ms = process.env.SESSION_IDLE_MS
                    ? parseInt(process.env.SESSION_IDLE_MS, 10)
                    : 8000;
                return [2, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
            });
        });
    };
    VirtualDevice.prototype.handleBatchResponse = function (data) {
        var json = JSON.parse(data);
        for (var _i = 0, _a = json.results; _i < _a.length; _i++) {
            var result = _a[_i];
            this.applyHomophones(result);
        }
        return json.results;
    };
    VirtualDevice.prototype.applyHomophones = function (result) {
        if (!result.debug) {
            result.debug = {};
        }
        if (!result.transcript) {
            return;
        }
        var keys = Object.keys(this.homophones);
        result.debug.rawTranscript = result.transcript;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var word = key.split("_").join(" ");
            var homophones = this.homophones[key];
            for (var _a = 0, homophones_1 = homophones; _a < homophones_1.length; _a++) {
                var homophone = homophones_1[_a];
                result.transcript = result.transcript.split(new RegExp("\\b" + homophone + "\\b")).join(word);
            }
        }
    };
    return VirtualDevice;
}());
exports.VirtualDevice = VirtualDevice;
//# sourceMappingURL=VirtualDevice.js.map