export declare class VirtualDevice {
    token: string;
    locale?: string | undefined;
    voiceID?: string | undefined;
    baseURL: string;
    homophones: {
        [id: string]: string[];
    };
    constructor(token: string, locale?: string | undefined, voiceID?: string | undefined);
    addHomophones(word: string, homophones: string[]): void;
    httpInterface(url: any): any;
    httpInterfacePort(url: any): any;
    message(message: string, debug?: boolean, phrases?: string[]): Promise<IVirtualDeviceResult>;
    batchMessage(messages: IMessage[], debug?: boolean): Promise<IVirtualDeviceResult[]>;
    waitForSessionToEnd(): Promise<{}>;
    private handleBatchResponse;
    private applyHomophones;
}
export interface IVirtualDeviceResult {
    card: ICard | null;
    debug: {
        rawTranscript?: string;
        rawJSON?: any;
    };
    sessionTimeout: number;
    streamURL: string | null;
    transcript: string | null;
    message: string;
}
export interface ICard {
    imageURL: string | null;
    mainTitle: string | null;
    subTitle: string | null;
    textField: string | null;
    type: string;
}
export interface IMessage {
    text: string;
    phrases?: string[];
}
