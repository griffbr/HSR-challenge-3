"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var SkillRequest_1 = require("../core/SkillRequest");
var AudioItem_1 = require("./AudioItem");
var AudioPlayerActivity;
(function (AudioPlayerActivity) {
    AudioPlayerActivity[AudioPlayerActivity["BUFFER_UNDERRUN"] = 0] = "BUFFER_UNDERRUN";
    AudioPlayerActivity[AudioPlayerActivity["FINISHED"] = 1] = "FINISHED";
    AudioPlayerActivity[AudioPlayerActivity["IDLE"] = 2] = "IDLE";
    AudioPlayerActivity[AudioPlayerActivity["PLAYING"] = 3] = "PLAYING";
    AudioPlayerActivity[AudioPlayerActivity["PAUSED"] = 4] = "PAUSED";
    AudioPlayerActivity[AudioPlayerActivity["STOPPED"] = 5] = "STOPPED";
})(AudioPlayerActivity = exports.AudioPlayerActivity || (exports.AudioPlayerActivity = {}));
var AudioPlayer = (function () {
    function AudioPlayer(_interactor) {
        this._playing = null;
        this._queue = [];
        this._activity = null;
        this._suspended = false;
        this._activity = AudioPlayerActivity.IDLE;
        this._interactor = _interactor;
    }
    AudioPlayer.prototype.isPlaying = function () {
        return (this._activity === AudioPlayerActivity.PLAYING);
    };
    AudioPlayer.prototype.playbackOffset = function (offset) {
        if (this.isPlaying()) {
            this.playing().stream.offsetInMilliseconds = offset;
        }
    };
    AudioPlayer.prototype.playbackNearlyFinished = function () {
        return this.audioPlayerRequest(SkillRequest_1.RequestType.AUDIO_PLAYER_PLAYBACK_NEARLY_FINISHED);
    };
    AudioPlayer.prototype.playbackFinished = function () {
        this._activity = AudioPlayerActivity.FINISHED;
        var promise = this.audioPlayerRequest(SkillRequest_1.RequestType.AUDIO_PLAYER_PLAYBACK_FINISHED);
        this.playNext();
        return promise;
    };
    AudioPlayer.prototype.playbackStarted = function () {
        this._activity = AudioPlayerActivity.PLAYING;
        return this.audioPlayerRequest(SkillRequest_1.RequestType.AUDIO_PLAYER_PLAYBACK_STARTED);
    };
    AudioPlayer.prototype.playbackStopped = function () {
        this._activity = AudioPlayerActivity.STOPPED;
        return this.audioPlayerRequest(SkillRequest_1.RequestType.AUDIO_PLAYER_PLAYBACK_STOPPED);
    };
    AudioPlayer.prototype.playerActivity = function () {
        return this._activity;
    };
    AudioPlayer.prototype.playing = function () {
        return this._playing;
    };
    AudioPlayer.prototype.resume = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._suspended = false;
                        if (!!this.isPlaying()) return [3, 2];
                        return [4, this.playbackStarted()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2];
                }
            });
        });
    };
    AudioPlayer.prototype.suspend = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._suspended = true;
                        return [4, this.playbackStopped()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    AudioPlayer.prototype.suspended = function () {
        return this._suspended;
    };
    AudioPlayer.prototype.directivesReceived = function (directives) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, directives_1, directive;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _i = 0, directives_1 = directives;
                        _a.label = 1;
                    case 1:
                        if (!(_i < directives_1.length)) return [3, 4];
                        directive = directives_1[_i];
                        return [4, this.handleDirective(directive)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    AudioPlayer.prototype.audioPlayerRequest = function (requestType) {
        return __awaiter(this, void 0, void 0, function () {
            var nowPlaying, serviceRequest;
            return __generator(this, function (_a) {
                nowPlaying = this.playing();
                serviceRequest = new SkillRequest_1.SkillRequest(this._interactor.context());
                serviceRequest.audioPlayerRequest(requestType, nowPlaying.stream.token, nowPlaying.stream.offsetInMilliseconds);
                return [2, this._interactor.callSkill(serviceRequest)];
            });
        });
    };
    AudioPlayer.prototype.enqueue = function (audioItem, playBehavior) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(playBehavior === AudioPlayer.PLAY_BEHAVIOR_ENQUEUE)) return [3, 1];
                        this._queue.push(audioItem);
                        return [3, 5];
                    case 1:
                        if (!(playBehavior === AudioPlayer.PLAY_BEHAVIOR_REPLACE_ALL)) return [3, 4];
                        if (!this.isPlaying()) return [3, 3];
                        return [4, this.playbackStopped()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this._queue = [];
                        this._queue.push(audioItem);
                        return [3, 5];
                    case 4:
                        if (playBehavior === AudioPlayer.PLAY_BEHAVIOR_REPLACE_ENQUEUED) {
                            this._queue = [];
                            this._queue.push(audioItem);
                        }
                        _a.label = 5;
                    case 5:
                        if (!!this.isPlaying()) return [3, 7];
                        return [4, this.playNext()];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2];
                }
            });
        });
    };
    AudioPlayer.prototype.handleDirective = function (directive) {
        return __awaiter(this, void 0, void 0, function () {
            var audioItem, playBehavior;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(directive.type === AudioPlayer.DIRECTIVE_PLAY)) return [3, 2];
                        audioItem = new AudioItem_1.AudioItem(directive.audioItem);
                        playBehavior = directive.playBehavior;
                        return [4, this.enqueue(audioItem, playBehavior)];
                    case 1:
                        _a.sent();
                        return [3, 5];
                    case 2:
                        if (!(directive.type === AudioPlayer.DIRECTIVE_STOP)) return [3, 5];
                        if (!this.suspended()) return [3, 3];
                        this._suspended = false;
                        return [3, 5];
                    case 3:
                        if (!this.playing()) return [3, 5];
                        return [4, this.playbackStopped()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2];
                }
            });
        });
    };
    AudioPlayer.prototype.dequeue = function () {
        var audioItem = this._queue[0];
        this._queue = this._queue.slice(1);
        return audioItem;
    };
    AudioPlayer.prototype.playNext = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._queue.length === 0) {
                    return [2];
                }
                this._playing = this.dequeue();
                if (this._playing.stream.url.startsWith("http:")) {
                    return [2, this._interactor.sessionEnded(SkillRequest_1.SessionEndedReason.ERROR, {
                            message: "The URL specified in the Play directive must be HTTPS",
                            type: "INVALID_RESPONSE",
                        })];
                }
                else {
                    return [2, this.playbackStarted()];
                }
                return [2];
            });
        });
    };
    AudioPlayer.DIRECTIVE_PLAY = "AudioPlayer.Play";
    AudioPlayer.DIRECTIVE_STOP = "AudioPlayer.Stop";
    AudioPlayer.DIRECTIVE_CLEAR_QUEUE = "AudioPlayer.ClearQueue";
    AudioPlayer.PLAY_BEHAVIOR_REPLACE_ALL = "REPLACE_ALL";
    AudioPlayer.PLAY_BEHAVIOR_ENQUEUE = "ENQUEUE";
    AudioPlayer.PLAY_BEHAVIOR_REPLACE_ENQUEUED = "REPLACE_ENQUEUED";
    return AudioPlayer;
}());
exports.AudioPlayer = AudioPlayer;
//# sourceMappingURL=AudioPlayer.js.map