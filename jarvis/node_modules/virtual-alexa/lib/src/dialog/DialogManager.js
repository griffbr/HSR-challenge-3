"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UserIntent_1 = require("../impl/UserIntent");
var BuiltinUtterances_1 = require("../model/BuiltinUtterances");
var DelegatedDialogResponse_1 = require("./DelegatedDialogResponse");
var DialogOutput_1 = require("./DialogOutput");
var DialogState;
(function (DialogState) {
    DialogState["COMPLETED"] = "COMPLETED";
    DialogState["IN_PROGRESS"] = "IN_PROGRESS";
    DialogState["STARTED"] = "STARTED";
})(DialogState = exports.DialogState || (exports.DialogState = {}));
var DialogManager = (function () {
    function DialogManager(context) {
        this.context = context;
        this._delegated = false;
        this._confirmingIntent = false;
        this._confirmingSlot = undefined;
        this._dialogIntent = undefined;
        this._dialogState = undefined;
        this._slots = {};
    }
    DialogManager.prototype.handleDirective = function (response) {
        for (var _i = 0, _a = response.response.directives; _i < _a.length; _i++) {
            var directive = _a[_i];
            if (directive.type.startsWith("Dialog")) {
                if (directive.updatedIntent) {
                    this._dialogIntent = this.context.interactionModel().dialogIntent(directive.updatedIntent.name);
                    if (!this._dialogIntent) {
                        throw new Error("No match for dialog name: " + directive.updatedIntent.name);
                    }
                }
                if (directive.type === "Dialog.Delegate") {
                    this._delegated = true;
                    this._dialogState = DialogState.STARTED;
                    this._confirmationStatus = ConfirmationStatus.NONE;
                    var dialogResponse = this.processDialog(directive.updatedIntent.name, directive.updatedIntent.slots);
                    if (dialogResponse) {
                        return dialogResponse;
                    }
                }
                else if (directive.type === "Dialog.ElicitSlot"
                    || directive.type === "Dialog.ConfirmSlot"
                    || directive.type === "Dialog.ConfirmIntent") {
                    this._dialogState = this._dialogState ? DialogState.IN_PROGRESS : DialogState.STARTED;
                    if (!this._confirmationStatus) {
                        this._confirmationStatus = ConfirmationStatus.NONE;
                    }
                    if (directive.updatedIntent) {
                        this.updateSlotStates(directive.updatedIntent.slots);
                    }
                    if (directive.type === "Dialog.ConfirmSlot") {
                        var slotToConfirm = directive.slotToConfirm;
                        this._confirmingSlot = this.slots()[slotToConfirm];
                    }
                    else if (directive.type === "Dialog.ConfirmIntent") {
                        this._confirmingIntent = true;
                        this._dialogState = DialogState.COMPLETED;
                    }
                    return DialogOutput_1.DialogOutput.noop();
                }
            }
        }
        return DialogOutput_1.DialogOutput.noop();
    };
    DialogManager.prototype.confirmationStatus = function () {
        return this._confirmationStatus;
    };
    DialogManager.prototype.handleUtterance = function (utterance) {
        if (this._confirmingSlot || this._dialogState === DialogState.COMPLETED) {
            if (BuiltinUtterances_1.BuiltinUtterances.values()["AMAZON.YesIntent"].indexOf(utterance) !== -1) {
                return new UserIntent_1.UserIntent(this.context, "AMAZON.YesIntent");
            }
            else if (BuiltinUtterances_1.BuiltinUtterances.values()["AMAZON.NoIntent"].indexOf(utterance) !== -1) {
                return new UserIntent_1.UserIntent(this.context, "AMAZON.NoIntent");
            }
        }
        else if (this.isDialog()) {
            var providedSlots = {};
            var matched = false;
            for (var _i = 0, _a = this._dialogIntent.slots; _i < _a.length; _i++) {
                var slot = _a[_i];
                var slotType = this.context.interactionModel().slotTypes.slotType(slot.type);
                if (!slotType) {
                    throw new Error("No match in interaction model for slot type: "
                        + slot.type + " on slot: " + slot.name);
                }
                var match = slotType.match(utterance);
                if (match.matches) {
                    matched = true;
                    providedSlots[slot.name] = match.value;
                }
            }
            if (matched) {
                return new UserIntent_1.UserIntent(this.context, this._dialogIntent.name, providedSlots);
            }
        }
        return undefined;
    };
    DialogManager.prototype.handleIntent = function (intent) {
        if (this.isDialog()) {
            if (intent.name === this._dialogIntent.name ||
                intent.name === "AMAZON.YesIntent" ||
                intent.name === "AMAZON.NoIntent") {
                return this.processDialog(intent.name, intent.slots());
            }
            else {
                return this.dialogExited();
            }
        }
        else if (this.context.interactionModel().dialogIntent(intent.name)) {
            this._dialogIntent = this.context.interactionModel().dialogIntent(intent.name);
            this.updateSlotStates(intent.slots());
        }
        return DialogOutput_1.DialogOutput.noop();
    };
    DialogManager.prototype.isDelegated = function () {
        return this._delegated;
    };
    DialogManager.prototype.isDialog = function () {
        return this._dialogState !== undefined;
    };
    DialogManager.prototype.dialogState = function () {
        return this._dialogState;
    };
    DialogManager.prototype.reset = function () {
        this.dialogExited();
    };
    DialogManager.prototype.slots = function () {
        return this._slots;
    };
    DialogManager.prototype.confirmationPrompt = function (slots) {
        return this.context.interactionModel().prompt(this._dialogIntent.prompts.confirmation).variation(slots);
    };
    DialogManager.prototype.updateSlotStates = function (slots) {
        if (!slots) {
            return;
        }
        for (var _i = 0, _a = Object.keys(slots); _i < _a.length; _i++) {
            var slotName = _a[_i];
            var slot = this._slots[slotName];
            if (slot) {
                slot.update(slots[slotName]);
            }
            else {
                this._slots[slotName] = slots[slotName];
            }
        }
    };
    DialogManager.prototype.dialogExited = function () {
        this._confirmationStatus = undefined;
        this._confirmingIntent = false;
        this._delegated = false;
        this._dialogState = undefined;
        this._dialogIntent = undefined;
        this._slots = {};
        return DialogOutput_1.DialogOutput.noop();
    };
    DialogManager.prototype.processDialog = function (intentName, slots) {
        var confirmationRequired = (this.isDelegated() && this._dialogIntent.confirmationRequired)
            || this._confirmingIntent;
        if (this._dialogState === DialogState.COMPLETED
            && confirmationRequired
            && this._confirmationStatus === ConfirmationStatus.NONE) {
            this._confirmationStatus = (intentName === "AMAZON.YesIntent")
                ? ConfirmationStatus.CONFIRMED
                : ConfirmationStatus.DENIED;
            return DialogOutput_1.DialogOutput.transformedIntent(new UserIntent_1.UserIntent(this.context, this._dialogIntent.name));
        }
        if (this._confirmingSlot) {
            if (intentName === "AMAZON.YesIntent") {
                this._confirmingSlot.confirmationStatus = ConfirmationStatus.CONFIRMED;
                this._confirmingSlot = undefined;
            }
            else if (intentName === "AMAZON.NoIntent") {
                this._slots[this._confirmingSlot.name].value = undefined;
                this._confirmingSlot = undefined;
            }
            else {
                return this.dialogExited();
            }
        }
        else {
            this.updateSlotStates(slots);
        }
        if (!this.isDelegated()) {
            return DialogOutput_1.DialogOutput.transformedIntent(new UserIntent_1.UserIntent(this.context, this._dialogIntent.name));
        }
        var delegatedResponse;
        for (var _i = 0, _a = this._dialogIntent.slots; _i < _a.length; _i++) {
            var slot = _a[_i];
            var slotState = this._slots[slot.name];
            if (slotState && slotState.value) {
                if (slot.confirmationRequired) {
                    if (slotState.confirmationStatus === ConfirmationStatus.NONE) {
                        this._confirmingSlot = slotState;
                        var prompt_1 = slot.confirmationPrompt().variation(this.slots());
                        delegatedResponse = new DelegatedDialogResponse_1.DelegatedDialogResponse(prompt_1);
                        break;
                    }
                    else if (slotState.confirmationStatus === ConfirmationStatus.DENIED) {
                        var prompt_2 = slot.elicitationPrompt().variation(this.slots());
                        delegatedResponse = new DelegatedDialogResponse_1.DelegatedDialogResponse(prompt_2);
                        break;
                    }
                }
            }
            else if (slot.elicitationRequired) {
                var prompt_3 = slot.elicitationPrompt();
                delegatedResponse = new DelegatedDialogResponse_1.DelegatedDialogResponse(prompt_3.variation(this.slots()));
                break;
            }
        }
        if (delegatedResponse) {
            return DialogOutput_1.DialogOutput.delegatedResponse(delegatedResponse);
        }
        this._dialogState = DialogState.COMPLETED;
        if (this._dialogIntent.confirmationRequired) {
            delegatedResponse = new DelegatedDialogResponse_1.DelegatedDialogResponse(this.confirmationPrompt(this.slots()));
            return DialogOutput_1.DialogOutput.delegatedResponse(delegatedResponse);
        }
        return DialogOutput_1.DialogOutput.noop();
    };
    return DialogManager;
}());
exports.DialogManager = DialogManager;
var ConfirmationStatus;
(function (ConfirmationStatus) {
    ConfirmationStatus["CONFIRMED"] = "CONFIRMED";
    ConfirmationStatus["DENIED"] = "DENIED";
    ConfirmationStatus["NONE"] = "NONE";
})(ConfirmationStatus = exports.ConfirmationStatus || (exports.ConfirmationStatus = {}));
//# sourceMappingURL=DialogManager.js.map