"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var virtual_core_1 = require("virtual-core");
var DialogIntent_1 = require("../dialog/DialogIntent");
var BuiltinSlotTypes_1 = require("./BuiltinSlotTypes");
var BuiltinUtterances_1 = require("./BuiltinUtterances");
var IntentSchema_1 = require("./IntentSchema");
var SampleUtterancesBuilder_1 = require("./SampleUtterancesBuilder");
var SlotPrompt_1 = require("./SlotPrompt");
var InteractionModel = (function () {
    function InteractionModel(intentSchema, sampleUtterances, slotTypes, prompts, dialogIntents) {
        this.intentSchema = intentSchema;
        this.sampleUtterances = sampleUtterances;
        this.slotTypes = slotTypes;
        this.prompts = prompts;
        this.dialogIntents = dialogIntents;
        if (!this.slotTypes) {
            this.slotTypes = new virtual_core_1.SlotTypes([]);
        }
        this.sampleUtterances.setInteractionModel(this);
        if (this.dialogIntents) {
            for (var _i = 0, _a = this.dialogIntents; _i < _a.length; _i++) {
                var dialogIntent = _a[_i];
                dialogIntent.interactionModel = this;
            }
        }
        var builtinValues = BuiltinUtterances_1.BuiltinUtterances.values();
        var isAudioPlayerSupported = this.audioPlayerSupported(intentSchema);
        for (var _b = 0, _c = Object.keys(builtinValues); _b < _c.length; _b++) {
            var key = _c[_b];
            var isSupportedIntent = this.isSupportedIntent(isAudioPlayerSupported, key);
            if (isSupportedIntent) {
                intentSchema.addIntent(key);
                for (var _d = 0, _e = builtinValues[key]; _d < _e.length; _d++) {
                    var phrase = _e[_d];
                    this.sampleUtterances.addSample(key, phrase);
                }
            }
        }
        this.slotTypes.addTypes(BuiltinSlotTypes_1.BuiltinSlotTypes.values());
    }
    InteractionModel.fromFile = function (interactionModelFile) {
        var data = fs.readFileSync(interactionModelFile);
        var json = JSON.parse(data.toString());
        return InteractionModel.fromJSON(json);
    };
    InteractionModel.fromJSON = function (interactionModel) {
        var schemaJSON = {
            intents: [],
        };
        var sampleJSON = {};
        var languageModel = interactionModel;
        var promptsElement = interactionModel.prompts;
        var dialogElement = interactionModel.dialog;
        if ("interactionModel" in interactionModel) {
            languageModel = interactionModel.interactionModel.languageModel;
            promptsElement = interactionModel.interactionModel.prompts;
            dialogElement = interactionModel.interactionModel.dialog;
        }
        if ("languageModel" in interactionModel) {
            languageModel = interactionModel.languageModel;
        }
        var intents = languageModel.intents;
        for (var _i = 0, intents_1 = intents; _i < intents_1.length; _i++) {
            var intent = intents_1[_i];
            intent.intent = intent.name;
            schemaJSON.intents.push(intent);
            if (intent.samples) {
                sampleJSON[intent.intent] = intent.samples;
            }
        }
        var slotTypes;
        if (languageModel.types) {
            slotTypes = new virtual_core_1.SlotTypes(languageModel.types);
        }
        var schema = new IntentSchema_1.IntentSchema(schemaJSON);
        var samples = SampleUtterancesBuilder_1.SampleUtterancesBuilder.fromJSON(sampleJSON);
        var prompts;
        if (promptsElement) {
            prompts = [];
            for (var _a = 0, promptsElement_1 = promptsElement; _a < promptsElement_1.length; _a++) {
                var prompt_1 = promptsElement_1[_a];
                prompts.push(SlotPrompt_1.SlotPrompt.fromJSON(prompt_1));
            }
        }
        var dialogIntents;
        if (dialogElement) {
            dialogIntents = [];
            for (var _b = 0, _c = dialogElement.intents; _b < _c.length; _b++) {
                var dialogIntent = _c[_b];
                dialogIntents.push(DialogIntent_1.DialogIntent.fromJSON(interactionModel, dialogIntent));
            }
        }
        return new InteractionModel(schema, samples, slotTypes, prompts, dialogIntents);
    };
    InteractionModel.fromLocale = function (locale) {
        var modelPath = "./models/" + locale + ".json";
        if (!fs.existsSync(modelPath)) {
            return undefined;
        }
        return InteractionModel.fromFile(modelPath);
    };
    InteractionModel.prototype.isSupportedIntent = function (isAudioPlayerSupported, intent) {
        var hasIntent = this.hasIntent(intent);
        var isAudioPlayerIntent = isAudioPlayerSupported && BuiltinUtterances_1.AudioPlayerIntents.indexOf(intent) >= 0;
        return hasIntent || isAudioPlayerIntent;
    };
    InteractionModel.prototype.hasIntent = function (intent) {
        return this.intentSchema.hasIntent(intent);
    };
    InteractionModel.prototype.dialogIntent = function (intentName) {
        if (!this.dialogIntents) {
            return undefined;
        }
        for (var _i = 0, _a = this.dialogIntents; _i < _a.length; _i++) {
            var dialogIntent = _a[_i];
            if (dialogIntent.name === intentName) {
                return dialogIntent;
            }
        }
        return undefined;
    };
    InteractionModel.prototype.prompt = function (id) {
        if (!this.prompts) {
            return undefined;
        }
        for (var _i = 0, _a = this.prompts; _i < _a.length; _i++) {
            var prompt_2 = _a[_i];
            if (prompt_2.id === id) {
                return prompt_2;
            }
        }
        return undefined;
    };
    InteractionModel.prototype.audioPlayerSupported = function (intentSchema) {
        return intentSchema.hasIntent("AMAZON.PauseIntent") && intentSchema.hasIntent("AMAZON.ResumeIntent");
    };
    return InteractionModel;
}());
exports.InteractionModel = InteractionModel;
//# sourceMappingURL=InteractionModel.js.map