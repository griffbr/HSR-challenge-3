"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var virtual_core_1 = require("virtual-core");
var BuiltinSlotTypes = (function () {
    function BuiltinSlotTypes() {
    }
    BuiltinSlotTypes.values = function () {
        return [
            new NumberSlotType(),
        ];
    };
    return BuiltinSlotTypes;
}());
exports.BuiltinSlotTypes = BuiltinSlotTypes;
var BuiltinSlotType = (function (_super) {
    __extends(BuiltinSlotType, _super);
    function BuiltinSlotType(name, values, regex) {
        var _this = _super.call(this, name, values) || this;
        _this.name = name;
        _this.values = values;
        _this.regex = regex;
        return _this;
    }
    BuiltinSlotType.prototype.match = function (value) {
        value = value.trim();
        var slotMatch = new virtual_core_1.SlotMatch(false);
        if (this.regex) {
            var match = value.match(this.regex);
            if (match) {
                slotMatch = new virtual_core_1.SlotMatch(true, value);
            }
        }
        if (!slotMatch.matches) {
            slotMatch = _super.prototype.match.call(this, value);
        }
        return slotMatch;
    };
    return BuiltinSlotType;
}(virtual_core_1.SlotType));
exports.BuiltinSlotType = BuiltinSlotType;
var NumberSlotType = (function (_super) {
    __extends(NumberSlotType, _super);
    function NumberSlotType() {
        return _super.call(this, "AMAZON.NUMBER", NumberSlotType.LONG_FORM_SLOT_VALUES(), "^[0-9]*$") || this;
    }
    NumberSlotType.LONG_FORM_SLOT_VALUES = function () {
        var slotValues = [];
        for (var _i = 0, _a = Object.keys(NumberSlotType.LONG_FORM_VALUES); _i < _a.length; _i++) {
            var key = _a[_i];
            var values = NumberSlotType.LONG_FORM_VALUES[key];
            slotValues.push({ id: key, builtin: true, name: { value: key, synonyms: values } });
        }
        return slotValues;
    };
    NumberSlotType.prototype.isEnumerated = function () {
        return true;
    };
    NumberSlotType.LONG_FORM_VALUES = {
        1: ["one"],
        2: ["two"],
        3: ["three"],
        4: ["four"],
        5: ["five"],
        6: ["six"],
        7: ["seven"],
        8: ["eight"],
        9: ["nine"],
        10: ["ten"],
        11: ["eleven"],
        12: ["twelve"],
        13: ["thirteen"],
        14: ["fourteen"],
        15: ["fifteen"],
        16: ["sixteen"],
        17: ["seventeen"],
        18: ["eighteen"],
        19: ["nineteen"],
        20: ["twenty"],
    };
    return NumberSlotType;
}(BuiltinSlotType));
exports.NumberSlotType = NumberSlotType;
//# sourceMappingURL=BuiltinSlotTypes.js.map