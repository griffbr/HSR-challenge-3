"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SlotValue = (function () {
    function SlotValue(name, value, confirmationStatus) {
        this.name = name;
        this.value = value;
        this.confirmationStatus = confirmationStatus;
    }
    SlotValue.prototype.update = function (newSlot) {
        if (newSlot.value) {
            this.value = newSlot.value;
            this.resolutions = newSlot.resolutions;
            this.confirmationStatus = newSlot.confirmationStatus;
        }
    };
    SlotValue.prototype.setEntityResolution = function (context, intentName) {
        var intent = context.interactionModel().intentSchema.intent(intentName);
        var slot = intent.slotForName(this.name);
        var slotType = context.interactionModel().slotTypes.slotType(slot.type);
        if (slotType && slotType.isCustom()) {
            var authority = "amzn1.er-authority.echo-sdk." + context.applicationID() + "." + slotType.name;
            this.resolutions = { resolutionsPerAuthority: [] };
            var matches = slotType.matchAll(this.value);
            var customMatch = false;
            for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
                var match = matches_1[_i];
                if (match.enumeratedValue && !match.enumeratedValue.builtin) {
                    customMatch = true;
                    var entityResolution = new EntityResolution(authority, EntityResolutionStatus.ER_SUCCESS_MATCH, new EntityResolutionValue(match.enumeratedValue.id, match.enumeratedValue.name.value));
                    this.addEntityResolution(entityResolution);
                }
            }
            if (!customMatch) {
                var entityResolution = new EntityResolution(authority, EntityResolutionStatus.ER_SUCCESS_NO_MATCH);
                this.addEntityResolution(entityResolution);
            }
        }
    };
    SlotValue.prototype.addEntityResolution = function (entityResolution) {
        var alreadyResolved = false;
        for (var _i = 0, _a = this.resolutions.resolutionsPerAuthority; _i < _a.length; _i++) {
            var existingResolution = _a[_i];
            if (existingResolution.authority === entityResolution.authority) {
                existingResolution.values.push(entityResolution.values[0]);
                alreadyResolved = true;
            }
        }
        if (!alreadyResolved) {
            this.resolutions.resolutionsPerAuthority.push(entityResolution);
        }
    };
    return SlotValue;
}());
exports.SlotValue = SlotValue;
var EntityResolution = (function () {
    function EntityResolution(authority, statusCode, value) {
        this.authority = authority;
        this.values = [];
        if (value) {
            this.values.push({ value: value });
        }
        this.status = {
            code: statusCode,
        };
    }
    return EntityResolution;
}());
exports.EntityResolution = EntityResolution;
var EntityResolutionValue = (function () {
    function EntityResolutionValue(id, name) {
        this.id = id;
        this.name = name;
    }
    return EntityResolutionValue;
}());
exports.EntityResolutionValue = EntityResolutionValue;
var EntityResolutionStatus;
(function (EntityResolutionStatus) {
    EntityResolutionStatus["ER_SUCCESS_MATCH"] = "ER_SUCCESS_MATCH";
    EntityResolutionStatus["ER_SUCCESS_NO_MATCH"] = "ER_SUCCESS_NO_MATCH";
    EntityResolutionStatus["ER_ERROR_TIMEOUT"] = "ER_ERROR_TIMEOUT";
    EntityResolutionStatus["ER_ERROR_EXCEPTION"] = "ER_ERROR_EXCEPTION";
})(EntityResolutionStatus = exports.EntityResolutionStatus || (exports.EntityResolutionStatus = {}));
//# sourceMappingURL=SlotValue.js.map