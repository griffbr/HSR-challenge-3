"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var virtual_core_1 = require("virtual-core");
var AudioPlayer_1 = require("../audioPlayer/AudioPlayer");
var SkillContext_1 = require("../core/SkillContext");
var SkillRequest_1 = require("../core/SkillRequest");
var SkillResponse_1 = require("../core/SkillResponse");
var UserIntent_1 = require("./UserIntent");
var SkillInteractor = (function () {
    function SkillInteractor(model, locale, applicationID) {
        this.model = model;
        this.requestFilter = null;
        this.skillContext = null;
        var audioPlayer = new AudioPlayer_1.AudioPlayer(this);
        this.skillContext = new SkillContext_1.SkillContext(this.model, audioPlayer, locale, applicationID);
        this.skillContext.newSession();
    }
    SkillInteractor.prototype.context = function () {
        return this.skillContext;
    };
    SkillInteractor.prototype.spoken = function (utteranceString) {
        return __awaiter(this, void 0, void 0, function () {
            var intent, utter, launchRequesOrUtter, utterance;
            return __generator(this, function (_a) {
                if (utteranceString === "exit") {
                    return [2, this.sessionEnded(SkillRequest_1.SessionEndedReason.USER_INITIATED)];
                }
                intent = this.context().dialogManager().handleUtterance(utteranceString);
                if (intent) {
                    return [2, this.handleIntent(intent)];
                }
                utter = utteranceString;
                launchRequesOrUtter = this.handleLaunchRequest(utteranceString);
                if (launchRequesOrUtter === true) {
                    return [2, this.launched()];
                }
                else if (launchRequesOrUtter) {
                    utter = launchRequesOrUtter;
                }
                utterance = new virtual_core_1.Utterance(this.interactionModel(), utter);
                if (!utterance.matched()) {
                    throw new Error("Unable to match utterance: " + utter
                        + " to an intent. Try a different utterance, or explicitly set the intent");
                }
                return [2, this.handleIntent(new UserIntent_1.UserIntent(this.context(), utterance.intent(), utterance.toJSON()))];
            });
        });
    };
    SkillInteractor.prototype.elementSelected = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceRequest;
            return __generator(this, function (_a) {
                serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext);
                serviceRequest.elementSelectedRequest(token);
                return [2, this.callSkill(serviceRequest)];
            });
        });
    };
    SkillInteractor.prototype.launched = function () {
        var serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext);
        serviceRequest.launchRequest();
        return this.callSkill(serviceRequest);
    };
    SkillInteractor.prototype.sessionEnded = function (sessionEndedReason, errorData) {
        return __awaiter(this, void 0, void 0, function () {
            var serviceRequest, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (sessionEndedReason === SkillRequest_1.SessionEndedReason.ERROR) {
                            console.error("SessionEndedRequest:\n" + JSON.stringify(errorData, null, 2));
                        }
                        serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext);
                        serviceRequest.sessionEndedRequest(sessionEndedReason, errorData);
                        return [4, this.callSkill(serviceRequest)];
                    case 1:
                        response = _a.sent();
                        this.context().endSession();
                        return [2, Promise.resolve(response)];
                }
            });
        });
    };
    SkillInteractor.prototype.intended = function (intentName, slots) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.handleIntent(new UserIntent_1.UserIntent(this.context(), intentName, slots))];
            });
        });
    };
    SkillInteractor.prototype.filter = function (requestFilter) {
        this.requestFilter = requestFilter;
    };
    SkillInteractor.prototype.callSkill = function (serviceRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var requestJSON, result, dialogOutput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (serviceRequest.requiresSession() && !this.context().activeSession()) {
                            this.context().newSession();
                        }
                        requestJSON = serviceRequest.toJSON();
                        if (this.requestFilter) {
                            this.requestFilter(requestJSON);
                        }
                        return [4, this.invoke(requestJSON)];
                    case 1:
                        result = _a.sent();
                        if (this.context().activeSession()) {
                            this.context().session().used();
                            if (result && result.response && result.response.shouldEndSession) {
                                this.context().endSession();
                            }
                            else {
                                this.context().session().updateAttributes(result.sessionAttributes);
                            }
                        }
                        if (!(result.response !== undefined && result.response.directives !== undefined)) return [3, 3];
                        return [4, this.context().audioPlayer().directivesReceived(result.response.directives)];
                    case 2:
                        _a.sent();
                        dialogOutput = this.context().dialogManager().handleDirective(result);
                        if (dialogOutput.delegated()) {
                            dialogOutput.delegatedDialogResponse.skillResponse = new SkillResponse_1.SkillResponse(result);
                            return [2, dialogOutput.delegatedDialogResponse];
                        }
                        _a.label = 3;
                    case 3: return [2, new SkillResponse_1.SkillResponse(result)];
                }
            });
        });
    };
    SkillInteractor.prototype.handleIntent = function (intent) {
        return __awaiter(this, void 0, void 0, function () {
            var dialogOutput, serviceRequest, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dialogOutput = this.context().dialogManager().handleIntent(intent);
                        if (dialogOutput.delegated()) {
                            return [2, Promise.resolve(dialogOutput.delegatedDialogResponse)];
                        }
                        else if (dialogOutput.transformed()) {
                            intent.name = dialogOutput.transformedIntent.name;
                        }
                        if (!(this.skillContext.device().audioPlayerSupported() && this.skillContext.audioPlayer().isPlaying())) return [3, 2];
                        return [4, this.skillContext.audioPlayer().suspend()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext).intentRequest(intent);
                        return [4, this.callSkill(serviceRequest)];
                    case 3:
                        result = _a.sent();
                        if (!(this.skillContext.device().audioPlayerSupported() && this.skillContext.audioPlayer().suspended())) return [3, 5];
                        return [4, this.skillContext.audioPlayer().resume()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2, result];
                }
            });
        });
    };
    SkillInteractor.prototype.interactionModel = function () {
        return this.context().interactionModel();
    };
    SkillInteractor.prototype.handleLaunchRequest = function (utter) {
        var launchRequestRegex = /(ask|open|launch|talk to|tell).*/i;
        if (launchRequestRegex.test(utter)) {
            var launchAndUtterRegex = /^(?:ask|open|launch|talk to|tell) .* to (.*)/i;
            var result = launchAndUtterRegex.exec(utter);
            if (result && result.length) {
                return result[1];
            }
            else {
                return true;
            }
        }
        return undefined;
    };
    return SkillInteractor;
}());
exports.SkillInteractor = SkillInteractor;
//# sourceMappingURL=SkillInteractor.js.map