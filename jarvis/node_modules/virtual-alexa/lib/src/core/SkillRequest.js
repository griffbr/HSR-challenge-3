"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var uuid = require("uuid");
var AudioPlayer_1 = require("../audioPlayer/AudioPlayer");
var RequestType = (function () {
    function RequestType() {
    }
    RequestType.DISPLAY_ELEMENT_SELECTED_REQUEST = "Display.ElementSelected";
    RequestType.INTENT_REQUEST = "IntentRequest";
    RequestType.LAUNCH_REQUEST = "LaunchRequest";
    RequestType.SESSION_ENDED_REQUEST = "SessionEndedRequest";
    RequestType.AUDIO_PLAYER_PLAYBACK_FINISHED = "AudioPlayer.PlaybackFinished";
    RequestType.AUDIO_PLAYER_PLAYBACK_NEARLY_FINISHED = "AudioPlayer.PlaybackNearlyFinished";
    RequestType.AUDIO_PLAYER_PLAYBACK_STARTED = "AudioPlayer.PlaybackStarted";
    RequestType.AUDIO_PLAYER_PLAYBACK_STOPPED = "AudioPlayer.PlaybackStopped";
    return RequestType;
}());
exports.RequestType = RequestType;
var SessionEndedReason;
(function (SessionEndedReason) {
    SessionEndedReason[SessionEndedReason["ERROR"] = 0] = "ERROR";
    SessionEndedReason[SessionEndedReason["EXCEEDED_MAX_REPROMPTS"] = 1] = "EXCEEDED_MAX_REPROMPTS";
    SessionEndedReason[SessionEndedReason["USER_INITIATED"] = 2] = "USER_INITIATED";
})(SessionEndedReason = exports.SessionEndedReason || (exports.SessionEndedReason = {}));
var SkillRequest = (function () {
    function SkillRequest(context) {
        this.context = context;
        this.requestJSON = null;
    }
    SkillRequest.timestamp = function () {
        var timestamp = new Date().toISOString();
        return timestamp.substring(0, 19) + "Z";
    };
    SkillRequest.requestID = function () {
        return "amzn1.echo-external.request." + uuid.v4();
    };
    SkillRequest.prototype.intentRequest = function (intent) {
        var intentName = intent.name;
        var isBuiltin = intentName.startsWith("AMAZON");
        if (!isBuiltin) {
            if (!this.context.interactionModel().hasIntent(intentName)) {
                throw new Error("Interaction model has no intentName named: " + intentName);
            }
        }
        this.requestJSON = this.baseRequest(RequestType.INTENT_REQUEST);
        this.requestJSON.request.intent = {
            name: intentName,
        };
        var slots = intent.slots();
        if (Object.keys(slots).length > 0) {
            this.requestJSON.request.intent.slots = slots;
        }
        if (this.context.dialogManager().isDialog()) {
            this.requestJSON.request.dialogState = this.context.dialogManager().dialogState();
            this.requestJSON.request.intent.confirmationStatus = this.context.dialogManager().confirmationStatus();
            this.mergeSlots(this.requestJSON.request.intent.slots, this.context.dialogManager().slots());
        }
        return this;
    };
    SkillRequest.prototype.audioPlayerRequest = function (requestType, token, offsetInMilliseconds) {
        this.requestJSON = this.baseRequest(requestType);
        this.requestJSON.request.token = token;
        this.requestJSON.request.offsetInMilliseconds = offsetInMilliseconds;
        return this;
    };
    SkillRequest.prototype.elementSelectedRequest = function (token) {
        this.requestJSON = this.baseRequest(RequestType.DISPLAY_ELEMENT_SELECTED_REQUEST);
        this.requestJSON.request.token = token;
        return this;
    };
    SkillRequest.prototype.launchRequest = function () {
        this.requestJSON = this.baseRequest(RequestType.LAUNCH_REQUEST);
        return this;
    };
    SkillRequest.prototype.sessionEndedRequest = function (reason, errorData) {
        this.requestJSON = this.baseRequest(RequestType.SESSION_ENDED_REQUEST);
        this.requestJSON.request.reason = SessionEndedReason[reason];
        if (errorData !== undefined && errorData !== null) {
            this.requestJSON.request.error = errorData;
        }
        return this;
    };
    SkillRequest.prototype.requiresSession = function () {
        return (this.requestType === RequestType.LAUNCH_REQUEST
            || this.requestType === RequestType.DISPLAY_ELEMENT_SELECTED_REQUEST
            || this.requestType === RequestType.INTENT_REQUEST
            || this.requestType === RequestType.SESSION_ENDED_REQUEST);
    };
    SkillRequest.prototype.toJSON = function () {
        var applicationID = this.context.applicationID();
        if (this.requiresSession() && this.context.activeSession()) {
            var session = this.context.session();
            var newSession = session.isNew();
            var sessionID = session.id();
            var attributes = session.attributes();
            this.requestJSON.session = {
                application: {
                    applicationId: applicationID,
                },
                new: newSession,
                sessionId: sessionID,
                user: this.userObject(this.context),
            };
            if (this.requestType !== RequestType.LAUNCH_REQUEST) {
                this.requestJSON.session.attributes = attributes;
            }
            if (this.context.accessToken() !== null) {
                this.requestJSON.session.user.accessToken = this.context.accessToken();
            }
        }
        if (this.requiresSession()) {
            if (this.context.device().audioPlayerSupported()) {
                var activity = AudioPlayer_1.AudioPlayerActivity[this.context.audioPlayer().playerActivity()];
                this.requestJSON.context.AudioPlayer = {
                    playerActivity: activity,
                };
                if (this.context.audioPlayer().playerActivity() !== AudioPlayer_1.AudioPlayerActivity.IDLE) {
                    var playing = this.context.audioPlayer().playing();
                    this.requestJSON.context.AudioPlayer.token = playing.stream.token;
                    this.requestJSON.context.AudioPlayer.offsetInMilliseconds = playing.stream.offsetInMilliseconds;
                }
            }
        }
        return this.requestJSON;
    };
    SkillRequest.prototype.mergeSlots = function (slotsTarget, slotsSource) {
        for (var _i = 0, _a = Object.keys(slotsSource); _i < _a.length; _i++) {
            var sourceSlot = _a[_i];
            slotsTarget[sourceSlot] = slotsSource[sourceSlot];
        }
    };
    SkillRequest.prototype.baseRequest = function (requestType) {
        this.requestType = requestType;
        var applicationID = this.context.applicationID();
        var requestID = SkillRequest.requestID();
        var timestamp = SkillRequest.timestamp();
        var baseRequest = {
            context: {
                System: {
                    application: {
                        applicationId: applicationID,
                    },
                    device: {
                        supportedInterfaces: this.context.device().supportedInterfaces(),
                    },
                    user: this.userObject(this.context),
                },
            },
            request: {
                locale: this.context.locale(),
                requestId: requestID,
                timestamp: timestamp,
                type: requestType,
            },
            version: "1.0",
        };
        if (this.context.device().id()) {
            baseRequest.context.System.apiAccessToken = this.context.apiAccessToken();
            baseRequest.context.System.apiEndpoint = this.context.apiEndpoint();
            baseRequest.context.System.device.deviceId = this.context.device().id();
        }
        if (this.context.accessToken() !== null) {
            baseRequest.context.System.user.accessToken = this.context.accessToken();
        }
        if (this.context.device().displaySupported()) {
            baseRequest.context.Display = {};
        }
        return baseRequest;
    };
    SkillRequest.prototype.userObject = function (context) {
        var o = {
            userId: context.user().id(),
        };
        if (context.device().id()) {
            o.permissions = {
                consentToken: uuid.v4(),
            };
        }
        return o;
    };
    return SkillRequest;
}());
exports.SkillRequest = SkillRequest;
//# sourceMappingURL=SkillRequest.js.map