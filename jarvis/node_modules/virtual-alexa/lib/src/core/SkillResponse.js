"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var SkillResponse = (function () {
    function SkillResponse(rawJSON) {
        this.wrapJSON(rawJSON);
    }
    SkillResponse.prototype.attr = function (key) {
        return _.get(this.sessionAttributes, key);
    };
    SkillResponse.prototype.attrs = function () {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            keys[_i] = arguments[_i];
        }
        return _.pick(this.sessionAttributes, keys);
    };
    SkillResponse.prototype.card = function () {
        return _.get(this, "response.card");
    };
    SkillResponse.prototype.cardContent = function () {
        return _.get(this, "response.card.content");
    };
    SkillResponse.prototype.cardImage = function () {
        return _.get(this, "response.card.image");
    };
    SkillResponse.prototype.cardSmallImage = function () {
        return _.get(this, "response.card.image.smallImageUrl");
    };
    SkillResponse.prototype.cardLargeImage = function () {
        return _.get(this, "response.card.image.largeImageUrl");
    };
    SkillResponse.prototype.cardTitle = function () {
        return _.get(this, "response.card.title");
    };
    SkillResponse.prototype.directive = function (type) {
        var o;
        if (this.response.directives) {
            for (var _i = 0, _a = this.response.directives; _i < _a.length; _i++) {
                var directive = _a[_i];
                if (directive.type === type) {
                    o = directive;
                    break;
                }
            }
        }
        return o;
    };
    SkillResponse.prototype.display = function () {
        return _.get(this.directive("Display.RenderTemplate"), "template");
    };
    SkillResponse.prototype.primaryText = function (listItemToken) {
        return this.displayText("primaryText", listItemToken);
    };
    SkillResponse.prototype.secondaryText = function (listItemToken) {
        return this.displayText("secondaryText", listItemToken);
    };
    SkillResponse.prototype.tertiaryText = function (listItemToken) {
        return this.displayText("tertiaryText", listItemToken);
    };
    SkillResponse.prototype.prompt = function () {
        return _.has(this, "response.outputSpeech.ssml")
            ? _.get(this, "response.outputSpeech.ssml")
            : _.get(this, "response.outputSpeech.text");
    };
    SkillResponse.prototype.reprompt = function () {
        return _.has(this, "response.reprompt.outputSpeech.ssml")
            ? _.get(this, "response.reprompt.outputSpeech.ssml")
            : _.get(this, "response.reprompt.outputSpeech.text");
    };
    SkillResponse.prototype.wrapJSON = function (rawJSON) {
        for (var _i = 0, _a = Object.keys(rawJSON); _i < _a.length; _i++) {
            var key = _a[_i];
            var value = rawJSON[key];
            this[key] = value;
        }
    };
    SkillResponse.prototype.displayText = function (textElement, listItemToken) {
        var displayTemplate = this.display();
        if (!displayTemplate) {
            return undefined;
        }
        if (listItemToken) {
            for (var _i = 0, _a = displayTemplate.listItems; _i < _a.length; _i++) {
                var listItem = _a[_i];
                if (listItem.token === listItemToken) {
                    return _.get(listItem, "textContent." + textElement + ".text");
                }
            }
        }
        else {
            var path = "textContent." + textElement + ".text";
            return _.get(displayTemplate, path);
        }
        return undefined;
    };
    return SkillResponse;
}());
exports.SkillResponse = SkillResponse;
//# sourceMappingURL=SkillResponse.js.map