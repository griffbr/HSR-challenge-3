"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var AddressAPI_1 = require("../external/AddressAPI");
var DynamoDB_1 = require("../external/DynamoDB");
var LocalSkillInteractor_1 = require("../impl/LocalSkillInteractor");
var RemoteSkillInteractor_1 = require("../impl/RemoteSkillInteractor");
var IntentSchema_1 = require("../model/IntentSchema");
var InteractionModel_1 = require("../model/InteractionModel");
var SampleUtterancesBuilder_1 = require("../model/SampleUtterancesBuilder");
var SkillRequest_1 = require("./SkillRequest");
var VirtualAlexa = (function () {
    function VirtualAlexa(interactor) {
        this._interactor = interactor;
        this._addressAPI = new AddressAPI_1.AddressAPI(this.context());
        this._dynamoDB = new DynamoDB_1.DynamoDB();
    }
    VirtualAlexa.Builder = function () {
        return new VirtualAlexaBuilder();
    };
    VirtualAlexa.prototype.addressAPI = function () {
        return this._addressAPI;
    };
    VirtualAlexa.prototype.audioPlayer = function () {
        return this._interactor.context().audioPlayer();
    };
    VirtualAlexa.prototype.context = function () {
        return this._interactor.context();
    };
    VirtualAlexa.prototype.dynamoDB = function () {
        return this._dynamoDB;
    };
    VirtualAlexa.prototype.endSession = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this._interactor.sessionEnded(SkillRequest_1.SessionEndedReason.USER_INITIATED, undefined)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    VirtualAlexa.prototype.filter = function (requestFilter) {
        this._interactor.filter(requestFilter);
        return this;
    };
    VirtualAlexa.prototype.intend = function (intentName, slots) {
        return this._interactor.intended(intentName, slots);
    };
    VirtualAlexa.prototype.selectElement = function (token) {
        return this._interactor.elementSelected(token);
    };
    VirtualAlexa.prototype.launch = function () {
        return this._interactor.launched();
    };
    VirtualAlexa.prototype.resetFilter = function () {
        this._interactor.filter(undefined);
        return this;
    };
    VirtualAlexa.prototype.utter = function (utterance) {
        return this._interactor.spoken(utterance);
    };
    return VirtualAlexa;
}());
exports.VirtualAlexa = VirtualAlexa;
var VirtualAlexaBuilder = (function () {
    function VirtualAlexaBuilder() {
    }
    VirtualAlexaBuilder.prototype.applicationID = function (id) {
        this._applicationID = id;
        return this;
    };
    VirtualAlexaBuilder.prototype.handler = function (handlerName) {
        this._handler = handlerName;
        return this;
    };
    VirtualAlexaBuilder.prototype.intentSchema = function (json) {
        this._intentSchema = json;
        return this;
    };
    VirtualAlexaBuilder.prototype.intentSchemaFile = function (filePath) {
        this._intentSchemaFile = filePath;
        return this;
    };
    VirtualAlexaBuilder.prototype.interactionModel = function (json) {
        this._interactionModel = json;
        return this;
    };
    VirtualAlexaBuilder.prototype.interactionModelFile = function (filePath) {
        this._interactionModelFile = filePath;
        return this;
    };
    VirtualAlexaBuilder.prototype.sampleUtterances = function (utterances) {
        this._sampleUtterances = utterances;
        return this;
    };
    VirtualAlexaBuilder.prototype.sampleUtterancesFile = function (filePath) {
        this._sampleUtterancesFile = filePath;
        return this;
    };
    VirtualAlexaBuilder.prototype.skillURL = function (url) {
        this._skillURL = url;
        return this;
    };
    VirtualAlexaBuilder.prototype.locale = function (locale) {
        this._locale = locale;
        return this;
    };
    VirtualAlexaBuilder.prototype.create = function () {
        var model;
        var locale = this._locale ? this._locale : "en-US";
        if (this._interactionModel) {
            model = InteractionModel_1.InteractionModel.fromJSON(this._interactionModel);
        }
        else if (this._interactionModelFile) {
            model = InteractionModel_1.InteractionModel.fromFile(this._interactionModelFile);
        }
        else if (this._intentSchema && this._sampleUtterances) {
            var schema = IntentSchema_1.IntentSchema.fromJSON(this._intentSchema);
            var utterances = SampleUtterancesBuilder_1.SampleUtterancesBuilder.fromJSON(this._sampleUtterances);
            model = new InteractionModel_1.InteractionModel(schema, utterances);
        }
        else if (this._intentSchemaFile && this._sampleUtterancesFile) {
            var schema = IntentSchema_1.IntentSchema.fromFile(this._intentSchemaFile);
            var utterances = SampleUtterancesBuilder_1.SampleUtterancesBuilder.fromFile(this._sampleUtterancesFile);
            model = new InteractionModel_1.InteractionModel(schema, utterances);
        }
        else {
            model = InteractionModel_1.InteractionModel.fromLocale(locale);
            if (!model) {
                throw new Error("Either an interaction model or intent schema and sample utterances must be provided.\n" +
                    "Alternatively, if you specify a locale, Virtual Alexa will automatically check for the " +
                    "interaction model under the directory \"./models\" - e.g., \"./models/en-US.json\"");
            }
        }
        var interactor;
        if (this._handler) {
            interactor = new LocalSkillInteractor_1.LocalSkillInteractor(this._handler, model, locale, this._applicationID);
        }
        else if (this._skillURL) {
            interactor = new RemoteSkillInteractor_1.RemoteSkillInteractor(this._skillURL, model, locale, this._applicationID);
        }
        else {
            throw new Error("Either a handler or skillURL must be provided.");
        }
        return new VirtualAlexa(interactor);
    };
    return VirtualAlexaBuilder;
}());
exports.VirtualAlexaBuilder = VirtualAlexaBuilder;
//# sourceMappingURL=VirtualAlexa.js.map