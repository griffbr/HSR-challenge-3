var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require("lodash");
var fs = require("fs");

module.exports = function () {
    function Util() {
        _classCallCheck(this, Util);
    }

    _createClass(Util, null, [{
        key: "cleanString",
        value: function cleanString(s) {
            if (!Util.isString(s)) {
                return s;
            }

            if (s.valueOf() === "undefined") {
                return undefined;
            } else if (s.valueOf() === "null") {
                return null;
            }

            if (s.startsWith("\"") && s.endsWith("\"")) {
                s = s.substr(1, s.length - 2).toString();
            }
            return s.toString();
        }
    }, {
        key: "cleanObject",
        value: function cleanObject(o) {
            if (_.isObject(o) && o._yaml) {
                delete o._yaml;
            }

            for (var key of Object.keys(o)) {
                o[key] = Util.cleanValue(o[key]);
            }
            return o;
        }
    }, {
        key: "cleanValue",
        value: function cleanValue(value) {
            if (Util.isString(value)) {
                // Boolean values come in from YAML parsing as strings, so we do special handling for them
                if (Util.isBoolean(value)) {
                    return value.toString() === "true";
                } else {
                    return Util.cleanString(value);
                }
            } else if (Util.isNumber(value)) {
                return value.valueOf();
            } else if (Util.isObject(value)) {
                return this.cleanObject(value);
            } else if (Array.isArray(value)) {
                var stringArray = [];
                for (var v of value) {
                    stringArray.push(Util.cleanString(v));
                }
                return stringArray;
            }

            return value;
        }
    }, {
        key: "errorMessageWithLine",
        value: function errorMessageWithLine(message, file, line) {
            if (line && file) {
                message += "\nat " + file + ":" + line + ":0";
            }
            return message;
        }
    }, {
        key: "isString",
        value: function isString(s) {
            return s && (typeof s === "string" || s instanceof String);
        }
    }, {
        key: "isBoolean",
        value: function isBoolean(s) {
            return s && (s.toString() === "true" || s.toString() === "false");
        }
    }, {
        key: "isNumber",
        value: function isNumber(s) {
            return s && (typeof s === "number" || s instanceof Number);
        }
    }, {
        key: "isObject",
        value: function isObject(o) {
            return _.isObject(o) && !Array.isArray(o) && !Util.isString(o) && !Util.isNumber();
        }
    }, {
        key: "isValueType",
        value: function isValueType(s) {
            return Util.isString(s) || Util.isNumber(s);
        }
    }, {
        key: "extractLine",
        value: function extractLine(s) {
            return s && s._yaml ? s._yaml.line + 1 : undefined;
        }
    }, {
        key: "sleep",
        value: (() => {
            var _ref = _asyncToGenerator(function* (time) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve();
                    }, time);
                });
            });

            function sleep(_x) {
                return _ref.apply(this, arguments);
            }

            return sleep;
        })()
    }, {
        key: "padZero",
        value: function padZero(original, characters) {
            var sliceValue = -1 * (characters ? characters : 2);
            return ("0" + original).slice(sliceValue);
        }
    }, {
        key: "returnIntentObjectFromUtteranceIfValid",
        value: function returnIntentObjectFromUtteranceIfValid(utterance) {
            var notEmpty = value => value && value.trim() !== "";
            var toSlot = (accumulator, item) => {
                var [key, val] = item.split("=");
                accumulator[key] = val.replace(/"/g, "");
                return accumulator;
            };
            var intentRegex = /([\w|.]*)((?: \w*=(?:"(?:[^"])*"|(?:[^ ])*))*)/;
            var match = intentRegex.exec(utterance);
            if (match && match[0] === utterance) {
                var intent = { name: match[1] };
                if (match[2]) {
                    var slots = match[2].split(/(\w*=(?:"(?:[^"])*"|(?:[^ ])*))/g);
                    intent.slots = slots.filter(notEmpty).reduce(toSlot, {});
                }
                return intent;
            }
            return undefined;
        }
    }, {
        key: "formatDate",
        value: function formatDate(date) {
            return date.getFullYear() + "-" + Util.padZero(date.getMonth() + 1) + "-" + Util.padZero(date.getDate()) + "T" + Util.padZero(date.getHours()) + ":" + Util.padZero(date.getMinutes()) + ":" + Util.padZero(date.getSeconds()) + "." + Util.padZero(date.getMilliseconds(), 3);
        }
    }, {
        key: "readFiles",
        value: (() => {
            var _ref2 = _asyncToGenerator(function* (dirname) {
                return new Promise(function (resolve, reject) {
                    try {
                        if (!fs.existsSync(dirname)) {
                            resolve([]);
                        }
                        var files = fs.readdirSync(dirname);
                        var promises = files.map(function (filename) {
                            return new Promise(function (resolveF, rejectF) {
                                fs.readFile(dirname + filename, "utf8", function (error, content) {
                                    if (error) {
                                        rejectF(error);
                                    }
                                    resolveF({
                                        content,
                                        filename
                                    });
                                });
                            });
                        });
                        return resolve(Promise.all(promises));
                    } catch (error) {
                        reject(error);
                    }
                });
            });

            function readFiles(_x2) {
                return _ref2.apply(this, arguments);
            }

            return readFiles;
        })()
    }]);

    return Util;
}();