var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var http = require("http");
var https = require("https");

module.exports = function () {
    function HTTP() {
        _classCallCheck(this, HTTP);
    }

    _createClass(HTTP, null, [{
        key: "get",
        value: (() => {
            var _ref = _asyncToGenerator(function* (options) {
                return new Promise(function (resolve, reject) {
                    var request = HTTP.request(options, resolve, reject);
                    request.end();
                });
            });

            function get(_x) {
                return _ref.apply(this, arguments);
            }

            return get;
        })()
    }, {
        key: "post",
        value: (() => {
            var _ref2 = _asyncToGenerator(function* (postOptions, body) {
                return new Promise(function (resolve, reject) {
                    // Set up the request
                    var request = HTTP.request(postOptions, resolve, reject);

                    // post the data
                    var bodyString = JSON.stringify(body);
                    request.write(bodyString);
                    request.end();
                });
            });

            function post(_x2, _x3) {
                return _ref2.apply(this, arguments);
            }

            return post;
        })()
    }, {
        key: "request",
        value: function request(options, resolve, reject) {
            var httpModule = https;
            if (options.protocol === "http:") {
                httpModule = http;
            }
            var request = httpModule.request(options, response => {
                var responseBody = "";
                response.setEncoding("utf8");
                response.on("data", chunk => {
                    responseBody += chunk;
                });

                response.on("end", () => {
                    var responseJSON = void 0;
                    try {
                        responseJSON = JSON.parse(responseBody);
                    } catch (e) {
                        // Do not worry if we cannot parse response body - just continue
                    }
                    resolve({
                        body: responseBody,
                        json: responseJSON,
                        message: response
                    });
                });
            });

            request.on("error", e => {
                reject(e);
            });

            return request;
        }
    }]);

    return HTTP;
}();