var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Configuration = require("./Configuration");
var CONSTANTS = require("../util/Constants");
var debug = require("../util/Debug");
var fs = require("fs");
var jestModule = require("jest");
var path = require("path");

// We do the process handling here
process.on("unhandledRejection", e => {
    CLI.displayError(e);
    process.exit(1);
});

process.on("uncaughtException", e => {
    CLI.displayError(e);
    process.exit(1);
});

// Wraps call to jest - we use this so we can standardize our configuration
// Also, don't want to force people to learn Jest

var CLI = function () {
    function CLI() {
        _classCallCheck(this, CLI);
    }

    _createClass(CLI, [{
        key: "run",
        value: (() => {
            var _ref = _asyncToGenerator(function* (argv, configurationOverrides) {
                // Set this environment variable every time - can be used inside of code to do useful things
                process.env.UNIT_TEST = true;

                var testPath = this.getTestPath(argv);
                yield Configuration.configure(undefined, testPath, configurationOverrides, true);
                var jestConfig = Configuration.instance().jestConfig();
                if (argv.length >= 3) {
                    jestConfig.testMatch = undefined;
                    jestConfig.testRegex = argv[2];
                }

                var type = Configuration.instance().value("type");
                var invoker = Configuration.instance().value("invoker");

                var isRunningRemote = type === CONSTANTS.TYPE.e2e || type === CONSTANTS.TYPE.simulation || invoker === CONSTANTS.INVOKER.virtualDeviceInvoker || invoker === CONSTANTS.INVOKER.SMAPIInvoker;

                var runInBand = Configuration.instance().value("runInBand", undefined, true);

                if (isRunningRemote) {
                    runInBand = true;
                    jestConfig.collectCoverage = false;
                }

                debug("JEST Config: " + JSON.stringify(jestConfig));

                // Call Jest via API so we can stay in-process
                var returnValue = yield jestModule.runCLI({ config: JSON.stringify(jestConfig), runInBand }, [process.cwd()]);
                var success = returnValue.results ? returnValue.results.success : false;
                return success;
            });

            function run(_x, _x2) {
                return _ref.apply(this, arguments);
            }

            return run;
        })()
    }, {
        key: "printVersion",
        value: function printVersion() {
            // We use babel for distributions, in which case the package.json is in a different place
            var packagePath = path.join(__dirname, "../../package.json");
            var packageFile = fs.existsSync(packagePath) ? "../../package.json" : "../../../package.json";

            var packageJSON = require(packageFile);
            // eslint-disable-next-line no-console
            console.log("\nBespoken SkillTester - Version: " + packageJSON.version + "\n");
        }

        // returns a path where the test files are located, it is provided as parameter from cli
        // the parameter could be a regex, a path or a file
        // if it is a file, we return the path were is located

    }, {
        key: "getTestPath",
        value: function getTestPath(argv) {
            var testPath = undefined;
            if (argv.length >= 3 && fs.existsSync(argv[2])) {
                var isDirectory = fs.lstatSync(argv[2]).isDirectory();
                testPath = isDirectory ? argv[2] : path.dirname(argv[2]);
            }
            return testPath;
        }
    }], [{
        key: "displayError",
        value: function displayError(e) {
            if (e.name) {
                // eslint-disable-next-line no-console
                console.error("Error - " + e.name + ":\n" + e.message);
            } else {
                // eslint-disable-next-line no-console
                console.error(e);
            }
        }
    }]);

    return CLI;
}();

module.exports = CLI;