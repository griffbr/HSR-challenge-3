var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _ = require("lodash");
var FrameworkError = require("../util/FrameworkError");
var invoker = require("./Invoker");
var SMAPI = require("../util/SMAPI");

module.exports = function (_invoker$Invoker) {
    _inherits(SMAPIInvoker, _invoker$Invoker);

    function SMAPIInvoker() {
        _classCallCheck(this, SMAPIInvoker);

        return _possibleConstructorReturn(this, (SMAPIInvoker.__proto__ || Object.getPrototypeOf(SMAPIInvoker)).apply(this, arguments));
    }

    _createClass(SMAPIInvoker, [{
        key: "before",
        value: (() => {
            var _ref = _asyncToGenerator(function* (testSuite) {
                var skillId = testSuite.skillId;
                if (!skillId) {
                    // Try getting the skill ID from the project .ask/config file
                    skillId = SMAPI.fetchSkillIdFromConfig();
                }

                if (!skillId) {
                    throw new FrameworkError("To use SMAPI, skillId must be specified in one of the following:\n" + "1) testing.json\n" + "2) configuration element\n" + "3) .ask/config file for the project");
                }

                // We need a SMAPI access token. First we prefer to get it using our virtual device token
                // If that does not work, we try the ASK config file
                var accessToken = void 0;
                var fromCLI = false;
                // Commented out for now, as these tokens do not work
                // if (testSuite.virtualDeviceToken) {
                //     accessToken = await SMAPI.fetchAccessTokenFromServer(testSuite.virtualDeviceToken);
                // }

                if (!accessToken) {
                    accessToken = SMAPI.fetchAccessTokenFromConfig();
                    fromCLI = true;
                }

                if (!accessToken) {
                    throw new FrameworkError("To use SMAPI Simulate, either must:\n" + "1) supply Virtual Device Token (which has SMAPI permission)\n" + "2) configure ASK CLI on the machine");
                }
                this.smapi = new SMAPI(accessToken, skillId, testSuite.locale, fromCLI);
            });

            function before(_x) {
                return _ref.apply(this, arguments);
            }

            return before;
        })()
    }, {
        key: "beforeTest",
        value: function beforeTest() {
            // Reset first interaction variable before each test
            this.firstInteraction = true;
        }
    }, {
        key: "invokeBatch",
        value: (() => {
            var _ref2 = _asyncToGenerator(function* (interactions) {
                var responses = [];
                for (var interaction of interactions) {
                    var response = yield this.invoke(interaction);
                    responses.push(response);
                }
                return responses;
            });

            function invokeBatch(_x2) {
                return _ref2.apply(this, arguments);
            }

            return invokeBatch;
        })()
    }, {
        key: "invoke",
        value: (() => {
            var _ref3 = _asyncToGenerator(function* (interaction) {
                var newSession = this.firstInteraction;
                var result = yield this.smapi.simulate(interaction.utterance, newSession);
                this.firstInteraction = false;
                return new SMAPIInvokerResponse(interaction, result);
            });

            function invoke(_x3) {
                return _ref3.apply(this, arguments);
            }

            return invoke;
        })()
    }]);

    return SMAPIInvoker;
}(invoker.Invoker);

var SMAPIInvokerResponse = function (_invoker$InvokerRespo) {
    _inherits(SMAPIInvokerResponse, _invoker$InvokerRespo);

    function SMAPIInvokerResponse(interaction, sourceJSON) {
        _classCallCheck(this, SMAPIInvokerResponse);

        // We move the JSON around a bit
        if (sourceJSON.status === "FAILED") {
            throw new FrameworkError("SMAPI Simulation Error: " + sourceJSON.result.error.message);
        }

        var skillResponse = sourceJSON.result.skillExecutionInfo.invocationResponse.body;

        // Delete the body element so we do not end up with a circular reference
        delete sourceJSON.result.skillExecutionInfo.invocationResponse.body;

        // Move the root response onto the raw element, for access to other pieces if needed
        skillResponse.raw = sourceJSON;
        return _possibleConstructorReturn(this, (SMAPIInvokerResponse.__proto__ || Object.getPrototypeOf(SMAPIInvokerResponse)).call(this, interaction, skillResponse));
    }

    _createClass(SMAPIInvokerResponse, [{
        key: "cardContent",
        value: function cardContent() {
            return _.get(this.json, "response.card.content");
        }
    }, {
        key: "cardImageURL",
        value: function cardImageURL() {
            return _.get(this.json, "response.card.image.largeImageUrl");
        }
    }, {
        key: "cardTitle",
        value: function cardTitle() {
            return _.get(this.json, "response.card.title");
        }
    }, {
        key: "prompt",
        value: function prompt() {
            return _.get(this.json, "response.outputSpeech.ssml", _.get(this.json, "response.outputSpeech.text"));
        }
    }, {
        key: "reprompt",
        value: function reprompt() {
            return _.get(this.json, "response.reprompt.outputSpeech.ssml", _.get(this.json, "response.reprompt.outputSpeech.text"));
        }
    }, {
        key: "sessionEnded",
        value: function sessionEnded() {
            return _.get(this.json, "response.shouldEndSession");
        }
    }, {
        key: "supported",
        value: function supported() {
            return true;
        }
    }]);

    return SMAPIInvokerResponse;
}(invoker.InvokerResponse);