var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _ = require("lodash");
var Invoker = require("./Invoker").Invoker;
var InvokerResponse = require("./Invoker").InvokerResponse;
var Util = require("../util/Util");
var VirtualGoogleAssistant = require("virtual-google-assistant").VirtualGoogleAssistant;

module.exports = function (_Invoker) {
    _inherits(VirtualGoogleAssistantInvoker, _Invoker);

    function VirtualGoogleAssistantInvoker(runner) {
        _classCallCheck(this, VirtualGoogleAssistantInvoker);

        return _possibleConstructorReturn(this, (VirtualGoogleAssistantInvoker.__proto__ || Object.getPrototypeOf(VirtualGoogleAssistantInvoker)).call(this, runner));
    }

    _createClass(VirtualGoogleAssistantInvoker, [{
        key: "before",
        value: function before(testSuite) {
            var builder = VirtualGoogleAssistant.Builder().directory(testSuite.dialogFlowDirectory);
            if (testSuite.expressModule) {
                this._virtualGoogleAssistant = builder.expressModule(testSuite.expressModule, testSuite.expressPort).create();
            } else if (testSuite.actionURL) {
                this._virtualGoogleAssistant = builder.actionUrl(testSuite.actionURL).create();
            } else {
                this._virtualGoogleAssistant = builder.handler(testSuite.handler).create();
            }
        }
    }, {
        key: "beforeTest",
        value: (() => {
            var _ref = _asyncToGenerator(function* () {
                try {
                    yield this._virtualGoogleAssistant.startExpressServer();
                } catch (e) {
                    if (e !== "This instance is not using express" && e.message !== "This instance is not using express") {
                        throw e;
                    }
                }
            });

            function beforeTest() {
                return _ref.apply(this, arguments);
            }

            return beforeTest;
        })()
    }, {
        key: "afterTest",
        value: (() => {
            var _ref2 = _asyncToGenerator(function* () {
                this._virtualGoogleAssistant.resetContext();
                this._virtualGoogleAssistant.resetFilters();

                try {
                    yield this._virtualGoogleAssistant.stopExpressServer();
                } catch (e) {
                    if (e !== "This instance is not using express" && e.message !== "This instance is not using express") {
                        throw e;
                    }
                }
            });

            function afterTest() {
                return _ref2.apply(this, arguments);
            }

            return afterTest;
        })()
    }, {
        key: "invoke",
        value: (() => {
            var _ref3 = _asyncToGenerator(function* (interaction) {
                var _this2 = this;

                // We always use a filter to apply expressions
                this._virtualGoogleAssistant.addFilter(function (request) {
                    _this2._runner.filterRequest(interaction, request);
                });

                var response = void 0;
                if (interaction.utterance === "LaunchRequest") {
                    response = yield this._virtualGoogleAssistant.launch();
                } else {
                    if (interaction.intent) {
                        response = yield this._virtualGoogleAssistant.intend(interaction.intent, interaction.slots);
                    } else {
                        var intent = Util.returnIntentObjectFromUtteranceIfValid(interaction.utterance);

                        if (intent) {
                            interaction.intent = intent.name;
                            interaction.slots = intent.slots;
                            response = yield this._virtualGoogleAssistant.intend(interaction.intent, interaction.slots);
                        } else {
                            response = yield this._virtualGoogleAssistant.utter(interaction.utterance);
                        }
                    }
                }

                return new VirtualGoogleAssistantResponse(interaction, response);
            });

            function invoke(_x) {
                return _ref3.apply(this, arguments);
            }

            return invoke;
        })()
    }]);

    return VirtualGoogleAssistantInvoker;
}(Invoker);

var VirtualGoogleAssistantResponse = function (_InvokerResponse) {
    _inherits(VirtualGoogleAssistantResponse, _InvokerResponse);

    function VirtualGoogleAssistantResponse(interaction, sourceJSON) {
        _classCallCheck(this, VirtualGoogleAssistantResponse);

        return _possibleConstructorReturn(this, (VirtualGoogleAssistantResponse.__proto__ || Object.getPrototypeOf(VirtualGoogleAssistantResponse)).call(this, interaction, sourceJSON));
    }

    _createClass(VirtualGoogleAssistantResponse, [{
        key: "cardContent",
        value: function cardContent() {
            return this.json.displayText;
        }
    }, {
        key: "cardImageURL",
        value: function cardImageURL() {
            undefined;
        }
    }, {
        key: "cardTitle",
        value: function cardTitle() {
            return this.json.speech;
        }
    }, {
        key: "prompt",
        value: function prompt() {
            var richResponse = _.get(this.json, "data.google.richResponse.items[0].simpleResponse.textToSpeech");
            var expressRichResponse = _.get(this.json, "payload.google.richResponse.items[0].simpleResponse.textToSpeech");

            return expressRichResponse || richResponse || this.json.speech;
        }
    }, {
        key: "reprompt",
        value: function reprompt() {
            return undefined;
        }
    }, {
        key: "supported",
        value: function supported(jsonPath) {
            var ignorePropertiesRaw = _.get(this._interaction, "test.testSuite.ignoreProperties");
            var ignoredProperties = [];
            if (ignorePropertiesRaw && ignorePropertiesRaw["google"] && ignorePropertiesRaw["google"]["type"] == "unit") {
                ignoredProperties = ignorePropertiesRaw["google"]["paths"].split(",").map(x => x.trim());
            }
            ignoredProperties.push("card.type");

            if (ignoredProperties.includes(jsonPath)) {
                return false;
            }
            return true;
        }
    }, {
        key: "sessionEnded",
        value: function sessionEnded() {
            var richResponse = _.get(this.json, "data.google.expectUserResponse");

            return !(richResponse || this.json.expectUserResponse);
        }
    }]);

    return VirtualGoogleAssistantResponse;
}(InvokerResponse);