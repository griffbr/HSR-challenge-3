var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _ = require("lodash");
var debug = require("../util/Debug");
var Invoker = require("./Invoker").Invoker;
var InvokerResponse = require("./Invoker").InvokerResponse;
var Util = require("../util/Util");
var VirtualAlexa = require("virtual-alexa");

module.exports = function (_Invoker) {
    _inherits(VirtualAlexaInvoker, _Invoker);

    function VirtualAlexaInvoker(runner) {
        _classCallCheck(this, VirtualAlexaInvoker);

        return _possibleConstructorReturn(this, (VirtualAlexaInvoker.__proto__ || Object.getPrototypeOf(VirtualAlexaInvoker)).call(this, runner));
    }

    _createClass(VirtualAlexaInvoker, [{
        key: "before",
        value: function before(testSuite) {
            var hasIntentSchema = testSuite.intentSchema && testSuite.sampleUtterances;
            // by default interactionModel has a value, if a intentSchema is provided interactionModel is set with undefined
            var interactionModel = hasIntentSchema ? undefined : testSuite.interactionModel;
            var virtualAlexaBuilder = new VirtualAlexa.VirtualAlexaBuilder().applicationID(testSuite.applicationId).locale(testSuite.locale).interactionModelFile(interactionModel).intentSchemaFile(testSuite.intentSchema).sampleUtterancesFile(testSuite.sampleUtterances);

            if (testSuite.skillURL) {
                virtualAlexaBuilder.skillURL(testSuite.skillURL);
            } else {
                virtualAlexaBuilder.handler(testSuite.handler);
            }

            this._virtualAlexa = virtualAlexaBuilder.create();

            // Set the access token if specified
            if (testSuite.accessToken) {
                this._virtualAlexa.context().setAccessToken(testSuite.accessToken);
            }

            // Set the device ID if specified
            if (testSuite.deviceId) {
                this._virtualAlexa.context().device().setID(testSuite.deviceId);
            }

            // Set the user ID if specified
            if (testSuite.userId) {
                this._virtualAlexa.context().user().setID(testSuite.userId + "");
            }

            // NOTE - Setup mocks last - they may rely on the values set above
            // Enable dynamo mock if dynamo is set to mock on
            if (testSuite.dynamo && testSuite.dynamo === "mock") {
                this._virtualAlexa.dynamoDB().mock();
            }

            var { audioPlayerSupported, displaySupported, videoAppSupported } = testSuite.supportedInterfaces;
            this._virtualAlexa.context().device().audioPlayerSupported(audioPlayerSupported);
            this._virtualAlexa.context().device().displaySupported(displaySupported);
            this._virtualAlexa.context().device().videoAppSupported(videoAppSupported);

            if (testSuite.address) {
                var address = testSuite.address;
                // Treat as full Address if streetAddress1 is present
                if (address.addressLine1 !== undefined) {
                    debug("Setting Full Address");
                    this._virtualAlexa.addressAPI().returnsFullAddress(address);
                } else if (address.countryCode !== undefined) {
                    debug("Setting Country and Postal Code");
                    this._virtualAlexa.addressAPI().returnsCountryAndPostalCode(address);
                } else {
                    throw Error("Address object incomplete - please see here: https://developer.amazon.com/docs/custom-skills/device-address-api.html");
                }
            } else {
                debug("Setting Lack of Permissions for Address API");
                this._virtualAlexa.addressAPI().insufficientPermissions();
            }
        }
    }, {
        key: "afterTest",
        value: function afterTest() {
            // Always end the session after a test - resets the dialog manager
            this._virtualAlexa.context().endSession();
        }
    }, {
        key: "after",
        value: function after() {
            this._virtualAlexa.addressAPI().reset();
            this._virtualAlexa.dynamoDB().reset();
        }
    }, {
        key: "invokeBatch",
        value: (() => {
            var _ref = _asyncToGenerator(function* (interactions) {
                var responses = [];
                for (var interaction of interactions) {
                    var response = yield this.invoke(interaction);
                    responses.push(response);
                }
                return responses;
            });

            function invokeBatch(_x) {
                return _ref.apply(this, arguments);
            }

            return invokeBatch;
        })()
    }, {
        key: "invoke",
        value: (() => {
            var _ref2 = _asyncToGenerator(function* (interaction) {
                var _this2 = this;

                // We always use a filter to apply expressions
                this._virtualAlexa.filter(function (request) {
                    _this2._runner.filterRequest(interaction, request);
                });

                var response = void 0;
                if (interaction.utterance === "LaunchRequest") {
                    response = yield this._virtualAlexa.launch();
                } else if (interaction.utterance.startsWith("AudioPlayer.")) {
                    response = yield this._virtualAlexa.audioPlayer().audioPlayerRequest(interaction.utterance);
                } else if (interaction.utterance === "SessionEndedRequest") {
                    response = yield this._virtualAlexa.endSession();
                } else {
                    if (interaction.intent) {
                        response = yield this._virtualAlexa.intend(interaction.intent, interaction.localizedSlots);
                    } else {
                        var intent = Util.returnIntentObjectFromUtteranceIfValid(interaction.utterance);
                        if (intent && this._virtualAlexa.context().interactionModel().hasIntent(intent.name)) {
                            interaction.intent = intent.name;
                            interaction.slots = intent.slots;
                            response = yield this._virtualAlexa.intend(interaction.intent, interaction.localizedSlots);
                        } else {
                            response = yield this._virtualAlexa.utter(interaction.utterance);
                        }
                    }
                }
                return new VirtualAlexaResponse(interaction, response);
            });

            function invoke(_x2) {
                return _ref2.apply(this, arguments);
            }

            return invoke;
        })()
    }]);

    return VirtualAlexaInvoker;
}(Invoker);

var VirtualAlexaResponse = function (_InvokerResponse) {
    _inherits(VirtualAlexaResponse, _InvokerResponse);

    function VirtualAlexaResponse(interaction, sourceJSON) {
        _classCallCheck(this, VirtualAlexaResponse);

        return _possibleConstructorReturn(this, (VirtualAlexaResponse.__proto__ || Object.getPrototypeOf(VirtualAlexaResponse)).call(this, interaction, sourceJSON));
    }

    _createClass(VirtualAlexaResponse, [{
        key: "cardContent",
        value: function cardContent() {
            return _.get(this.json, "response.card.content");
        }
    }, {
        key: "cardImageURL",
        value: function cardImageURL() {
            return _.get(this.json, "response.card.image.largeImageUrl");
        }
    }, {
        key: "cardTitle",
        value: function cardTitle() {
            return _.get(this.json, "response.card.title");
        }
    }, {
        key: "prompt",
        value: function prompt() {
            // Make sure this is not the prompt function
            if (typeof this.json.prompt === "function") {
                return this.json.prompt();
            } else {
                return this.json.prompt;
            }
        }
    }, {
        key: "reprompt",
        value: function reprompt() {
            // Make sure this is not the prompt function
            if (typeof this.json.reprompt === "function") {
                return this.json.reprompt();
            }

            return undefined;
        }
    }, {
        key: "sessionEnded",
        value: function sessionEnded() {
            return _.get(this.json, "response.shouldEndSession");
        }

        // eslint-disable-next-line no-unused-vars

    }, {
        key: "supported",
        value: function supported(jsonPath) {
            var ignorePropertiesRaw = _.get(this._interaction, "test.testSuite.ignoreProperties");
            var ignoredProperties = [];
            if (ignorePropertiesRaw && ignorePropertiesRaw["alexa"] && ignorePropertiesRaw["alexa"]["type"] == "unit") {
                ignoredProperties = ignorePropertiesRaw["alexa"]["paths"].split(",").map(x => x.trim());
            }

            if (ignoredProperties.includes(jsonPath)) {
                return false;
            }

            return true;
        }
    }, {
        key: "url",
        value: function url() {
            return _.get(this.url);
        }
    }]);

    return VirtualAlexaResponse;
}(InvokerResponse);