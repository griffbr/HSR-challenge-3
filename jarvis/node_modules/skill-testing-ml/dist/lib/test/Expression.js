var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require("lodash");
var Util = require("../util/Util");

module.exports = function () {
    _createClass(Expression, null, [{
        key: "isExpression",
        value: function isExpression(element) {
            var keys = Object.keys(element);
            return keys.length > 0 && keys[0].startsWith("request");
        }
    }]);

    function Expression(element) {
        _classCallCheck(this, Expression);

        this._path = Object.keys(element)[0];
        this._value = element[this._path];
    }

    _createClass(Expression, [{
        key: "apply",
        value: function apply(json) {
            // Chop off the mandatory request at the front
            var paths = this.path.split(".").slice(1);
            var path = paths.join(".");
            _.set(json, path, this.value);
        }
    }, {
        key: "path",
        get: function () {
            return this._path;
        }
    }, {
        key: "value",
        get: function () {
            return Util.cleanValue(this._value);
        }
    }]);

    return Expression;
}();