var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Util = require("../util/Util");

module.exports = function () {
    function ParserError() {
        _classCallCheck(this, ParserError);
    }

    _createClass(ParserError, null, [{
        key: "interactionError",
        value: function interactionError(interaction, message, line) {
            var file = interaction.test.testSuite.fileName;
            var error = ParserError.error(file, message, line);

            error.test = interaction ? interaction.test : undefined;
            error.interaction = interaction;
            return error;
        }
    }, {
        key: "globalError",
        value: function globalError(file, message, line) {
            return ParserError.error(file, message, line);
        }
    }, {
        key: "error",
        value: function error(file, message, line) {
            var errorType = "Test Syntax Error";
            var fullMessage = errorType + ":\n\t";
            fullMessage += message;
            fullMessage = Util.errorMessageWithLine(fullMessage, file, line);

            var error = new Error(fullMessage);
            error.name = errorType;
            error.handled = true;
            error.line = line;
            return error;
        }
    }]);

    return ParserError;
}();