var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

exports.TestResult = function () {
    function TestResult(test) {
        _classCallCheck(this, TestResult);

        this._test = test;
        this._interactionResults = [];
    }

    _createClass(TestResult, [{
        key: "addInteractionResult",
        value: function addInteractionResult(interactionResult) {
            this._interactionResults.push(interactionResult);
        }
    }, {
        key: "interactionResults",
        get: function () {
            return this._interactionResults;
        },
        set: function (results) {
            this._interactionResults = results;
        }
    }, {
        key: "skipped",
        get: function () {
            if (this.test && this.test.testSuite && this.test.testSuite.ignoreExternalErrors) {
                var errorOnProcess = this.interactionResults.some(r => r.errorOnProcess);
                return this.test.skip || errorOnProcess;
            }
            return this.test.skip;
        }
    }, {
        key: "passed",
        get: function () {
            for (var result of this.interactionResults) {
                if (!result.passed) {
                    return false;
                }
            }
            return true;
        }
    }, {
        key: "test",
        get: function () {
            return this._test;
        }
    }, {
        key: "locale",
        get: function () {
            return this._locale;
        },
        set: function (locale) {
            this._locale = locale;
        }
    }]);

    return TestResult;
}();

exports.InteractionResult = function () {
    function InteractionResult(interaction, assertion, error, errorOnProcess, timestamp) {
        _classCallCheck(this, InteractionResult);

        this._interaction = interaction;
        this._assertion = assertion;
        this._error = error;
        this._errorOnProcess = errorOnProcess;
        this._timestamp = timestamp ? timestamp : new Date();
    }

    _createClass(InteractionResult, [{
        key: "toDTO",
        value: function toDTO() {
            return {
                errorMessage: this.errorMessage,
                exited: this.exited,
                passed: this.passed
            };
        }
    }, {
        key: "interaction",
        get: function () {
            return this._interaction;
        }
    }, {
        key: "assertion",
        get: function () {
            return this._assertion;
        }
    }, {
        key: "goto",
        get: function () {
            if (this._assertion && this._assertion.goto) {
                return this._assertion.goto;
            }
            return undefined;
        }
    }, {
        key: "exited",
        get: function () {
            return this._assertion && this._assertion.exit;
        }
    }, {
        key: "passed",
        get: function () {
            return this._error === undefined;
        }
    }, {
        key: "error",
        get: function () {
            return this._error;
        }
    }, {
        key: "errorOnProcess",
        get: function () {
            return this._errorOnProcess;
        }
    }, {
        key: "errorMessage",
        get: function () {
            if (this._error && this._error instanceof Error) {
                return this._error.message + "\n" + this._error.stack;
            }
            return this._error;
        }
    }, {
        key: "timestamp",
        get: function () {
            return this._timestamp;
        }
    }]);

    return InteractionResult;
}();