#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var global_1 = require("../lib/core/global");
var logging_helper_1 = require("../lib/core/logging-helper");
var lambda_config_1 = require("../lib/client/lambda-config");
var lambda_deploy_1 = require("../lib/client/lambda-deploy");
var lambda_aws_1 = require("../lib/client/lambda-aws");
var fs = require("fs");
var path = require("path");
var defaultLambdaRoleName = "lambda-bst-execution";
program
    .command("lambda <lambda-folder>")
    .option("--lambdaName <lambdaName>", "The name of the lambda function")
    .option("--verbose", "Print out verbose diagnostics")
    .description("Deploys a AWS Lambda defined in the specified folder")
    .action(function (lambdaFolder, options) {
    if (options.verbose !== undefined && options.verbose) {
        console.log("Enabling verbose logging");
        logging_helper_1.LoggingHelper.setVerbose(true);
    }
    var isDir = false;
    try {
        isDir = fs.lstatSync(lambdaFolder).isDirectory();
    }
    catch (e) {
    }
    if (!isDir) {
        console.error("  error: " + lambdaFolder + " is not a folder! You need to specify the lambda project folder!");
        console.error("");
        process.exit(1);
        return;
    }
    var lambdaConfig = lambda_config_1.LambdaConfig.create();
    try {
        lambdaConfig.initialize();
        lambdaConfig.validate();
    }
    catch (err) {
        console.error("error: parameter validation error: " + err);
        console.error("");
        process.exit(1);
        return;
    }
    if (options.lambdaName !== undefined) {
        lambdaConfig.AWS_FUNCTION_NAME = options.lambdaName;
    }
    if (!lambdaConfig.AWS_FUNCTION_NAME) {
        lambdaConfig.AWS_FUNCTION_NAME = path.resolve(lambdaFolder).split(path.sep).pop();
        console.log("We named your lambda function " + lambdaConfig.AWS_FUNCTION_NAME + " (same as the project folder)");
    }
    var deployer = lambda_deploy_1.LambdaDeploy.create(lambdaFolder, lambdaConfig);
    var roleHelper = lambda_aws_1.LambdaAws.create(lambdaConfig);
    if (lambdaConfig.AWS_ROLE && lambdaConfig.AWS_ROLE !== defaultLambdaRoleName) {
        var getRolePromise = roleHelper.getRole(lambdaConfig.AWS_ROLE);
        getRolePromise
            .then(function (arn) {
            if (arn) {
                console.log("Re-using existing lambda role.");
                lambdaConfig.AWS_ROLE_ARN = arn;
                deployer.deploy();
            }
            else {
                console.error("The lambda role you have specified doesn't exist.");
                console.error("Create it or delete it from the config and we create one for you!");
                process.exit(1);
                return;
            }
        })
            .catch(function (err) {
            console.error("Error looking up AWS role: " + err);
        });
    }
    else {
        var getRolePromise = roleHelper.getRole(defaultLambdaRoleName);
        var reuse_1 = false;
        getRolePromise
            .then(function (arn) {
            if (arn) {
                console.log("Re-using existing BST lambda role.");
                reuse_1 = true;
                return arn;
            }
            else {
                console.log("We created a AWS role for your lambda and called it " + defaultLambdaRoleName + ". You are welcome!");
                console.log("Note that this lambda execution role is very basic. You may have to customize it on the AWS console!");
                return roleHelper.createRole(defaultLambdaRoleName);
            }
        })
            .then(function (arn) {
            lambdaConfig.AWS_ROLE = defaultLambdaRoleName;
            lambdaConfig.AWS_ROLE_ARN = arn;
            global_1.Global.config().configuration.lambdaDeploy.role = lambdaConfig.AWS_ROLE;
            global_1.Global.config().save();
            if (reuse_1) {
                deployer.deploy();
            }
            else {
                console.log("Waiting for AWS to propagate the changes");
                setTimeout(function () {
                    deployer.deploy();
                }, 3000);
            }
        })
            .catch(function (err) {
            console.error("Error creating AWS role: " + err);
        });
    }
});
if (process.argv.length < 3) {
    program.outputHelp();
    process.exit();
}
if (["lambda"].indexOf(process.argv[2]) < 0) {
    console.error("  error: unknown command: " + process.argv[2] + "\n");
    process.exit();
}
program.Command.prototype.missingArgument = function (name) {
    console.error("  error: missing required argument " + name);
    console.error();
    process.exit(1);
};
global_1.Global.initializeCLI().then(function () { return program.parse(process.argv); });
//# sourceMappingURL=bst-deploy.js.map