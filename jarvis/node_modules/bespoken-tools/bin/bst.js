#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var global_1 = require("../lib/core/global");
var logging_helper_1 = require("../lib/core/logging-helper");
var updateNotifier = require("update-notifier");
var chalk = require("chalk");
var displayMessagesAndTips = function () {
    var messages = global_1.Global.messages();
    if (messages) {
        if (messages.customMessage && messages.customMessage.message) {
            console.log(chalk.cyan(messages.customMessage.message));
        }
        if (messages.tip && messages.tip.message) {
            console.log(chalk.green(messages.tip.message));
        }
        console.log("");
    }
};
console.log("");
console.log(chalk.green("BST: v" + global_1.Global.version() + "  Node: " + process.version));
updateNotifier({
    pkg: {
        name: "bespoken-tools",
        version: global_1.Global.version()
    },
    updateCheckInterval: 0
}).notify({ defer: false });
var Logger = "BST";
var nodeMajorVersion = parseInt(process.version.substr(1, 2));
if (nodeMajorVersion < 4) {
    logging_helper_1.LoggingHelper.error(Logger, "!!!!Node version must be >= 4!!!!");
    logging_helper_1.LoggingHelper.error(Logger, "Please install to use bst");
    logging_helper_1.LoggingHelper.prepareForFileLoggingAndDisableConsole("bst-debug.log");
    logging_helper_1.LoggingHelper.error(Logger, "!!!!Node version must be >= 4!!!!");
    logging_helper_1.LoggingHelper.error(Logger, "Please install to use bst");
    process.exit(1);
}
program
    .command("proxy <lambda|function|http>", "Proxies a Lambda, Google Cloud Function or HTTP service")
    .command("launch", "Sends a launch request to your service")
    .command("intend <intent> [SlotName=SlotValue...]", "Sends the specified intent to your service")
    .command("utter <utterance>", "Sends an intent with the specified utterance to your service")
    .command("sleep <location>", "Instructs bst to sleep using specified location")
    .command("speak <utterance>", "Sends your message to your virtual alexa device")
    .command("test [testPattern]", "Runs tests - by default runs all tests scripts found");
var isTestCommand = process.argv.length >= 3 && process.argv[2] === "test";
var createSource = !isTestCommand;
global_1.Global.initializeCLI(createSource).then(function () {
    displayMessagesAndTips();
    program.parse(process.argv);
}).catch(function (error) {
    if (error.code === "ETIMEDOUT") {
        logging_helper_1.LoggingHelper.error(Logger, "Could not establish connection." +
            " Please check your network connection and try again.");
    }
    else {
        logging_helper_1.LoggingHelper.error(Logger, "Something went wrong. Please check your network connection and try again.");
    }
    logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
    logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
    logging_helper_1.LoggingHelper.prepareForFileLoggingAndDisableConsole("bst-debug.log");
    logging_helper_1.LoggingHelper.error(Logger, "Error using bst version: " + global_1.Global.version() + " on Node: " + process.version);
    logging_helper_1.LoggingHelper.error(Logger, error);
});
//# sourceMappingURL=bst.js.map