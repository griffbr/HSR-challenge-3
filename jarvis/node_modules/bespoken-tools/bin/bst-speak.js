#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var program = require("commander");
var global_1 = require("../lib/core/global");
var virtual_device_1 = require("../lib/external/virtual-device");
var bst_statistics_1 = require("../lib/statistics/bst-statistics");
var logging_helper_1 = require("../lib/core/logging-helper");
program.version(global_1.Global.version());
global_1.Global.initializeCLI().then(function () {
    program
        .usage("[options] <utterance>")
        .option("-l, --locale <locale>", "The locale to use for the virtual device (en-US, en-GB, de-DE, etc.)")
        .option("-t, --token <token>", "The token for interacting with your virtual device - get it here:\n\n        \thttps://" + global_1.Global.SpokesDashboardHost + "/skills/" + global_1.Global.config().sourceID() + "/validation\n        \t(Bespoken Dashboard account required for use of this feature)\n")
        .option("-v, --voiceID <voiceID>", "The AWS Polly voice ID to use for generating speech")
        .description("Speaks to your virtual Alexa device")
        .action(function () {
        return __awaiter(this, void 0, void 0, function () {
            var utterance, i, arg, options, token, locale, voiceID, virtualDeviceResponse, error_1, Logger, nodeId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        utterance = "";
                        for (i = 0; i < program.args.length; i++) {
                            arg = program.args[i];
                            if (typeof arg !== "string") {
                                break;
                            }
                            if (utterance.length > 0) {
                                utterance += " ";
                            }
                            utterance += arg;
                        }
                        options = program;
                        token = options.token;
                        locale = options.locale;
                        voiceID = options.voiceID;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, virtual_device_1.VirtualDeviceClient.speak(utterance, token, locale, voiceID)];
                    case 2:
                        virtualDeviceResponse = _a.sent();
                        return [3, 4];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1.message === "Token Required") {
                            console.log("You need a token for this option to work, get it here:");
                            console.log();
                            console.log("\thttps://" + global_1.Global.SpokesDashboardHost + "/skills/" + global_1.Global.config().sourceID() + "/validation");
                            console.log("\t(Bespoken Dashboard account required for use of this feature)");
                            console.log();
                            console.log("Then try again with:");
                            console.log();
                            console.log("\tbst speak --token <ProvidedToken> <Speech to try>");
                            console.log();
                        }
                        else {
                            Logger = "BST";
                            console.log("Sorry, something went wrong. Please try again in a few minutes.");
                            logging_helper_1.LoggingHelper.prepareForFileLoggingAndDisableConsole("bst-debug.log");
                            logging_helper_1.LoggingHelper.error(Logger, "Error using bst version: " + global_1.Global.version() + " on Node: " + process.version);
                            logging_helper_1.LoggingHelper.error(Logger, error_1);
                        }
                        process.exit(0);
                        return [2];
                    case 4:
                        if (token) {
                            console.log("Your token is saved, you can now use this command without providing a token");
                        }
                        nodeId = undefined;
                        if (global_1.Global.config() && global_1.Global.config().secretKey && global_1.Global.config().secretKey()) {
                            nodeId = global_1.Global.config().secretKey();
                        }
                        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.speak, undefined, nodeId, global_1.Global.version());
                        console.log(virtual_device_1.VirtualDeviceClient.renderResult(virtualDeviceResponse));
                        return [2];
                }
            });
        });
    });
    if (process.argv.slice(2).length === 0) {
        program.outputHelp();
    }
    else {
        program.parse(process.argv);
    }
});
//# sourceMappingURL=bst-speak.js.map