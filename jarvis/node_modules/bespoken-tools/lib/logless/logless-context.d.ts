export declare class LoglessContext {
    private _source;
    private _callback;
    private _queue;
    private _transactionID;
    private _uncaughtExceptionHandler;
    constructor(_source: string);
    private wrapCall(console, name, type);
    wrapConsole(): void;
    captureConsole(routine: Function): any;
    private onFunctionEvent();
    onLambdaEvent(event: any, context: any, wrappedCallback: Function): void;
    onCloudFunctionEvent(request: any, response: any): void;
    callback(): Function;
    log(type: LogType, data: any, params?: Array<any>, tags?: Array<string>): void;
    logError(type: LogType, error: any, tags?: Array<string>): void;
    private captureResponse(error, result);
    transactionID(): string;
    newTransactionID(): void;
    cleanup(): void;
    flush(flushed?: () => void): void;
    transmit(logBatch: any, flushed?: () => void): void;
    private usesContinuationLocalStorage();
}
export declare enum LogType {
    DEBUG = 0,
    ERROR = 1,
    INFO = 2,
    WARN = 3,
}
export declare class Log {
    type: LogType;
    data: any;
    stack: string;
    tags: Array<string>;
    _timestamp: Date;
    constructor(type: LogType, data: any, stack?: string, tags?: Array<string>);
    timestampAsISOString(): string;
}
