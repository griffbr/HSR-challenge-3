"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var service_request_1 = require("./service-request");
var events_1 = require("events");
var audio_item_1 = require("./audio-item");
var AudioPlayerActivity;
(function (AudioPlayerActivity) {
    AudioPlayerActivity[AudioPlayerActivity["BUFFER_UNDERRUN"] = 0] = "BUFFER_UNDERRUN";
    AudioPlayerActivity[AudioPlayerActivity["FINISHED"] = 1] = "FINISHED";
    AudioPlayerActivity[AudioPlayerActivity["IDLE"] = 2] = "IDLE";
    AudioPlayerActivity[AudioPlayerActivity["PLAYING"] = 3] = "PLAYING";
    AudioPlayerActivity[AudioPlayerActivity["PAUSED"] = 4] = "PAUSED";
    AudioPlayerActivity[AudioPlayerActivity["STOPPED"] = 5] = "STOPPED";
})(AudioPlayerActivity = exports.AudioPlayerActivity || (exports.AudioPlayerActivity = {}));
var AudioPlayer = (function () {
    function AudioPlayer(alexa) {
        this.alexa = alexa;
        this._emitter = null;
        this._playing = null;
        this._queue = [];
        this._activity = null;
        this._suspended = false;
        this._activity = AudioPlayerActivity.IDLE;
        this._emitter = new events_1.EventEmitter();
    }
    AudioPlayer.prototype.enqueue = function (audioItem, playBehavior) {
        if (playBehavior === AudioPlayer.PlayBehaviorEnqueue) {
            this._queue.push(audioItem);
        }
        else if (playBehavior === AudioPlayer.PlayBehaviorReplaceAll) {
            if (this.isPlaying()) {
                this.playbackStopped();
            }
            this._queue = [];
            this._queue.push(audioItem);
        }
        else if (playBehavior === AudioPlayer.PlayBehaviorReplaceEnqueued) {
            this._queue = [];
            this._queue.push(audioItem);
        }
        if (!this.isPlaying()) {
            this.playNext();
        }
    };
    AudioPlayer.prototype.activity = function () {
        return this._activity;
    };
    AudioPlayer.prototype.playNext = function () {
        if (this._queue.length === 0) {
            return;
        }
        this._playing = this.dequeue();
        if (this._playing.stream.url.startsWith("http:")) {
            this.alexa.sessionEnded(service_request_1.SessionEndedReason.ERROR, {
                type: "INVALID_RESPONSE",
                message: "The URL specified in the Play directive must be HTTPS"
            });
        }
        else {
            this.playbackStarted();
        }
    };
    AudioPlayer.prototype.suspend = function () {
        this._suspended = true;
        this.playbackStopped();
    };
    AudioPlayer.prototype.suspended = function () {
        return this._suspended;
    };
    AudioPlayer.prototype.playbackOffset = function (offset) {
        if (this.isPlaying()) {
            this.playing().stream.offsetInMilliseconds = offset;
        }
    };
    AudioPlayer.prototype.on = function (audioPlayerRequest, listener) {
        this._emitter.on(audioPlayerRequest, listener);
    };
    AudioPlayer.prototype.once = function (audioPlayerRequest, listener) {
        this._emitter.once(audioPlayerRequest, listener);
    };
    AudioPlayer.prototype.resume = function () {
        this._suspended = false;
        this.playbackStarted();
    };
    AudioPlayer.prototype.playbackNearlyFinished = function (callback) {
        this.audioPlayerRequest(service_request_1.RequestType.AudioPlayerPlaybackNearlyFinished, callback);
    };
    AudioPlayer.prototype.playbackFinished = function (callback) {
        this._activity = AudioPlayerActivity.FINISHED;
        this.audioPlayerRequest(service_request_1.RequestType.AudioPlayerPlaybackFinished, callback);
        this.playNext();
    };
    AudioPlayer.prototype.playbackStarted = function (callback) {
        this._activity = AudioPlayerActivity.PLAYING;
        this.audioPlayerRequest(service_request_1.RequestType.AudioPlayerPlaybackStarted, callback);
    };
    AudioPlayer.prototype.playbackStopped = function (callback) {
        this._activity = AudioPlayerActivity.STOPPED;
        this.audioPlayerRequest(service_request_1.RequestType.AudioPlayerPlaybackStopped, callback);
    };
    AudioPlayer.prototype.audioPlayerRequest = function (requestType, callback) {
        var self = this;
        var nowPlaying = this.playing();
        var serviceRequest = new service_request_1.ServiceRequest(this.alexa.context());
        serviceRequest.audioPlayerRequest(requestType, nowPlaying.stream.token, nowPlaying.stream.offsetInMilliseconds);
        this.alexa.callSkill(serviceRequest, function (error, response, request) {
            if (callback !== undefined && callback !== null) {
                callback(error, response, request);
            }
            self._emitter.emit(requestType, nowPlaying.clone());
        });
    };
    AudioPlayer.prototype.directivesReceived = function (directives) {
        for (var _i = 0, directives_1 = directives; _i < directives_1.length; _i++) {
            var directive = directives_1[_i];
            this.handleDirective(directive);
        }
    };
    AudioPlayer.prototype.handleDirective = function (directive) {
        if (directive.type === AudioPlayer.DirectivePlay) {
            var audioItem = new audio_item_1.AudioItem(directive.audioItem);
            var playBehavior = directive.playBehavior;
            this.enqueue(audioItem, playBehavior);
        }
        else if (directive.type === AudioPlayer.DirectiveStop) {
            if (this.suspended()) {
                this._suspended = false;
            }
            else if (this.playing()) {
                this.playbackStopped();
            }
        }
    };
    AudioPlayer.prototype.isPlaying = function () {
        return (this._activity === AudioPlayerActivity.PLAYING);
    };
    AudioPlayer.prototype.dequeue = function () {
        var audioItem = this._queue[0];
        this._queue = this._queue.slice(1);
        return audioItem;
    };
    AudioPlayer.prototype.playing = function () {
        return this._playing;
    };
    AudioPlayer.DirectivePlay = "AudioPlayer.Play";
    AudioPlayer.DirectiveStop = "AudioPlayer.Stop";
    AudioPlayer.DirectiveClearQueue = "AudioPlayer.ClearQueue";
    AudioPlayer.PlayBehaviorReplaceAll = "REPLACE_ALL";
    AudioPlayer.PlayBehaviorEnqueue = "ENQUEUE";
    AudioPlayer.PlayBehaviorReplaceEnqueued = "REPLACE_ENQUEUED";
    return AudioPlayer;
}());
exports.AudioPlayer = AudioPlayer;
;
//# sourceMappingURL=audio-player.js.map