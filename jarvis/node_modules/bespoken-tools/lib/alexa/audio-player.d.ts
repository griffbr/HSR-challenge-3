import { Alexa } from "./alexa";
import { AudioItem } from "./audio-item";
export declare enum AudioPlayerActivity {
    BUFFER_UNDERRUN = 0,
    FINISHED = 1,
    IDLE = 2,
    PLAYING = 3,
    PAUSED = 4,
    STOPPED = 5,
}
export declare class AudioPlayer {
    alexa: Alexa;
    static DirectivePlay: string;
    static DirectiveStop: string;
    static DirectiveClearQueue: string;
    static PlayBehaviorReplaceAll: string;
    static PlayBehaviorEnqueue: string;
    static PlayBehaviorReplaceEnqueued: string;
    private _emitter;
    private _playing;
    private _queue;
    private _activity;
    private _suspended;
    constructor(alexa: Alexa);
    enqueue(audioItem: AudioItem, playBehavior: string): void;
    activity(): AudioPlayerActivity;
    playNext(): void;
    suspend(): void;
    suspended(): boolean;
    playbackOffset(offset: number): void;
    on(audioPlayerRequest: string, listener: (...args: any[]) => void): void;
    once(audioPlayerRequest: string, listener: (...args: any[]) => void): void;
    resume(): void;
    playbackNearlyFinished(callback?: (error: Error, response: any, request: any) => void): void;
    playbackFinished(callback?: (error: Error, response: any, request: any) => void): void;
    playbackStarted(callback?: (error: Error, response: any, request: any) => void): void;
    playbackStopped(callback?: (error: Error, response: any, request: any) => void): void;
    private audioPlayerRequest(requestType, callback?);
    directivesReceived(directives: Array<any>): void;
    private handleDirective(directive);
    isPlaying(): boolean;
    private dequeue();
    playing(): AudioItem;
}
