"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var audio_player_1 = require("./audio-player");
var uuid = require("uuid");
var RequestType = (function () {
    function RequestType() {
    }
    RequestType.IntentRequest = "IntentRequest";
    RequestType.LaunchRequest = "LaunchRequest";
    RequestType.SessionEndedRequest = "SessionEndedRequest";
    RequestType.AudioPlayerPlaybackFinished = "AudioPlayer.PlaybackFinished";
    RequestType.AudioPlayerPlaybackNearlyFinished = "AudioPlayer.PlaybackNearlyFinished";
    RequestType.AudioPlayerPlaybackStarted = "AudioPlayer.PlaybackStarted";
    RequestType.AudioPlayerPlaybackStopped = "AudioPlayer.PlaybackStopped";
    return RequestType;
}());
exports.RequestType = RequestType;
var SessionEndedReason;
(function (SessionEndedReason) {
    SessionEndedReason[SessionEndedReason["ERROR"] = 0] = "ERROR";
    SessionEndedReason[SessionEndedReason["EXCEEDED_MAX_REPROMPTS"] = 1] = "EXCEEDED_MAX_REPROMPTS";
    SessionEndedReason[SessionEndedReason["USER_INITIATED"] = 2] = "USER_INITIATED";
})(SessionEndedReason = exports.SessionEndedReason || (exports.SessionEndedReason = {}));
var ServiceRequest = (function () {
    function ServiceRequest(context) {
        this.context = context;
        this.requestJSON = null;
    }
    ServiceRequest.prototype.intentRequest = function (intentName) {
        var isBuiltin = intentName.startsWith("AMAZON");
        if (!isBuiltin) {
            if (!this.context.interactionModel().hasIntent(intentName)) {
                throw new Error("Interaction model has no intentName named: " + intentName);
            }
        }
        this.requestJSON = this.baseRequest(RequestType.IntentRequest);
        this.requestJSON.request.intent = {
            name: intentName
        };
        if (!isBuiltin) {
            var intent = this.context.interactionModel().intentSchema.intent(intentName);
            if (intent.slots !== null && intent.slots.length > 0) {
                this.requestJSON.request.intent.slots = {};
                for (var _i = 0, _a = intent.slots; _i < _a.length; _i++) {
                    var slot = _a[_i];
                    this.requestJSON.request.intent.slots[slot.name] = {
                        name: slot.name
                    };
                }
            }
        }
        return this;
    };
    ServiceRequest.prototype.audioPlayerRequest = function (requestType, token, offsetInMilliseconds) {
        this.requestJSON = this.baseRequest(requestType);
        this.requestJSON.request.token = token;
        this.requestJSON.request.offsetInMilliseconds = offsetInMilliseconds;
        return this;
    };
    ServiceRequest.prototype.launchRequest = function () {
        this.requestJSON = this.baseRequest(RequestType.LaunchRequest);
        return this;
    };
    ServiceRequest.prototype.sessionEndedRequest = function (reason, errorData) {
        this.requestJSON = this.baseRequest(RequestType.SessionEndedRequest);
        this.requestJSON.request.reason = SessionEndedReason[reason];
        if (errorData !== undefined && errorData !== null) {
            this.requestJSON.request.error = errorData;
        }
        return this;
    };
    ServiceRequest.prototype.withSlot = function (slotName, slotValue) {
        if (this.requestJSON.request.type !== "IntentRequest") {
            throw Error("Adding slot to non-intentName request - not allowed!");
        }
        this.requestJSON.request.intent.slots[slotName] = { "name": slotName, "value": slotValue };
        return this;
    };
    ServiceRequest.prototype.requiresSession = function () {
        var requireSession = false;
        if (this.requestType === RequestType.LaunchRequest || this.requestType === RequestType.IntentRequest) {
            requireSession = true;
        }
        return requireSession;
    };
    ServiceRequest.prototype.baseRequest = function (requestType) {
        this.requestType = requestType;
        var applicationID = this.context.applicationID();
        var requestID = ServiceRequest.requestID();
        var userID = this.context.userID();
        var timestamp = ServiceRequest.timestamp();
        var baseRequest = {
            request: {
                type: requestType,
                locale: "en-US",
                requestId: requestID,
                timestamp: timestamp
            },
            context: {
                System: {
                    application: {
                        applicationId: applicationID
                    },
                    device: {
                        supportedInterfaces: {
                            AudioPlayer: {}
                        }
                    },
                    user: {
                        userId: userID
                    },
                }
            },
            version: "1.0"
        };
        if (this.context.accessToken() !== null) {
            baseRequest.context.System.user["accessToken"] = this.context.accessToken();
        }
        return baseRequest;
    };
    ServiceRequest.timestamp = function () {
        var timestamp = new Date().toISOString();
        return timestamp.substring(0, 19) + "Z";
    };
    ServiceRequest.requestID = function () {
        return "amzn1.echo-api.request." + uuid.v4();
    };
    ServiceRequest.prototype.includeSession = function () {
        var include = false;
        if (this.requestType === RequestType.IntentRequest ||
            this.requestType === RequestType.LaunchRequest ||
            this.requestType === RequestType.SessionEndedRequest) {
            include = true;
        }
        return include;
    };
    ServiceRequest.prototype.toJSON = function () {
        var applicationID = this.context.applicationID();
        var userID = this.context.userID();
        if (this.includeSession() && this.context.activeSession()) {
            var session = this.context.session();
            var newSession = session.isNew();
            var sessionID = session.id();
            var attributes = session.attributes();
            this.requestJSON.session = {
                sessionId: sessionID,
                application: {
                    applicationId: applicationID
                },
                user: {
                    userId: userID
                },
                "new": newSession
            };
            if (this.requestType !== RequestType.LaunchRequest) {
                this.requestJSON.session.attributes = attributes;
            }
            if (this.context.accessToken() !== null) {
                this.requestJSON.session.user["accessToken"] = this.context.accessToken();
            }
        }
        if (this.requestType === RequestType.IntentRequest
            || this.requestType === RequestType.LaunchRequest
            || this.requestType === RequestType.SessionEndedRequest) {
            if (this.context.audioPlayerEnabled()) {
                var activity = audio_player_1.AudioPlayerActivity[this.context.audioPlayer().activity()];
                this.requestJSON.context.AudioPlayer = {
                    playerActivity: activity
                };
                if (this.context.audioPlayer().activity() !== audio_player_1.AudioPlayerActivity.IDLE) {
                    var playing = this.context.audioPlayer().playing();
                    this.requestJSON.context.AudioPlayer.token = playing.stream.token;
                    this.requestJSON.context.AudioPlayer.offsetInMilliseconds = playing.stream.offsetInMilliseconds;
                }
            }
        }
        return this.requestJSON;
    };
    return ServiceRequest;
}());
exports.ServiceRequest = ServiceRequest;
//# sourceMappingURL=service-request.js.map