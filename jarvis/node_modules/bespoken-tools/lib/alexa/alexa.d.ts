/// <reference types="node" />
import { ServiceRequest, SessionEndedReason } from "./service-request";
import http = require("http");
import { InteractionModel } from "./interaction-model";
import { AlexaContext } from "./alexa-context";
export interface AlexaResponseCallback {
    (error: any, response: any, request: any): void;
}
export declare enum AlexaEvent {
    SessionEnded = 0,
    SkillError = 1,
    SkillResponse = 2,
}
export declare class Alexa {
    private _actionQueue;
    private _context;
    private _emitter;
    constructor();
    startSession(skillURL: string, model: InteractionModel, audioEnabled: boolean, applicationID?: string): Alexa;
    context(): AlexaContext;
    private interactionModel();
    spoken(utterance: string, callback?: AlexaResponseCallback): void;
    launched(callback?: AlexaResponseCallback): void;
    sessionEnded(sessionEndedReason: SessionEndedReason, errorData: any, callback?: AlexaResponseCallback): void;
    intended(intentName: string, slots?: any, callback?: AlexaResponseCallback): void;
    private callSkillWithIntent(intentName, slots?, callback?);
    callSkill(serviceRequest: ServiceRequest, callback?: AlexaResponseCallback): void;
    sequence(action: AlexaAction): void;
    private callSkillImpl(serviceRequest, callback, done);
    protected post(options: any, responseHandler: (error: any, response: http.IncomingMessage, body: any) => void): void;
    on(event: AlexaEvent, callback: (...args: any[]) => void): void;
    once(event: AlexaEvent, callback: (...args: any[]) => void): void;
    stop(onStop: () => void): void;
}
export interface AlexaAction {
    (done: Function): void;
}
export declare class ActionQueue {
    private _queue;
    private _stop;
    private _stopCallback;
    enqueue(action: AlexaAction): void;
    processing(): boolean;
    next(): void;
    stop(onStop: Function): void;
}
