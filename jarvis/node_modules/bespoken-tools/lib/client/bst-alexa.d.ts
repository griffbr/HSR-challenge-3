import { AlexaContext } from "../alexa/alexa-context";
export declare class BSTAlexaEvents {
    static AudioPlayerPlaybackFinished: string;
    static AudioPlayerPlaybackNearlyFinished: string;
    static AudioPlayerPlaybackStarted: string;
    static AudioPlayerPlaybackStopped: string;
    static Response: string;
}
export declare class BSTAlexa {
    private skillURL;
    private intentSchemaFile;
    private sampleUtterancesFile;
    private applicationID;
    private static AudioPlayerEvents;
    static DefaultIntentSchemaLocation: string;
    static DefaultSampleUtterancesLocation: string;
    private _alexa;
    constructor(skillURL: string, intentSchemaFile?: string, sampleUtterancesFile?: string, applicationID?: string);
    start(ready: (error?: string) => void): void;
    context(): AlexaContext;
    on(eventType: string, callback: (...args: any[]) => void): BSTAlexa;
    once(eventType: string, callback: (...args: any[]) => void): BSTAlexa;
    spoken(phrase: string, callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    intended(intentName: string, slots?: {
        [id: string]: string;
    }, callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    launched(callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    sessionEnded(sessionEndedReason: string, callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    playbackFinished(callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    playbackNearlyFinished(callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    playbackStopped(callback?: (error: any, response: any, request: any) => void): BSTAlexa;
    playbackOffset(offsetInMilliseconds: number): BSTAlexa;
    stop(onStop: () => void): void;
    private static validateAudioEventType(eventType);
}
