"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var global_1 = require("../core/global");
var socket_handler_1 = require("../core/socket-handler");
var webhook_request_1 = require("../core/webhook-request");
var tcp_client_1 = require("./tcp-client");
var global_2 = require("../core/global");
var logging_helper_1 = require("../core/logging-helper");
var keep_alive_1 = require("./keep-alive");
var string_util_1 = require("../core/string-util");
var http_buffer_1 = require("../core/http-buffer");
var chalk = require("chalk");
var Logger = "BST-CLIENT";
var BespokeClient = (function () {
    function BespokeClient(nodeID, host, port, targetDomain, targetPort, secretKey) {
        this.nodeID = nodeID;
        this.host = host;
        this.port = port;
        this.targetDomain = targetDomain;
        this.targetPort = targetPort;
        this.secretKey = secretKey;
        this.onConnect = null;
        this.onReconnect = null;
        this.shuttingDown = false;
        this.reconnectRetries = 0;
    }
    BespokeClient.prototype.attemptConnection = function () {
        var self = this;
        if (this.socketHandler) {
            this.socketHandler.disconnect();
        }
        if (this.keepAlive) {
            this.keepAlive.stop();
        }
        this.socketHandler = socket_handler_1.SocketHandler.connect(this.host, this.port, function (error) {
            self.connected(error);
        }, function (socketMessage) {
            self.messageReceived(socketMessage);
        });
        this.socketHandler.onCloseCallback = function () {
            if (!self.shuttingDown) {
                logging_helper_1.LoggingHelper.error(Logger, "Socket closed by bst server: " + self.host + ":" + self.port);
            }
            if (self.reconnectRetries < BespokeClient.RECONNECT_MAX_RETRIES) {
                self.reconnectRetries++;
                logging_helper_1.LoggingHelper.error(Logger, "Attempting to reconnect in " + self.reconnectRetries + " seconds");
                setTimeout(function () {
                    self.attemptConnection();
                }, self.reconnectRetries * 1000);
            }
            else {
                logging_helper_1.LoggingHelper.error(Logger, "Check your network settings - and try connecting again.");
                logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
                logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
                self.shutdown();
            }
        };
    };
    BespokeClient.prototype.connect = function (onConnect) {
        if (onConnect !== undefined && onConnect !== null) {
            this.onConnect = onConnect;
        }
        this.attemptConnection();
    };
    BespokeClient.prototype.newKeepAlive = function (handler) {
        return new keep_alive_1.KeepAlive(handler);
    };
    BespokeClient.prototype.onWebhookReceived = function (request) {
        var self = this;
        if (this.secretKey) {
            var secretKeyValidated = false;
            if (request.headers && request.headers["bespoken-key"] === this.secretKey) {
                secretKeyValidated = true;
            }
            if (request.queryParameters && request.queryParameters["bespoken-key"] === this.secretKey) {
                secretKeyValidated = true;
            }
            if (!secretKeyValidated) {
                var errorMessage = "Unauthorized request";
                this.socketHandler.send(new socket_handler_1.SocketMessage(http_buffer_1.HTTPBuffer.errorResponse(errorMessage).raw(), request.id()));
                return;
            }
        }
        logging_helper_1.LoggingHelper.info(Logger, "RequestReceived: " + request.toString() + " ID: " + request.id());
        var bodyToPrint = request.isJSON() ? string_util_1.StringUtil.prettyPrintJSON(request.body) : "< Binary data >";
        logging_helper_1.LoggingHelper.verbose(Logger, "Payload:\n" + chalk.hex(logging_helper_1.LoggingHelper.REQUEST_COLOR)(bodyToPrint));
        var tcpClient = new tcp_client_1.TCPClient(request.id() + "");
        var httpBuffer = new http_buffer_1.HTTPBuffer();
        tcpClient.transmit(self.targetDomain, self.targetPort, request.requestWithoutBespokenData(), function (data, error, message) {
            if (data != null) {
                httpBuffer.append(data);
                if (httpBuffer.complete()) {
                    logging_helper_1.LoggingHelper.info(Logger, "ResponseReceived ID: " + request.id());
                    var payload = null;
                    var bodyToString = httpBuffer.body().toString();
                    if (httpBuffer.isJSON()) {
                        payload = string_util_1.StringUtil.prettyPrintJSON(bodyToString);
                    }
                    else {
                        payload = /[\x00-\x1F]/.test(bodyToString) ? "< Binary data >" : bodyToString;
                    }
                    if (payload.indexOf("Unhandle exception") !== -1 || payload.indexOf("Error: ") !== -1) {
                        logging_helper_1.LoggingHelper.verbose(Logger, "Payload:\n" + chalk.red(payload));
                    }
                    else {
                        logging_helper_1.LoggingHelper.verbose(Logger, "Payload:\n" + chalk.cyan(payload));
                    }
                    self.socketHandler.send(new socket_handler_1.SocketMessage(httpBuffer.raw(), request.id()));
                }
            }
            else if (error !== null && error !== undefined) {
                if (error === global_2.NetworkErrorType.CONNECTION_REFUSED) {
                    logging_helper_1.LoggingHelper.error(Logger, chalk.red("CLIENT Connection Refused, Port " + self.targetPort + ". Is your server running?"));
                }
                var errorMessage = "BST Proxy - Local Forwarding Error\n" + message;
                self.socketHandler.send(new socket_handler_1.SocketMessage(http_buffer_1.HTTPBuffer.errorResponse(errorMessage).raw(), request.id()));
                if (self.onError != null) {
                    self.onError(error, message);
                }
            }
        });
    };
    BespokeClient.prototype.connected = function (error) {
        var self = this;
        if (error) {
            logging_helper_1.LoggingHelper.error(Logger, "Unable to connect to: " + this.host + ":" + this.port);
            if (this.reconnectRetries < BespokeClient.RECONNECT_MAX_RETRIES) {
                this.reconnectRetries++;
                logging_helper_1.LoggingHelper.error(Logger, "Attempting to reconnect in " + this.reconnectRetries + " seconds");
                setTimeout(function () {
                    self.attemptConnection();
                }, this.reconnectRetries * 1000);
                if (this.onReconnect) {
                    this.onReconnect(error);
                }
            }
            else {
                this.shutdown();
                if (this.onConnect) {
                    this.onConnect(error);
                }
            }
        }
        else {
            this.reconnectRetries = 0;
            logging_helper_1.LoggingHelper.info(Logger, "Connected - " + this.host + ":" + this.port);
            var messageJSON = { "id": this.nodeID };
            var message = JSON.stringify(messageJSON);
            this.socketHandler.send(new socket_handler_1.SocketMessage(message));
            if (this.onConnect !== undefined && this.onConnect !== null) {
                this.onConnect();
            }
            this.keepAlive = this.newKeepAlive(this.socketHandler);
            this.keepAlive.start(function () {
                logging_helper_1.LoggingHelper.error(Logger, "Socket not communicating with bst server: " + self.socketHandler.remoteEndPoint());
                logging_helper_1.LoggingHelper.error(Logger, "Check your network settings - and maybe try connecting again.");
                logging_helper_1.LoggingHelper.error(Logger, "If the issue persists, contact us at Bespoken:");
                logging_helper_1.LoggingHelper.error(Logger, "\thttps://gitter.im/bespoken/bst");
            });
        }
    };
    BespokeClient.prototype.messageReceived = function (socketMessage) {
        if (socketMessage.contains("ACK")) {
        }
        else if (socketMessage.contains(global_1.Global.KeepAliveMessage)) {
            this.keepAlive.received();
        }
        else {
            this.onWebhookReceived(webhook_request_1.WebhookRequest.fromBuffer(this.socketHandler.socket, socketMessage.getMessage(), socketMessage.getMessageID()));
        }
    };
    BespokeClient.prototype.shutdown = function (callback) {
        logging_helper_1.LoggingHelper.info(Logger, "Shutting down proxy");
        this.shuttingDown = true;
        if (this.keepAlive) {
            this.keepAlive.stop();
        }
        this.reconnectRetries = BespokeClient.RECONNECT_MAX_RETRIES;
        this.socketHandler.disconnect();
        if (callback !== undefined && callback !== null) {
            callback();
        }
    };
    BespokeClient.RECONNECT_MAX_RETRIES = 3;
    return BespokeClient;
}());
exports.BespokeClient = BespokeClient;
//# sourceMappingURL=bespoke-client.js.map