"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var logging_helper_1 = require("../core/logging-helper");
var lambda_config_1 = require("./lambda-config");
var source_name_generator_1 = require("../external/source-name-generator");
var spokes_1 = require("../external/spokes");
var messages_1 = require("../external/messages");
var Logger = "CONFIG";
var BSTDirectoryName = ".bst";
var BSTConfig = (function () {
    function BSTConfig() {
        this.configuration = null;
        this.process = null;
    }
    BSTConfig.load = function (createSource) {
        return __awaiter(this, void 0, void 0, function () {
            var config, data, bstConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        createSource = typeof createSource === "undefined" ? true : createSource;
                        return [4, BSTConfig.bootstrapIfNeeded(createSource)];
                    case 1:
                        _a.sent();
                        config = undefined;
                        if (fs.existsSync(BSTConfig.configPath())) {
                            data = fs.readFileSync(BSTConfig.configPath());
                            config = JSON.parse(data.toString());
                        }
                        bstConfig = new BSTConfig();
                        bstConfig.loadFromJSON(config);
                        return [2, bstConfig];
                }
            });
        });
    };
    BSTConfig.prototype.getMessages = function () {
        var bstMessages = this.configuration.bstMessages;
        if (!bstMessages)
            return undefined;
        var messages = bstMessages.messages;
        if (!messages)
            return undefined;
        var result = {};
        if (messages.customMessages && messages.customMessages.length) {
            var randomMessage = Math.floor(Math.random() * messages.customMessages.length);
            result.customMessage = messages.customMessages[randomMessage];
        }
        if (messages.tips && messages.tips.length) {
            var randomTip = Math.floor(Math.random() * messages.tips.length);
            result.tip = messages.tips[randomTip];
        }
        return result;
    };
    BSTConfig.prototype.save = function () {
        BSTConfig.saveConfig(this.configuration);
    };
    BSTConfig.getBstVersion = function () {
        var packageInfo = require("../../package.json");
        return packageInfo.version;
    };
    BSTConfig.prototype.sourceID = function () {
        return this.configuration.sourceID;
    };
    BSTConfig.prototype.secretKey = function () {
        return this.configuration.secretKey;
    };
    BSTConfig.prototype.applicationID = function () {
        return this.configuration.applicationID;
    };
    BSTConfig.prototype.updateApplicationID = function (applicationID) {
        this.configuration.applicationID = applicationID;
        this.commit();
    };
    BSTConfig.prototype.updateVirtualDeviceToken = function (virtualDeviceToken) {
        this.configuration.virtualDeviceToken = virtualDeviceToken;
        this.commit();
    };
    BSTConfig.prototype.updateMessages = function (messages) {
        this.configuration.messages = messages;
        this.commit();
    };
    BSTConfig.prototype.deleteSession = function () {
        if (fs.existsSync(BSTConfig.sessionPath())) {
            fs.unlinkSync(BSTConfig.sessionPath());
        }
    };
    BSTConfig.prototype.saveSession = function (session) {
        var sessionBuffer = new Buffer(JSON.stringify(session, null, 4) + "\n");
        fs.writeFileSync(BSTConfig.sessionPath(), sessionBuffer);
    };
    BSTConfig.prototype.loadSession = function () {
        if (!fs.existsSync(BSTConfig.sessionPath())) {
            return null;
        }
        var data = fs.readFileSync(BSTConfig.sessionPath());
        return JSON.parse(data.toString());
    };
    BSTConfig.prototype.virtualDeviceToken = function () {
        return this.configuration.virtualDeviceToken;
    };
    BSTConfig.prototype.commit = function () {
        var configBuffer = new Buffer(JSON.stringify(this.configuration, null, 4) + "\n");
        fs.writeFileSync(BSTConfig.configPath(), configBuffer);
    };
    BSTConfig.prototype.loadFromJSON = function (config) {
        this.configuration = config;
    };
    BSTConfig.configDirectory = function () {
        return getUserHome() + "/" + BSTDirectoryName;
    };
    BSTConfig.configPath = function () {
        return BSTConfig.configDirectory() + "/config";
    };
    BSTConfig.sessionPath = function () {
        return BSTConfig.configDirectory() + "/session";
    };
    BSTConfig.bootstrapIfNeeded = function (createSource) {
        return __awaiter(this, void 0, void 0, function () {
            var directory, configJSON, _a, data, config, difference, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        createSource = typeof createSource === "undefined" ? true : createSource;
                        directory = BSTConfig.configDirectory();
                        if (!fs.existsSync(directory)) {
                            fs.mkdirSync(directory);
                        }
                        if (!!fs.existsSync(BSTConfig.configPath())) return [3, 4];
                        logging_helper_1.LoggingHelper.info(Logger, "No configuration. Creating one: " + BSTConfig.configPath());
                        configJSON = {};
                        if (!createSource) return [3, 2];
                        return [4, BSTConfig.createConfig()];
                    case 1:
                        configJSON = _d.sent();
                        _d.label = 2;
                    case 2:
                        _a = configJSON;
                        return [4, this.fetchMessages()];
                    case 3:
                        _a.bstMessages = _d.sent();
                        BSTConfig.saveConfig(configJSON);
                        return [3, 12];
                    case 4:
                        data = fs.readFileSync(BSTConfig.configPath());
                        config = JSON.parse(data.toString());
                        if (!(createSource && (!config.sourceID || !config.version))) return [3, 6];
                        return [4, BSTConfig.updateConfig(config)];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6:
                        if (!(config.bstMessages && config.bstMessages.fetched)) return [3, 9];
                        difference = (new Date()).getTime() - config.bstMessages.fetched;
                        if (!(difference > 1000 * 3600 * 24)) return [3, 8];
                        _b = config;
                        return [4, this.fetchMessages()];
                    case 7:
                        _b.bstMessages = _d.sent();
                        _d.label = 8;
                    case 8: return [3, 11];
                    case 9:
                        _c = config;
                        return [4, this.fetchMessages()];
                    case 10:
                        _c.bstMessages = _d.sent();
                        _d.label = 11;
                    case 11:
                        BSTConfig.saveConfig(config);
                        _d.label = 12;
                    case 12: return [2];
                }
            });
        });
    };
    BSTConfig.updateConfig = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var previousKey, generatedConfig;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        previousKey = config.nodeID || config.secretKey;
                        return [4, BSTConfig.createConfig(previousKey, config.sourceID)];
                    case 1:
                        generatedConfig = _a.sent();
                        config.sourceID = generatedConfig.sourceID;
                        config.secretKey = generatedConfig.secretKey;
                        config.version = generatedConfig.version;
                        delete config.nodeID;
                        return [2];
                }
            });
        });
    };
    BSTConfig.saveConfig = function (config) {
        var configBuffer = new Buffer(JSON.stringify(config, null, 4) + "\n");
        fs.writeFileSync(BSTConfig.configPath(), configBuffer);
    };
    BSTConfig.createConfig = function (nodeID, sourceID) {
        return __awaiter(this, void 0, void 0, function () {
            var lambdaConfig, pipeInfo, bstMessages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lambdaConfig = lambda_config_1.LambdaConfig.defaultConfig().lambdaDeploy;
                        return [4, BSTConfig.createExternalResources(nodeID, sourceID)];
                    case 1:
                        pipeInfo = _a.sent();
                        return [4, this.fetchMessages()];
                    case 2:
                        bstMessages = _a.sent();
                        return [2, {
                                "sourceID": pipeInfo.endPoint.name,
                                "secretKey": pipeInfo.uuid,
                                "lambdaDeploy": lambdaConfig,
                                "version": this.getBstVersion(),
                                "bstMessages": bstMessages,
                            }];
                }
            });
        });
    };
    BSTConfig.createSpokesPipe = function (id, secretKey) {
        return __awaiter(this, void 0, void 0, function () {
            var spokesClient, isUUIDUnassigned;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        spokesClient = new spokes_1.SpokesClient(id, secretKey);
                        return [4, spokesClient.verifyUUIDisNew()];
                    case 1:
                        isUUIDUnassigned = _a.sent();
                        if (isUUIDUnassigned) {
                            return [2, spokesClient.createPipe()];
                        }
                        return [2, {
                                endPoint: {
                                    name: id,
                                },
                                uuid: secretKey,
                            }];
                }
            });
        });
    };
    BSTConfig.createSource = function (secretKey, sourceID) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceNameGenerator, id, key, generatedKey, generatedKey, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sourceNameGenerator = new source_name_generator_1.SourceNameGenerator();
                        if (!!secretKey) return [3, 2];
                        return [4, sourceNameGenerator.callService()];
                    case 1:
                        generatedKey = _a.sent();
                        id = generatedKey.id;
                        key = generatedKey.secretKey;
                        _a.label = 2;
                    case 2:
                        if (!(secretKey && !sourceID)) return [3, 4];
                        return [4, sourceNameGenerator.callService()];
                    case 3:
                        generatedKey = _a.sent();
                        id = generatedKey.id;
                        key = secretKey;
                        _a.label = 4;
                    case 4:
                        if (sourceID && secretKey) {
                            id = sourceID;
                            key = secretKey;
                        }
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4, sourceNameGenerator.createDashboardSource(id, key)];
                    case 6:
                        _a.sent();
                        return [3, 8];
                    case 7:
                        e_1 = _a.sent();
                        if (e_1.statusCode !== 403) {
                            throw (e_1);
                        }
                        return [3, 8];
                    case 8: return [2, {
                            id: id,
                            key: key,
                        }];
                }
            });
        });
    };
    BSTConfig.createExternalResources = function (secretKey, sourceID) {
        return __awaiter(this, void 0, void 0, function () {
            var sourceData, pipe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.createSource(secretKey, sourceID)];
                    case 1:
                        sourceData = _a.sent();
                        return [4, this.createSpokesPipe(sourceData.id, sourceData.key)];
                    case 2:
                        pipe = _a.sent();
                        return [2, pipe];
                }
            });
        });
    };
    BSTConfig.fetchMessages = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bstMessages, messages, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        bstMessages = new messages_1.BstMessages();
                        return [4, bstMessages.callService()];
                    case 1:
                        messages = _a.sent();
                        return [2, {
                                messages: messages,
                                fetched: new Date().getTime(),
                            }];
                    case 2:
                        error_1 = _a.sent();
                        if (process.env.DISPLAY_INTERNAL_ERROR) {
                            console.log("error", error_1);
                        }
                        return [3, 3];
                    case 3: return [2, undefined];
                }
            });
        });
    };
    return BSTConfig;
}());
exports.BSTConfig = BSTConfig;
var BSTProcess = (function () {
    function BSTProcess() {
    }
    BSTProcess.running = function () {
        var process = null;
        if (fs.existsSync(BSTProcess.processPath())) {
            var data = fs.readFileSync(BSTProcess.processPath());
            var json = JSON.parse(data.toString());
            if (BSTProcess.isRunning(json.pid)) {
                process = new BSTProcess();
                process.loadJSON(json);
            }
        }
        return process;
    };
    BSTProcess.isRunning = function (pid) {
        try {
            process.kill(pid, 0);
            return true;
        }
        catch (e) {
            return e.code === "EPERM";
        }
    };
    BSTProcess.processPath = function () {
        return getUserHome() + "/" + BSTDirectoryName + "/process";
    };
    BSTProcess.run = function (port, proxyType, pid) {
        var process = new BSTProcess();
        process.port = port;
        process.proxyType = proxyType;
        process.pid = pid;
        var json = process.json();
        var jsonBuffer = new Buffer(JSON.stringify(json, undefined, 4) + "\n");
        fs.writeFileSync(BSTProcess.processPath(), jsonBuffer);
        return process;
    };
    BSTProcess.prototype.kill = function () {
        try {
            process.kill(this.pid, "SIGKILL");
            return true;
        }
        catch (e) {
            console.error("Error killing process[" + this.pid + "] Message: " + e.message);
            return false;
        }
    };
    BSTProcess.prototype.loadJSON = function (json) {
        this.port = json.port;
        this.proxyType = json.proxyType;
        this.pid = json.pid;
    };
    BSTProcess.prototype.json = function () {
        return {
            "port": this.port,
            "type": this.proxyType,
            "pid": this.pid
        };
    };
    return BSTProcess;
}());
exports.BSTProcess = BSTProcess;
function getUserHome() {
    return process.env[(process.platform === "win32") ? "USERPROFILE" : "HOME"];
}
//# sourceMappingURL=bst-config.js.map