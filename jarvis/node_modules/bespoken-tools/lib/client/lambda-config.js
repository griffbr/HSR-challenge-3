"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var global_1 = require("../core/global");
var PropertiesReader = require("properties-reader");
var LambdaConfig = (function () {
    function LambdaConfig() {
    }
    LambdaConfig.create = function () {
        var instance = new LambdaConfig();
        return instance;
    };
    LambdaConfig.defaultConfig = function () {
        return {
            "lambdaDeploy": {
                "runtime": "nodejs4.3",
                "role": "",
                "handler": "index.handler",
                "description": "My BST lambda skill",
                "timeout": 3,
                "memorySize": 128,
                "vpcSubnets": "",
                "vpcSecurityGroups": "",
                "excludeGlobs": "event.json"
            }
        };
    };
    LambdaConfig.prototype.initialize = function () {
        var awsConfig = null;
        if (!global_1.Global.config().configuration.lambdaDeploy) {
            global_1.Global.config().configuration.lambdaDeploy = LambdaConfig.defaultConfig().lambdaDeploy;
            global_1.Global.config().save();
        }
        var bstConfig = global_1.Global.config().configuration.lambdaDeploy;
        try {
            var home = process.env[(process.platform === "win32") ? "USERPROFILE" : "HOME"];
            awsConfig = PropertiesReader(home + "/.aws/config").append(home + "/.aws/credentials");
        }
        catch (err) {
            if (err.code === "ENOENT") {
                console.log("Warning! AWS configuration files (in ~/.aws) are missing!");
            }
            else {
                throw err;
            }
        }
        if (awsConfig) {
            this.AWS_ACCESS_KEY_ID = process.env.AWS_ACCESS_KEY_ID || awsConfig.get("default.aws_access_key_id");
            this.AWS_SECRET_ACCESS_KEY = process.env.AWS_SECRET_ACCESS_KEY || awsConfig.get("default.aws_secret_access_key");
            this.AWS_REGION = process.env.AWS_REGION || awsConfig.get("default.region") || "us-east-1";
        }
        else {
            this.AWS_ACCESS_KEY_ID = process.env.AWS_ACCESS_KEY_ID;
            this.AWS_SECRET_ACCESS_KEY = process.env.AWS_SECRET_ACCESS_KEY;
            this.AWS_REGION = process.env.AWS_REGION || "us-east-1";
        }
        this.AWS_FUNCTION_NAME = bstConfig.functionName || "";
        this.AWS_RUNTIME = bstConfig.runtime || "nodejs4.3";
        this.AWS_ROLE = bstConfig.role;
        this.AWS_HANDLER = bstConfig.hander || "index.handler";
        this.AWS_DESCRIPTION = bstConfig.description || "My BST lambda skill";
        this.AWS_TIMEOUT = bstConfig.timeout || 5;
        this.AWS_MEMORY_SIZE = bstConfig.memorySize || 128;
        this.AWS_PUBLISH = true;
        this.AWS_VPC_SUBNETS = bstConfig.vpcSubnets || "";
        this.AWS_VPC_SECURITY_GROUPS = bstConfig.vpcSecurityGroups || "";
        this.EXCLUDE_GLOBS = bstConfig.excludeGlobs || "";
    };
    LambdaConfig.prototype.validate = function () {
    };
    return LambdaConfig;
}());
exports.LambdaConfig = LambdaConfig;
//# sourceMappingURL=lambda-config.js.map