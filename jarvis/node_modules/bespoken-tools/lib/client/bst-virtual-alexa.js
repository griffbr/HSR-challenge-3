"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var global_1 = require("../core/global");
var virtual_alexa_1 = require("virtual-alexa");
var fs = require("fs");
var bst_statistics_1 = require("../statistics/bst-statistics");
var BSTVirtualAlexa = (function () {
    function BSTVirtualAlexa(skillURL, interactionModel, intentSchemaFile, sampleUtterancesFile, applicationID, locale, userId) {
        this.skillURL = skillURL;
        this.interactionModel = interactionModel;
        this.intentSchemaFile = intentSchemaFile;
        this.sampleUtterancesFile = sampleUtterancesFile;
        this.applicationID = applicationID;
        this.locale = locale;
        this.userId = userId;
        this.virtualAlexa = null;
        this.interactionModelProvided = false;
        this.sampleUtterancesProvided = false;
        this.intentSchemaProvided = false;
        if ((intentSchemaFile || sampleUtterancesFile) && interactionModel) {
            console.error("The Interaction Model and Intent Schema Files should not both be specified. It should be one or the other.");
            throw new Error("The Interaction Model and Intent Schema Files should not both be specified. It should be one or the other.");
        }
        if (!this.interactionModel) {
            this.interactionModel = BSTVirtualAlexa.DefaultInteractionModelLocation;
        }
        else {
            this.interactionModelProvided = true;
        }
        if (!this.intentSchemaFile) {
            this.intentSchemaFile = BSTVirtualAlexa.DefaultIntentSchemaLocation;
        }
        else {
            this.intentSchemaProvided = true;
        }
        if (!this.sampleUtterancesFile) {
            this.sampleUtterancesFile = BSTVirtualAlexa.DefaultSampleUtterancesLocation;
        }
        else {
            this.sampleUtterancesProvided = true;
        }
        if (global_1.Global.config()) {
            if (this.applicationID) {
                global_1.Global.config().updateApplicationID(this.applicationID);
            }
            else {
                this.applicationID = global_1.Global.config().applicationID();
            }
        }
    }
    BSTVirtualAlexa.prototype.saveSession = function () {
        if (global_1.Global.config()) {
            var session = this.virtualAlexa.context().session();
            if (!session) {
                global_1.Global.config().deleteSession();
                return;
            }
            var savedSession = {
                id: session.id(),
                attributes: session.attributes(),
                locale: this.locale,
                userId: this.userId
            };
            global_1.Global.config().saveSession(savedSession);
        }
    };
    BSTVirtualAlexa.prototype.deleteSession = function () {
        global_1.Global.config().deleteSession();
    };
    BSTVirtualAlexa.prototype.loadSession = function () {
        if (global_1.Global.config()) {
            var savedSession = global_1.Global.config().loadSession();
            if (savedSession) {
                this.virtualAlexa.context().session().setID(savedSession.id);
                this.virtualAlexa.context().session().updateAttributes(savedSession.attributes);
            }
        }
    };
    BSTVirtualAlexa.prototype.context = function () {
        return this.virtualAlexa.context();
    };
    BSTVirtualAlexa.prototype.validateFile = function (file, fileType) {
        if (!fs.existsSync(file)) {
            console.error("Error loading " + fileType);
            console.error("Cause: '" + this.interactionModel + "' doesn't exist");
            throw new Error("Error loading " + fileType + ", file not found");
        }
    };
    BSTVirtualAlexa.prototype.validateJsonFiles = function (fileLocation, fileType) {
        var fileContent = fs.readFileSync(fileLocation);
        try {
            JSON.parse(fileContent.toString());
        }
        catch (error) {
            console.error("Error loading '" + fileType + "', incorrect JSON");
            console.error("Cause: ", error.message);
            throw new Error("Error loading '" + fileType + "', incorrect JSON");
        }
    };
    BSTVirtualAlexa.prototype.validateFilesAndBuild = function (createdEmptyInteractionModelIfNeeded) {
        var builder = virtual_alexa_1.VirtualAlexa.Builder().applicationID(this.applicationID).skillURL(this.skillURL);
        var usingInteractionModel = false;
        if (this.locale) {
            builder.locale(this.locale);
            if (!this.interactionModelProvided) {
                this.interactionModel = this.interactionModel.replace("en-US", this.locale);
            }
        }
        if (!(this.interactionModelProvided || this.intentSchemaProvided)) {
            if (fs.existsSync(this.interactionModel)) {
                usingInteractionModel = true;
            }
            else if (!(fs.existsSync(this.intentSchemaFile) && fs.existsSync(this.sampleUtterancesFile)) && !createdEmptyInteractionModelIfNeeded) {
                console.error("Error loading Interaction model, no file provided and none found in default locations");
                throw new Error("Error loading Interaction model, no file provided and none found in default locations");
            }
        }
        else {
            if (this.interactionModelProvided) {
                this.validateFile(this.interactionModel, BSTVirtualAlexa.FileTypes.InterationModel);
                usingInteractionModel = true;
            }
            else {
                if (!fs.existsSync(this.intentSchemaFile)) {
                    this.validateFile(this.intentSchemaFile, BSTVirtualAlexa.FileTypes.IntentSchema);
                }
                if (!fs.existsSync(this.sampleUtterancesFile)) {
                    this.validateFile(this.sampleUtterancesFile, BSTVirtualAlexa.FileTypes.SampleUtterances);
                }
            }
        }
        if (usingInteractionModel) {
            this.validateJsonFiles(this.interactionModel, BSTVirtualAlexa.FileTypes.InterationModel);
            builder.interactionModelFile(this.interactionModel);
        }
        else if (createdEmptyInteractionModelIfNeeded) {
            builder.interactionModel(BSTVirtualAlexa.DefaultInteractionModel);
        }
        else {
            this.validateJsonFiles(this.intentSchemaFile, BSTVirtualAlexa.FileTypes.IntentSchema);
            builder.intentSchemaFile(this.intentSchemaFile).sampleUtterancesFile(this.sampleUtterancesFile);
        }
        return builder.create();
    };
    BSTVirtualAlexa.prototype.start = function (createdEmptyInteractionModelIfNeeded) {
        this.virtualAlexa = this.validateFilesAndBuild(createdEmptyInteractionModelIfNeeded);
        var globalConfig = global_1.Global.config();
        if (globalConfig && globalConfig.configuration && globalConfig.configuration.secretKey) {
            this.nodeId = globalConfig.configuration.secretKey;
        }
    };
    BSTVirtualAlexa.prototype.spoken = function (phrase, callback) {
        var _this = this;
        var request;
        this.virtualAlexa.filter(function (generatedRequest) { request = generatedRequest; });
        this.loadSession();
        this.virtualAlexa.utter(phrase).then(function (payload) {
            _this.saveSession();
            if (callback !== undefined && callback !== null) {
                callback(null, payload, request);
            }
        }).catch(function (error) {
            callback(error, null, request);
        });
        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.utter, undefined, this.nodeId, global_1.Global.version());
        return this;
    };
    BSTVirtualAlexa.prototype.intended = function (intentName, slots, callback) {
        var _this = this;
        var request;
        this.virtualAlexa.filter(function (generatedRequest) { request = generatedRequest; });
        this.loadSession();
        this.virtualAlexa.intend(intentName, slots).then(function (payload) {
            _this.saveSession();
            if (callback !== undefined && callback !== null) {
                callback(null, payload, request);
            }
        }).catch(function (error) {
            callback(error, null, request);
        });
        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.intend, undefined, this.nodeId, global_1.Global.version());
        return this;
    };
    BSTVirtualAlexa.prototype.launched = function (callback) {
        var _this = this;
        var request;
        this.virtualAlexa.filter(function (generatedRequest) { request = generatedRequest; });
        this.virtualAlexa.launch().then(function (payload) {
            _this.saveSession();
            callback(null, payload, request);
        }).catch(function (error) {
            callback(error, null, request);
        });
        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.launch, undefined, this.nodeId, global_1.Global.version());
        return this;
    };
    BSTVirtualAlexa.DefaultIntentSchemaLocation = "speechAssets/IntentSchema.json";
    BSTVirtualAlexa.DefaultSampleUtterancesLocation = "speechAssets/SampleUtterances.txt";
    BSTVirtualAlexa.DefaultInteractionModelLocation = "models/en-US.json";
    BSTVirtualAlexa.DefaultInteractionModel = { interactionModel: { languageModel: { invocationName: "", intents: [] } } };
    BSTVirtualAlexa.FileTypes = {
        InterationModel: "Interaction Model",
        IntentSchema: "Intent Schema",
        SampleUtterances: "Sample Utterances"
    };
    return BSTVirtualAlexa;
}());
exports.BSTVirtualAlexa = BSTVirtualAlexa;
//# sourceMappingURL=bst-virtual-alexa.js.map