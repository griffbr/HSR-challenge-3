"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var socket_handler_1 = require("../core/socket-handler");
var global_1 = require("../core/global");
var KeepAlivePeriod = 30000;
var KeepAliveWindowPeriod = 300000;
var KeepAliveWarningThreshold = 5;
var KeepAlive = (function () {
    function KeepAlive(socket) {
        this.socket = socket;
        this.pingPeriod = KeepAlivePeriod;
        this.windowPeriod = KeepAliveWindowPeriod;
        this.warningThreshold = KeepAliveWarningThreshold;
        this.keepAliveArray = [];
        this.timeout = null;
        this.stopped = false;
    }
    KeepAlive.prototype.start = function (onFailureCallback) {
        this.onFailureCallback = onFailureCallback;
        this.reset();
        this.keepAlive();
    };
    KeepAlive.prototype.reset = function () {
        this.startedTimestamp = new Date().getTime();
    };
    KeepAlive.prototype.keepAlive = function () {
        var self = this;
        if ((new Date().getTime() - this.startedTimestamp) > this.windowPeriod) {
            this.keepAliveArray = this.keepAlivesInPeriod(this.windowPeriod);
            if (this.keepAliveArray.length <= this.warningThreshold) {
                this.onFailureCallback();
                this.reset();
            }
        }
        this.timeout = setTimeout(function () {
            if (!self.stopped) {
                self.socket.send(new socket_handler_1.SocketMessage(global_1.Global.KeepAliveMessage));
                self.keepAlive();
            }
        }, this.pingPeriod);
    };
    KeepAlive.prototype.keepAlivesInPeriod = function (periodInMilliseconds) {
        var newArray = [];
        var rightNow = new Date().getTime();
        for (var _i = 0, _a = this.keepAliveArray; _i < _a.length; _i++) {
            var timestamp = _a[_i];
            var secondsPassed = rightNow - timestamp;
            if (secondsPassed < periodInMilliseconds) {
                newArray.push(timestamp);
            }
        }
        return newArray;
    };
    KeepAlive.prototype.received = function () {
        this.keepAliveArray.push(new Date().getTime());
    };
    KeepAlive.prototype.stop = function () {
        if (this.timeout !== null) {
            this.stopped = true;
            clearTimeout(this.timeout);
        }
    };
    return KeepAlive;
}());
exports.KeepAlive = KeepAlive;
//# sourceMappingURL=keep-alive.js.map