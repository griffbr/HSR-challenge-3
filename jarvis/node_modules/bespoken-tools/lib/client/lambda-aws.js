"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var aws = require("aws-sdk");
var LambdaAws = (function () {
    function LambdaAws() {
        this.iam = null;
        this.lambda = null;
        this.lambdaConfig = null;
    }
    LambdaAws.create = function (lambdaConfig) {
        var instance = new LambdaAws();
        instance.lambdaConfig = lambdaConfig;
        var aws_security = {
            accessKeyId: lambdaConfig.AWS_ACCESS_KEY_ID,
            secretAccessKey: lambdaConfig.AWS_SECRET_ACCESS_KEY,
            region: "us-east-1"
        };
        aws.config.update(aws_security);
        instance.iam = new aws.IAM({
            apiVersion: "2016-03-01"
        });
        instance.lambda = new aws.Lambda({
            apiVersion: "2016-03-01"
        });
        return instance;
    };
    LambdaAws.prototype.createRole = function (roleName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var roleRrn = null;
            var assumeRolePolicy = {
                Version: "2012-10-17",
                Statement: [
                    {
                        Sid: "",
                        Effect: "Allow",
                        Principal: {
                            Service: "lambda.amazonaws.com"
                        },
                        Action: "sts:AssumeRole"
                    }
                ]
            };
            var createParams = {
                AssumeRolePolicyDocument: JSON.stringify(assumeRolePolicy, null, 2),
                RoleName: roleName
            };
            var createPromise = _this.iam.createRole(createParams).promise();
            createPromise
                .then(function (data) {
                roleRrn = data.Role.Arn;
                return _this.putRolePolicy(roleName);
            })
                .then(function (data) {
                resolve(roleRrn);
            })
                .catch(function (err) {
                reject(err);
            });
        });
    };
    LambdaAws.prototype.getRole = function (roleName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var getRolePromise = _this.iam.getRole({ "RoleName": roleName }).promise();
            getRolePromise
                .then(function (data) {
                resolve(data.Role.Arn);
            })
                .catch(function (err) {
                if (err.code === "NoSuchEntity") {
                    resolve(null);
                }
                else {
                    reject(err);
                }
            });
        });
    };
    LambdaAws.prototype.deleteRole = function (roleName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.deleteRolePolicy(roleName)
                .then(function (data) {
                return _this.iam.deleteRole({ "RoleName": roleName }).promise();
            })
                .then(function (data) {
                resolve(null);
            })
                .catch(function (err) {
                if (err.code === "NoSuchEntity") {
                    resolve(null);
                }
                else {
                    reject(err);
                }
            });
        });
    };
    LambdaAws.prototype.deleteRolePolicy = function (roleName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var policyName = roleName + "-access";
            _this.iam.deleteRolePolicy({ "PolicyName": policyName, "RoleName": roleName }).promise()
                .then(function (data) {
                resolve(data);
            })
                .catch(function (err) {
                if (err.code === "NoSuchEntity") {
                    resolve(err.code);
                }
                else {
                    reject(err);
                }
            });
        });
    };
    LambdaAws.prototype.putRolePolicy = function (roleName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var rolePolicy = {
                Version: "2012-10-17",
                Statement: [
                    {
                        Sid: "",
                        Action: [
                            "dynamodb:DeleteItem",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:UpdateItem"
                        ],
                        Effect: "Allow",
                        Resource: "*"
                    },
                    {
                        Effect: "Allow",
                        Action: [
                            "logs:*"
                        ],
                        Resource: "arn:aws:logs:*:*:*"
                    },
                    {
                        Effect: "Allow",
                        Action: [
                            "s3:GetObject"
                        ],
                        Resource: "arn:aws:s3:::'$source_bucket'/*"
                    },
                    {
                        Effect: "Allow",
                        Action: [
                            "s3:PutObject"
                        ],
                        Resource: "arn:aws:s3:::'$target_bucket'/*"
                    }
                ]
            };
            var putRolePolicyParams = {
                PolicyDocument: JSON.stringify(rolePolicy, null, 2),
                PolicyName: roleName + "-access",
                RoleName: roleName
            };
            var putRolePromise = _this.iam.putRolePolicy(putRolePolicyParams).promise();
            putRolePromise
                .then(function (data) {
                resolve(data);
            })
                .catch(function (err) {
                reject(err);
            });
        });
    };
    LambdaAws.prototype.invokeLambda = function (functionName, payload) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var params = {
                FunctionName: functionName,
                InvocationType: "RequestResponse",
                LogType: "None",
                Payload: JSON.stringify(payload)
            };
            var invokePromise = _this.lambda.invoke(params).promise();
            invokePromise
                .then(function (data) {
                resolve(data);
            })
                .catch(function (err) {
                reject(err);
            });
        });
    };
    LambdaAws.prototype.deleteFunction = function (functionName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.lambda.deleteFunction({ "FunctionName": functionName }).promise()
                .then(function (data) {
                resolve(data);
            })
                .catch(function (err) {
                if (err.code === "NoSuchEntity") {
                    resolve(err.code);
                }
                else {
                    reject(err);
                }
            });
        });
    };
    return LambdaAws;
}());
exports.LambdaAws = LambdaAws;
//# sourceMappingURL=lambda-aws.js.map