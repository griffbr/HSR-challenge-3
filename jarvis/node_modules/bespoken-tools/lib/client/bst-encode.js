"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_util_1 = require("../core/file-util");
var path = require("path");
var https = require("https");
var AWS = require("aws-sdk");
var BSTEncode = (function () {
    function BSTEncode(configuration) {
        this._configuration = configuration;
        if (configuration.accessKeyId === undefined) {
            configuration.accessKeyId = AWS.config.credentials.accessKeyId;
            configuration.secretAccessKey = AWS.config.credentials.secretAccessKey;
        }
    }
    BSTEncode.prototype.encodeFileAndPublish = function (filePath, callback) {
        this.encodeFileAndPublishAs(filePath, null, callback);
    };
    BSTEncode.prototype.encodeFileAndPublishAs = function (filePath, outputKey, callback) {
        var self = this;
        file_util_1.FileUtil.readFile(filePath, function (data) {
            var fp = path.parse(filePath);
            var filename = fp.name + fp.ext;
            self.uploadFile(self._configuration.bucket, filename, data, function (url) {
                self.callEncode(url, outputKey, function (error, encodedURL) {
                    callback(error, encodedURL);
                });
            });
        });
    };
    BSTEncode.prototype.encodeURLAndPublish = function (sourceURL, callback) {
        this.encodeURLAndPublishAs(sourceURL, null, callback);
    };
    BSTEncode.prototype.encodeURLAndPublishAs = function (sourceURL, outputKey, callback) {
        var self = this;
        self.callEncode(sourceURL, outputKey, function (error, encodedURL) {
            callback(error, encodedURL);
        });
    };
    BSTEncode.prototype.uploadFile = function (bucket, name, data, callback) {
        if (this._configuration === undefined) {
            throw new Error("No AWS Configuration parameters defined");
        }
        var config = {
            credentials: {
                accessKeyId: this._configuration.accessKeyId,
                secretAccessKey: this._configuration.secretAccessKey
            }
        };
        var s3 = new AWS.S3(config);
        var params = { Bucket: bucket, Key: name, Body: data, ACL: "public-read" };
        s3.putObject(params, function () {
            callback(BSTEncode.urlForS3(bucket, name));
        });
    };
    BSTEncode.prototype.callEncode = function (sourceURL, bucketKey, callback) {
        var self = this;
        if (bucketKey === null) {
            bucketKey = sourceURL.substring(sourceURL.lastIndexOf("/") + 1);
            if (bucketKey.indexOf("?") !== -1) {
                bucketKey = bucketKey.substring(0, bucketKey.indexOf("?"));
            }
            var basename = bucketKey.substring(0, bucketKey.indexOf("."));
            bucketKey = basename + "-encoded.mp3";
        }
        var options = {
            host: BSTEncode.EncoderHost,
            path: BSTEncode.EncoderPath,
            method: "POST",
            headers: {
                accessKeyId: this._configuration.accessKeyId,
                accessSecretKey: this._configuration.secretAccessKey,
                sourceURL: sourceURL,
                targetBucket: this.bucket(),
                targetKey: bucketKey
            }
        };
        if (this._configuration.filterVolume !== undefined) {
            options.headers.filterVolume = this._configuration.filterVolume + "";
        }
        var responseData = "";
        var request = https.request(options, function (response) {
            if (response.statusCode !== 200) {
                callback(new Error(response.statusMessage), null);
            }
            else {
                response.on("data", function (data) {
                    responseData += data.toString();
                });
                response.on("end", function () {
                    var officialURL = BSTEncode.urlForS3(self.bucket(), bucketKey);
                    callback(null, officialURL);
                });
            }
        });
        request.end();
    };
    BSTEncode.prototype.bucket = function () {
        return this._configuration.bucket;
    };
    BSTEncode.urlForS3 = function (bucket, key) {
        return "https://s3.amazonaws.com/" + bucket + "/" + key;
    };
    BSTEncode.EncoderHost = "encoder.bespoken.io";
    BSTEncode.EncoderPath = "/encode";
    return BSTEncode;
}());
exports.BSTEncode = BSTEncode;
//# sourceMappingURL=bst-encode.js.map