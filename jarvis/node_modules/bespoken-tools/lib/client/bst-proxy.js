"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bespoke_client_1 = require("./bespoke-client");
var lambda_server_1 = require("./lambda-server");
var bst_config_1 = require("./bst-config");
var global_1 = require("../core/global");
var bst_config_2 = require("./bst-config");
var function_server_1 = require("./function-server");
var logging_helper_1 = require("../core/logging-helper");
var bst_statistics_1 = require("../statistics/bst-statistics");
var ProxyType;
(function (ProxyType) {
    ProxyType[ProxyType["GOOGLE_CLOUD_FUNCTION"] = 0] = "GOOGLE_CLOUD_FUNCTION";
    ProxyType[ProxyType["HTTP"] = 1] = "HTTP";
    ProxyType[ProxyType["LAMBDA"] = 2] = "LAMBDA";
})(ProxyType = exports.ProxyType || (exports.ProxyType = {}));
var DefaultLambdaPort = 10000;
var BSTProxy = (function () {
    function BSTProxy(proxyType) {
        this.proxyType = proxyType;
        this.bespokenClient = null;
        this.functionServer = null;
        this.lambdaServer = null;
        this.isSecure = false;
        this.bespokenHost = "proxy.bespoken.tools";
        this.bespokenPort = 5000;
        this.httpDomain = "localhost";
    }
    BSTProxy.http = function (targetPort) {
        var tool = new BSTProxy(ProxyType.HTTP);
        tool.httpPort = targetPort;
        return tool;
    };
    BSTProxy.lambda = function (lambdaFile, functionName) {
        var tool = new BSTProxy(ProxyType.LAMBDA);
        tool.functionFile = lambdaFile;
        tool.functionName = functionName;
        tool.httpPort = DefaultLambdaPort;
        return tool;
    };
    BSTProxy.cloudFunction = function (functionFile, functionName) {
        var tool = new BSTProxy(ProxyType.GOOGLE_CLOUD_FUNCTION);
        tool.functionFile = functionFile;
        tool.functionName = functionName;
        tool.httpPort = DefaultLambdaPort;
        return tool;
    };
    BSTProxy.prototype.bespokenServer = function (host, port) {
        this.bespokenHost = host;
        this.bespokenPort = port;
        return this;
    };
    BSTProxy.prototype.targetDomain = function (host) {
        this.httpDomain = host;
        return this;
    };
    BSTProxy.prototype.secretKey = function (secretKey) {
        this.proxySecretKey = secretKey;
        return this;
    };
    BSTProxy.prototype.activateSecurity = function () {
        this.isSecure = true;
    };
    BSTProxy.prototype.port = function (port) {
        this.httpPort = port;
        return this;
    };
    BSTProxy.prototype.startWithConfig = function (onStarted) {
        this.bespokenClient = new bespoke_client_1.BespokeClient(this.proxySecretKey, this.bespokenHost, this.bespokenPort, this.httpDomain, this.httpPort, this.isSecure ? this.proxySecretKey : undefined);
        var callbackCountDown = 1;
        var callback = function () {
            callbackCountDown--;
            if (callbackCountDown === 0 && onStarted !== undefined) {
                onStarted();
            }
        };
        this.bespokenClient.onConnect = callback;
        this.bespokenClient.connect();
        if (this.proxyType === ProxyType.LAMBDA) {
            callbackCountDown++;
            this.lambdaServer = new lambda_server_1.LambdaServer(this.functionFile, this.httpPort, false, this.functionName);
            this.lambdaServer.start(callback);
        }
        if (this.proxyType === ProxyType.GOOGLE_CLOUD_FUNCTION) {
            callbackCountDown++;
            this.functionServer = new function_server_1.FunctionServer(this.functionFile, this.functionName, this.httpPort);
            this.functionServer.start(callback);
        }
        bst_statistics_1.BstStatistics.instance().record(bst_statistics_1.BstCommand.proxy, undefined, this.proxySecretKey, global_1.Global.version());
        return this;
    };
    BSTProxy.prototype.start = function (onStarted) {
        var self = this;
        if (global_1.Global.config()) {
            bst_config_1.BSTProcess.run(this.httpPort, this.proxyType, process.pid);
            this.proxySecretKey = global_1.Global.config().secretKey();
            this.startWithConfig(onStarted);
        }
        else {
            if (!this.proxySecretKey) {
                bst_config_2.BSTConfig.load().then(function (config) {
                    self.proxySecretKey = config.secretKey();
                    self.startWithConfig(onStarted);
                    logging_helper_1.LoggingHelper.initialize(false);
                });
                return;
            }
            self.startWithConfig(onStarted);
            logging_helper_1.LoggingHelper.initialize(false);
        }
    };
    BSTProxy.prototype.stop = function (onStopped) {
        if (this.bespokenClient !== null) {
            this.bespokenClient.shutdown();
        }
        if (this.lambdaServer !== null) {
            this.lambdaServer.stop(onStopped);
        }
        else if (this.functionServer !== null) {
            this.functionServer.stop(onStopped);
        }
        else {
            if (onStopped !== undefined && onStopped !== null) {
                onStopped();
            }
        }
    };
    return BSTProxy;
}());
exports.BSTProxy = BSTProxy;
//# sourceMappingURL=bst-proxy.js.map