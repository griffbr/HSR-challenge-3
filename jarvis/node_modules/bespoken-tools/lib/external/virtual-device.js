"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var virtual_device_sdk_1 = require("virtual-device-sdk");
var global_1 = require("../core/global");
var VirtualDeviceClient = (function () {
    function VirtualDeviceClient() {
    }
    VirtualDeviceClient.speak = function (utterance, token, locale, voiceID) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenToUse, virtualDevice, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (token) {
                            if (global_1.Global.config()) {
                                global_1.Global.config().updateVirtualDeviceToken(token);
                            }
                        }
                        tokenToUse = token ? token : global_1.Global.config().virtualDeviceToken();
                        if (!tokenToUse) {
                            throw new Error("Token Required");
                        }
                        virtualDevice = new virtual_device_sdk_1.VirtualDevice(tokenToUse, locale, voiceID);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, virtualDevice.message(utterance)];
                    case 2: return [2, _a.sent()];
                    case 3:
                        error_1 = _a.sent();
                        throw error_1;
                    case 4: return [2];
                }
            });
        });
    };
    VirtualDeviceClient.renderResult = function (result) {
        var stringResult = "";
        if (result.transcript) {
            stringResult = "Transcript:\n";
            stringResult += result.transcript + "\n\n";
        }
        if (result.streamURL) {
            stringResult += "Stream:\n";
            stringResult += result.streamURL + "\n\n";
        }
        if (result.card) {
            stringResult += "Card:\n";
            if (result.card.mainTitle) {
                stringResult += result.card.mainTitle + "\n";
            }
            if (result.card.subTitle) {
                stringResult += result.card.subTitle + "\n";
            }
            if (result.card.textField) {
                stringResult += result.card.textField + "\n";
            }
            if (result.card.imageURL) {
                stringResult += result.card.imageURL + "\n";
            }
        }
        return stringResult;
    };
    return VirtualDeviceClient;
}());
exports.VirtualDeviceClient = VirtualDeviceClient;
//# sourceMappingURL=virtual-device.js.map