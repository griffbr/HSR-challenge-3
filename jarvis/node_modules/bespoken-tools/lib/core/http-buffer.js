"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_util_1 = require("./buffer-util");
var HTTPBuffer = (function () {
    function HTTPBuffer() {
        this._rawContent = buffer_util_1.BufferUtil.fromString("");
        this._complete = false;
    }
    HTTPBuffer.errorResponse = function (message) {
        var buffer = new HTTPBuffer();
        var payload = "HTTP/1.1 500 Error\r\nContent-Type: text/plain\r\n"
            + "Content-Length: " + message.length + "\r\n\r\n"
            + message;
        buffer.append(new Buffer(payload));
        return buffer;
    };
    HTTPBuffer.prototype.append = function (data) {
        this._rawContent = Buffer.concat([this._rawContent, data]);
        if (this._headers === undefined) {
            var endIndex = buffer_util_1.BufferUtil.scan(this._rawContent, [13, 10, 13, 10]);
            if (endIndex !== -1) {
                var headerBuffer = this._rawContent.slice(0, endIndex);
                this.parseHeaders(headerBuffer.toString());
                if (endIndex + 4 < this._rawContent.length) {
                    var bodyPart = this._rawContent.slice((endIndex + 4));
                    this.appendBody(bodyPart);
                }
            }
        }
        else {
            this.appendBody(data);
        }
    };
    HTTPBuffer.prototype.complete = function () {
        if (!this._complete) {
            if (this._headers !== undefined) {
                var chunked = this.hasHeader("Transfer-Encoding") && this.header("Transfer-Encoding").toLowerCase() === "chunked";
                if (chunked && this._rawBody !== undefined) {
                    var chunks = this.parseChunks();
                    if (chunks !== null && chunks.length > 0 && chunks[chunks.length - 1].lastChunk()) {
                        this._chunks = chunks;
                        this._complete = true;
                    }
                }
                else if (this._rawBody !== undefined) {
                    var length_1 = this._rawBody.length;
                    if (this.hasHeader("Content-Length")) {
                        length_1 = parseInt(this.header("Content-Length"));
                    }
                    this._complete = this._rawBody.length === length_1;
                }
            }
        }
        return this._complete;
    };
    HTTPBuffer.prototype.header = function (headerKey) {
        var value = null;
        if (this._headers !== undefined && this.hasHeader(headerKey)) {
            value = this._headers[headerKey];
        }
        return value;
    };
    HTTPBuffer.prototype.hasHeader = function (headerKey) {
        return headerKey in this._headers;
    };
    HTTPBuffer.prototype.method = function () {
        return this._method;
    };
    HTTPBuffer.prototype.uri = function () {
        return this._uri;
    };
    HTTPBuffer.prototype.statusCode = function () {
        return this._statusCode;
    };
    HTTPBuffer.prototype.chunked = function () {
        var chunked = false;
        if (this.complete()) {
            if (this._chunks !== undefined) {
                chunked = true;
            }
        }
        return chunked;
    };
    HTTPBuffer.prototype.raw = function () {
        return this._rawContent;
    };
    HTTPBuffer.prototype.isJSON = function () {
        return this.hasHeader("Content-Type") && this.header("Content-Type") === "application/json";
    };
    HTTPBuffer.prototype.body = function () {
        var body;
        if (this.complete()) {
            body = buffer_util_1.BufferUtil.fromString("");
            if (this.chunked()) {
                for (var _i = 0, _a = this._chunks; _i < _a.length; _i++) {
                    var chunk = _a[_i];
                    body = Buffer.concat([body, chunk.body]);
                }
            }
            else {
                body = this._rawBody;
            }
        }
        return body;
    };
    HTTPBuffer.prototype.bodyAsJSON = function () {
        var json;
        if (this.body() !== undefined) {
            json = JSON.parse(this.body().toString());
        }
        return json;
    };
    HTTPBuffer.prototype.parseChunks = function () {
        var chunks = [];
        var body = this._rawBody;
        while (true) {
            var chunk = HTTPChunk.parse(body);
            if (chunk !== null) {
                chunks.push(chunk);
            }
            else {
                break;
            }
            if (chunk.lastChunk()) {
                break;
            }
            body = body.slice(chunk.lengthWithHeaderAndTrailer());
        }
        return chunks;
    };
    HTTPBuffer.prototype.appendBody = function (bodyPart) {
        if (this._rawBody === undefined) {
            this._rawBody = buffer_util_1.BufferUtil.fromString("");
        }
        this._rawBody = Buffer.concat([this._rawBody, bodyPart]);
    };
    HTTPBuffer.prototype.parseHeaders = function (headersString) {
        this._headers = {};
        var lines = headersString.split("\n");
        if (lines[0].startsWith("HTTP")) {
            this._statusLine = lines[0];
            var statusLineParts = this._statusLine.split(" ");
            this._statusCode = parseInt(statusLineParts[1]);
        }
        else {
            this._requestLine = lines[0];
            var requestLineParts = this._requestLine.split(" ");
            this._method = requestLineParts[0];
            this._uri = requestLineParts[1];
        }
        for (var i = 1; i < lines.length; i++) {
            var headerLine = lines[i];
            var headerParts = headerLine.split(":");
            var key = headerParts[0];
            this._headers[key] = headerParts[1].trim();
        }
    };
    return HTTPBuffer;
}());
exports.HTTPBuffer = HTTPBuffer;
var HTTPChunk = (function () {
    function HTTPChunk(body, lengthString) {
        this.body = body;
        this.lengthString = lengthString;
    }
    HTTPChunk.prototype.length = function () {
        return parseInt(this.lengthString, 16);
    };
    HTTPChunk.prototype.headerLength = function () {
        return (this.lengthString).length + 2;
    };
    HTTPChunk.prototype.lengthWithHeaderAndTrailer = function () {
        return this.length() + this.headerLength() + 2;
    };
    HTTPChunk.prototype.lastChunk = function () {
        return (this.length() === 0);
    };
    HTTPChunk.parse = function (httpBody) {
        var chunkLengthString = HTTPChunk.parseLength(httpBody);
        if (chunkLengthString === null) {
            return null;
        }
        var chunkLength = parseInt(chunkLengthString, 16);
        var chunkStartIndex = chunkLengthString.length + 2;
        var endIndex = chunkStartIndex + chunkLength;
        if (httpBody.length < endIndex) {
            return null;
        }
        var chunkBody = httpBody.slice(chunkStartIndex, chunkStartIndex + chunkLength);
        return new HTTPChunk(chunkBody, chunkLengthString);
    };
    HTTPChunk.parseLength = function (httpBody) {
        var index = buffer_util_1.BufferUtil.scan(httpBody, [13, 10]);
        if (index === -1) {
            return null;
        }
        var chunkLengthString = "";
        for (var i = 0; i < index; i++) {
            var char = String.fromCharCode(httpBody[i]);
            if (isNaN(parseInt(char, 16))) {
                throw new RangeError("Invalid character found in chunk length - something went wrong! " + char);
            }
            chunkLengthString += String.fromCharCode(httpBody[i]);
        }
        return chunkLengthString;
    };
    return HTTPChunk;
}());
exports.HTTPChunk = HTTPChunk;
//# sourceMappingURL=http-buffer.js.map