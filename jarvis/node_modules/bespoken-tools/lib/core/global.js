"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var logging_helper_1 = require("./logging-helper");
var bst_config_1 = require("../client/bst-config");
var bst_config_2 = require("../client/bst-config");
var Global = (function () {
    function Global() {
    }
    Global.initializeCLI = function (createSource) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        createSource = typeof createSource === "undefined" ? true : createSource;
                        Global.initialize(true);
                        return [4, Global.loadConfig(createSource)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Global.loadConfig = function (createSource) {
        return __awaiter(this, void 0, void 0, function () {
            var config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        createSource = typeof createSource === "undefined" ? true : createSource;
                        return [4, bst_config_1.BSTConfig.load(createSource)];
                    case 1:
                        config = _a.sent();
                        Global._configuration = config;
                        return [2];
                }
            });
        });
    };
    Global.cli = function () {
        return Global._cli;
    };
    Global.config = function () {
        return Global._configuration;
    };
    Global.running = function () {
        return bst_config_2.BSTProcess.running();
    };
    Global.initialize = function (cli) {
        if (cli !== undefined && cli !== null) {
            Global._cli = cli;
        }
        logging_helper_1.LoggingHelper.initialize(cli);
    };
    Global.version = function () {
        return bst_config_1.BSTConfig.getBstVersion();
    };
    Global.messages = function () {
        return Global._configuration.getMessages();
    };
    Global.MessageDelimiter = "4772616365";
    Global.MessageIDLength = 13;
    Global.KeepAliveMessage = "KEEPALIVE";
    Global.BespokeServerHost = "proxy.bespoken.tools";
    Global.SpokesPipeDomain = "bespoken.link";
    Global.SpokesDashboardHost = "apps.bespoken.io/dashboard";
    Global._configuration = null;
    Global._cli = false;
    return Global;
}());
exports.Global = Global;
var NetworkErrorType;
(function (NetworkErrorType) {
    NetworkErrorType[NetworkErrorType["CONNECTION_REFUSED"] = 0] = "CONNECTION_REFUSED";
    NetworkErrorType[NetworkErrorType["OTHER"] = 1] = "OTHER";
    NetworkErrorType[NetworkErrorType["TIME_OUT"] = 2] = "TIME_OUT";
})(NetworkErrorType = exports.NetworkErrorType || (exports.NetworkErrorType = {}));
//# sourceMappingURL=global.js.map