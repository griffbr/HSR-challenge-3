"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var winston = require("winston");
var string_util_1 = require("./string-util");
var LoggingHelper = (function () {
    function LoggingHelper() {
    }
    LoggingHelper.setVerbose = function (enableVerbose) {
        LoggingHelper.verboseEnabled = enableVerbose;
        if (LoggingHelper.verboseEnabled) {
            LoggingHelper.logger.transports.console.level = "verbose";
        }
        else {
            LoggingHelper.logger.transports.console.level = "info";
        }
    };
    LoggingHelper.debug = function (logger, message) {
        LoggingHelper.log("debug", logger, message);
    };
    LoggingHelper.verbose = function (logger, message) {
        LoggingHelper.log("verbose", logger, message);
    };
    LoggingHelper.info = function (logger, message) {
        LoggingHelper.log("info", logger, message);
    };
    LoggingHelper.warn = function (logger, message) {
        LoggingHelper.log("warn", logger, message);
    };
    LoggingHelper.error = function (logger, message) {
        LoggingHelper.log("error", logger, message);
    };
    LoggingHelper.log = function (level, logger, message) {
        var loggerString = string_util_1.StringUtil.rpad(logger, " ", 10).substr(0, 10);
        if (LoggingHelper.cli) {
            winston.log(level, message);
        }
        else {
            winston.log(level, loggerString + "  " + message);
        }
    };
    LoggingHelper.prepareForFileLoggingAndDisableConsole = function (file) {
        LoggingHelper.logger.add(winston.transports.File, {
            formatter: LoggingHelper.cli ? LoggingHelper.cliFormatter : LoggingHelper.formatter,
            level: "error",
            filename: file,
        });
        LoggingHelper.logger.remove(winston.transports.Console);
    };
    LoggingHelper.initialize = function (cli) {
        LoggingHelper.cli = cli;
        winston.clear();
        if (LoggingHelper.cli) {
            LoggingHelper.logger = winston.add(winston.transports.Console, {
                formatter: LoggingHelper.cliFormatter,
                level: "info"
            });
        }
        else {
            LoggingHelper.logger = winston.add(winston.transports.Console, {
                formatter: LoggingHelper.formatter,
                level: "warn"
            });
        }
    };
    LoggingHelper.formatter = function (options) {
        return new Date().toISOString() + " "
            + options.level.toUpperCase() + " "
            + (undefined !== options.message ? options.message : "")
            + (options.meta && Object.keys(options.meta).length ? "\n\t"
                + JSON.stringify(options.meta) : "");
    };
    LoggingHelper.cliFormatter = function (options) {
        var level = options.level.toUpperCase();
        if (level === "VERBOSE") {
            level = "VERB";
        }
        return string_util_1.StringUtil.rpad(level, " ", 5) + " "
            + new Date().toISOString() + " "
            + (undefined !== options.message ? options.message : "")
            + (options.meta && Object.keys(options.meta).length ? "\n\t"
                + JSON.stringify(options.meta) : "");
    };
    LoggingHelper.cli = false;
    LoggingHelper.verboseEnabled = false;
    LoggingHelper.logger = null;
    LoggingHelper.REQUEST_COLOR = "#ff6633";
    LoggingHelper.LINK_COLOR = "#ff6633";
    return LoggingHelper;
}());
exports.LoggingHelper = LoggingHelper;
//# sourceMappingURL=logging-helper.js.map