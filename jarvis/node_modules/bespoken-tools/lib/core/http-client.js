"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var buffer_util_1 = require("./buffer-util");
var HTTPClient = (function () {
    function HTTPClient() {
    }
    HTTPClient.prototype.postWithExtraHeaders = function (host, port, path, data, extraHeaders, callback) {
        var post_options = {
            agent: false,
            host: host,
            port: port,
            path: path,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Content-Length": Buffer.byteLength(data)
            }
        };
        post_options.headers = Object.assign({}, post_options.headers, extraHeaders);
        var functionCallback = function (response) {
            response.on("data", function (chunk) {
                responseData = Buffer.concat([responseData, chunk]);
            });
            response.on("end", function () {
                if (callback !== undefined && callback !== null) {
                    callback(responseData, response.statusCode, true);
                }
            });
        };
        var responseData = new Buffer("");
        var post_req = port === 443 ?
            https.request(post_options, functionCallback) :
            http.request(post_options, functionCallback);
        post_req.on("error", function (error) {
            if (callback !== undefined && callback !== null) {
                callback(buffer_util_1.BufferUtil.fromString(error.message), 0, false);
            }
        });
        post_req.write(data);
        post_req.end();
    };
    HTTPClient.prototype.post = function (host, port, path, data, callback) {
        this.postWithExtraHeaders(host, port, path, data, {}, callback);
    };
    HTTPClient.prototype.get = function (host, port, path, callback) {
        var options = {
            host: host,
            port: port,
            path: path,
            method: "GET"
        };
        var responseData = new Buffer("");
        var request = http.request(options, function (response) {
            response.on("data", function (chunk) {
                responseData = Buffer.concat([responseData, chunk]);
            });
            response.on("end", function () {
                if (callback !== undefined && callback !== null) {
                    callback(responseData, response.statusCode);
                }
            });
        });
        request.end();
    };
    return HTTPClient;
}());
exports.HTTPClient = HTTPClient;
//# sourceMappingURL=http-client.js.map