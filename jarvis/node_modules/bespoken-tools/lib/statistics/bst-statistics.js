"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var getSecureSourceApiEndPoint = function () {
    var envValue = process.env.SECURE_SOURCE_API_END_POINT;
    if (envValue && envValue === "false") {
        return false;
    }
    return true;
};
var SECURE_SOURCE_API_END_POINT = getSecureSourceApiEndPoint();
exports.SOURCE_API_URL = process.env.SOURCE_API_URL || "source-api.bespoken.tools";
var BstStatistics = (function () {
    function BstStatistics() {
        this.statisticsContext = new StatisticsContext();
    }
    BstStatistics.instance = function () {
        if (!BstStatistics.singleton) {
            BstStatistics.singleton = new BstStatistics();
        }
        return BstStatistics.singleton;
    };
    BstStatistics.prototype.start = function () {
        var that = this;
        this.timer = setInterval(function () {
            that.statisticsContext.flush();
        }, BstStatistics.FLUSH_TIME);
    };
    BstStatistics.prototype.stop = function () {
        clearInterval(this.timer);
    };
    BstStatistics.prototype.record = function (command, event, nodeId, version, flushed) {
        this.statisticsContext.record(command, event, nodeId, version);
        if (!this.timer) {
            this.statisticsContext.flush(flushed);
        }
    };
    BstStatistics.FLUSH_TIME = 10000;
    return BstStatistics;
}());
exports.BstStatistics = BstStatistics;
var StatisticsContext = (function () {
    function StatisticsContext() {
        this._queue = [];
    }
    StatisticsContext.prototype.record = function (command, event, nodeId, version) {
        this._queue.push(new BstStat(command, event, nodeId, version));
    };
    StatisticsContext.prototype.flush = function (flushed) {
        var bstStatsBatch = new Array();
        for (var _i = 0, _a = this._queue; _i < _a.length; _i++) {
            var bstStat = _a[_i];
            if (bstStat && bstStat.command) {
                bstStatsBatch.push(bstStat);
            }
        }
        if (bstStatsBatch.length) {
            this.transmit(bstStatsBatch, flushed);
            this._queue = [];
        }
    };
    StatisticsContext.prototype.transmit = function (logBatch, flushed) {
        if (process.env.SKIP_STATISTICS === "true") {
            return;
        }
        var dataAsString = JSON.stringify({ bstStats: logBatch });
        var dataLength = Buffer.byteLength(dataAsString);
        var options = {
            host: exports.SOURCE_API_URL,
            path: "/v1/postBstStats",
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Content-Length": dataLength,
                "Connection": "keep-alive"
            }
        };
        var functionCallback = function (response) {
            response.on("data", function (chunk) {
                responseData = Buffer.concat([responseData, chunk]);
            });
            response.on("end", function () {
                if (flushed !== undefined && flushed !== null) {
                    flushed();
                }
            });
        };
        var responseData = new Buffer("");
        var httpRequest = SECURE_SOURCE_API_END_POINT ?
            https.request(options, functionCallback) :
            http.request(options, functionCallback);
        httpRequest.on("error", function (error) {
            if (process.env.DISPLAY_STATISTICS_ERROR) {
                console.log("error", error);
            }
            if (flushed !== undefined && flushed !== null) {
                flushed(error);
            }
        });
        httpRequest.setNoDelay(true);
        httpRequest.write(dataAsString);
        httpRequest.end();
    };
    return StatisticsContext;
}());
exports.StatisticsContext = StatisticsContext;
var BstStat = (function () {
    function BstStat(command, event, nodeId, version) {
        this.command = command;
        this.event = event;
        this.nodeId = nodeId;
        this.version = version;
        this._timestamp = new Date();
    }
    BstStat.prototype.timestampAsISOString = function () {
        return this._timestamp.toISOString();
    };
    return BstStat;
}());
exports.BstStat = BstStat;
exports.BstCommand = {
    utter: "utter",
    intend: "intend",
    speak: "speak",
    proxy: "proxy",
    test: "test",
    launch: "launch"
};
exports.BstEvent = {
    connect: "connect",
    forwarded: "forwarded",
    dropped: "dropped"
};
//# sourceMappingURL=bst-statistics.js.map