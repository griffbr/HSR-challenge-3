{
  "_args": [
    [
      {
        "raw": "pngparse@^2.0.1",
        "scope": null,
        "escapedName": "pngparse",
        "name": "pngparse",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/home/abhishek/alexa-turtlesim-ros/node_modules/roslib"
    ]
  ],
  "_from": "pngparse@>=2.0.1 <3.0.0",
  "_id": "pngparse@2.0.1",
  "_inCache": true,
  "_location": "/pngparse",
  "_npmUser": {
    "name": "darkskyapp",
    "email": "devsupport@darkskyapp.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pngparse@^2.0.1",
    "scope": null,
    "escapedName": "pngparse",
    "name": "pngparse",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/roslib"
  ],
  "_resolved": "https://registry.npmjs.org/pngparse/-/pngparse-2.0.1.tgz",
  "_shasum": "86852de4de349f4efb1e852e7525655e5ac5dfb8",
  "_shrinkwrap": null,
  "_spec": "pngparse@^2.0.1",
  "_where": "/home/abhishek/alexa-turtlesim-ros/node_modules/roslib",
  "author": {
    "name": "The Dark Sky Company",
    "email": "devsupport@darkskyapp.com"
  },
  "bugs": {
    "url": "https://github.com/darkskyapp/pngparse/issues"
  },
  "dependencies": {},
  "description": "convert PNG images to pixel arrays without dependencies",
  "devDependencies": {
    "chai": "1.6.x",
    "mocha": "1.10.x"
  },
  "directories": {},
  "dist": {
    "shasum": "86852de4de349f4efb1e852e7525655e5ac5dfb8",
    "tarball": "https://registry.npmjs.org/pngparse/-/pngparse-2.0.1.tgz"
  },
  "homepage": "https://github.com/darkskyapp/pngparse#readme",
  "keywords": [
    "png",
    "image"
  ],
  "main": "./index",
  "maintainers": [
    {
      "name": "darkskyapp",
      "email": "devsupport@darkskyapp.com"
    }
  ],
  "name": "pngparse",
  "optionalDependencies": {},
  "readme": "pngparse\n========\n\n`pngparse` is a pure-JavaScript library for [Node.JS](http://nodejs.org/) for\nconverting a PNG file into an array of pixel values. It came out of a need for\nreading PNG images in Node.JS for the [Dark Sky\nAPI](http://developer.darkskyapp.com/), but all existing libraries either had\ncompilation issues or did not support enough of the PNG standard to be\npractical.\n\nThere's a reason nobody writes PNG-parsing libraries. This stuff is complicated\nand reinventing the wheel is dumb. But, if you're wondering whether you can\ntrust it, it has a full unit test suite and we've been using it in production\nsince Sep 2012, so there you go.\n\nIt's reasonably complete, covering most PNG color types, depths, and filters;\nnotable omissions are lack of support for 16-bit images and interlacing.\n\nComments, bug fixes, feature improvements, etc. are all welcome. If you do\nwrite code, please ensure that you write tests for it!\n\nUsage\n-----\n\nTo install:\n\n    npm install pngparse\n\nTo use:\n\n    var pngparse = require(\"pngparse\")\n\n    ...\n\n    pngparse.parse(buffer, function(err, data) {\n      if(err)\n        throw err\n\n      /* do things! */\n    })\n\n    ...\n\n    pngparse.parseFile(\"path/to/file.png\", function(err, data) {\n      if(err)\n        throw err\n\n      /* do things! */\n    })\n\nThe `data` object returned from the callback bears a striking resemblance to\nthe [HTML5 Canvas ImageData\nobject](https://developer.mozilla.org/en-US/docs/DOM/ImageData). A notable\ndistinction is that the object returns has a `channels` property which\nindicates how many color channels it uses (while an HTML5 ImageData object is\nalways 4-channel). The possible color channel combinations are as follows:\n\n    1 channel : grayscale\n    2 channels: grayscale + alpha\n    3 channels: RGB\n    4 channels: RGBA\n\nIf you use the `ImageData.prototype.getPixel` method, this is handled for you;\nhowever, if you access the `data` array manually, then you will have to be\naware of it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/darkskyapp/pngparse.git"
  },
  "version": "2.0.1"
}
