"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SampleUtterances = (function () {
    function SampleUtterances() {
        this.samples = {};
    }
    SampleUtterances.prototype.setInteractionModel = function (interactionModel) {
        this._interactionModel = interactionModel;
    };
    SampleUtterances.prototype.interactionModel = function () {
        return this._interactionModel;
    };
    SampleUtterances.prototype.addSample = function (intent, sample) {
        if (!(intent in this.samples)) {
            this.samples[intent] = [];
        }
        this.samples[intent].push(new SamplePhrase(this, intent, sample));
    };
    SampleUtterances.prototype.samplesForIntent = function (intent) {
        if (!(intent in this.samples)) {
            return [];
        }
        return this.samples[intent];
    };
    SampleUtterances.prototype.defaultUtterance = function () {
        var firstIntent = Object.keys(this.samples)[0];
        return this.samples[firstIntent][0];
    };
    return SampleUtterances;
}());
exports.SampleUtterances = SampleUtterances;
var SamplePhrase = (function () {
    function SamplePhrase(sampleUtterances, intent, phrase) {
        this.sampleUtterances = sampleUtterances;
        this.intent = intent;
        this.phrase = phrase;
        this.slotNames = [];
        this.phrase = phrase;
        this._regex = this.phraseToRegex(this.phrase);
    }
    SamplePhrase.prototype.slotName = function (index) {
        if (index >= this.slotNames.length) {
            return undefined;
        }
        return this.slotNames[index];
    };
    SamplePhrase.prototype.slotCount = function () {
        return this.slotNames.length;
    };
    SamplePhrase.prototype.regex = function () {
        return new RegExp("^" + this._regex + "$", "i");
    };
    SamplePhrase.prototype.matchesUtterance = function (utterance) {
        return new SamplePhraseTest(this, utterance);
    };
    SamplePhrase.prototype.phraseToRegex = function (phrase) {
        var startIndex = phrase.indexOf("{");
        if (startIndex !== -1) {
            var endIndex = phrase.indexOf("}", startIndex);
            this.slotNames.push(phrase.substring(startIndex + 1, endIndex));
            phrase = phrase.substring(0, startIndex).trim() + "(.*)" + phrase.substring(endIndex + 1).trim();
            phrase = this.phraseToRegex(phrase);
        }
        return phrase;
    };
    return SamplePhrase;
}());
exports.SamplePhrase = SamplePhrase;
var SamplePhraseTest = (function () {
    function SamplePhraseTest(samplePhrase, utterance) {
        this.samplePhrase = samplePhrase;
        this.utterance = utterance;
        this.matched = false;
        var cleanUtterance = utterance.replace(/[\!\"\¿\?|\#\$\%\/\(\)\=\+\-\_\<\>\*\{\}\·\¡\[\]\.\,\;\:]/g, "");
        var matchArray = cleanUtterance.match(samplePhrase.regex());
        this.matched = false;
        if (matchArray) {
            var slotMatches = this.checkSlots(matchArray[0], matchArray.slice(1));
            if (slotMatches) {
                this.slotMatches = slotMatches;
                this.matched = true;
                this.matchString = matchArray[0];
            }
        }
    }
    SamplePhraseTest.prototype.matches = function () {
        return this.matched;
    };
    SamplePhraseTest.prototype.score = function () {
        var slotValueLength = 0;
        for (var _i = 0, _a = this.slotValues(); _i < _a.length; _i++) {
            var slotValue = _a[_i];
            slotValueLength += slotValue.length;
        }
        return this.matchString.length - slotValueLength;
    };
    SamplePhraseTest.prototype.scoreSlots = function () {
        var typed = 0;
        for (var _i = 0, _a = this.slotMatches; _i < _a.length; _i++) {
            var slotMatch = _a[_i];
            if (!slotMatch.untyped) {
                typed++;
            }
        }
        return typed;
    };
    SamplePhraseTest.prototype.slotValues = function () {
        var values = [];
        for (var _i = 0, _a = this.slotMatches; _i < _a.length; _i++) {
            var slotMatch = _a[_i];
            values.push(slotMatch.value);
        }
        return values;
    };
    SamplePhraseTest.prototype.checkSlots = function (input, slotValues) {
        var result = [];
        var index = 0;
        for (var _i = 0, slotValues_1 = slotValues; _i < slotValues_1.length; _i++) {
            var slotValue = slotValues_1[_i];
            if (input !== slotValue) {
                if (slotValue.trim().length > 0 && !slotValue.startsWith(" ") && !slotValue.endsWith(" ")) {
                    return undefined;
                }
            }
            var slotName = this.samplePhrase.slotName(index);
            var slotType = this.intentSchema().intent(this.samplePhrase.intent).slotForName(slotName);
            if (!slotType) {
                throw new Error("Invalid schema - not slot: " + slotName + " for intent: " + this.samplePhrase.intent);
            }
            var slotMatch = this.slotTypes().matchesSlot(slotType.type, slotValue);
            if (!slotMatch.matches) {
                return undefined;
            }
            else {
                result.push(slotMatch);
            }
            index++;
        }
        return result;
    };
    SamplePhraseTest.prototype.intentSchema = function () {
        return this.samplePhrase.sampleUtterances.interactionModel().intentSchema;
    };
    SamplePhraseTest.prototype.slotTypes = function () {
        return this.samplePhrase.sampleUtterances.interactionModel().slotTypes;
    };
    return SamplePhraseTest;
}());
exports.SamplePhraseTest = SamplePhraseTest;
//# sourceMappingURL=SampleUtterances.js.map