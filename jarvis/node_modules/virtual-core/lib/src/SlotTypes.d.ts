export declare class SlotTypes {
    types: SlotType[];
    constructor(slotTypes: ISlotType[]);
    addTypes(slotTypes: SlotType[]): void;
    slotType(name: string): SlotType;
    matchesSlot(name: string, value: string): SlotMatch;
}
export declare class SlotMatch {
    matches: boolean;
    value: string;
    enumeratedValue: ISlotValue;
    slotValueSynonym: string;
    untyped: boolean;
    constructor(matches: boolean, value?: string, enumeratedValue?: ISlotValue, slotValueSynonym?: string);
}
export declare class SlotType implements ISlotType {
    name: string;
    values: ISlotValue[];
    constructor(name: string, values: ISlotValue[]);
    isEnumerated(): boolean;
    isCustom(): boolean;
    isBuiltin(): boolean;
    match(value: string): SlotMatch;
    matchAll(value: string): SlotMatch[];
}
export interface ISlotType {
    name: string;
    values: ISlotValue[];
}
export interface ISlotValue {
    id?: string;
    builtin?: boolean;
    name: ISlotValueName;
}
export interface ISlotValueName {
    value: string;
    synonyms: string[];
}
