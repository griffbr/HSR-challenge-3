"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utterance = (function () {
    function Utterance(interactionModel, phrase) {
        this.interactionModel = interactionModel;
        this.phrase = phrase;
        this.matchIntent();
    }
    Utterance.prototype.intent = function () {
        return this.matched() ? this.matchedSample.intent : undefined;
    };
    Utterance.prototype.matched = function () {
        return this.matchedSample !== undefined;
    };
    Utterance.prototype.slot = function (index) {
        if (!this.slots || index >= this.slots.length) {
            return undefined;
        }
        return this.slots[index].trim();
    };
    Utterance.prototype.slotByName = function (name) {
        var slotValue;
        for (var i = 0; i < this.matchedSample.slotCount(); i++) {
            var slotName = this.matchedSample.slotName(i);
            if (slotName.toLowerCase() === name.toLowerCase()) {
                slotValue = this.slots[i].trim();
                break;
            }
        }
        return slotValue;
    };
    Utterance.prototype.toJSON = function () {
        var json = {};
        if (this.slots) {
            for (var i = 0; i < this.slots.length; i++) {
                var slotName = this.matchedSample.slotName(i);
                json[slotName] = this.slot(i);
            }
        }
        return json;
    };
    Utterance.prototype.matchIntent = function () {
        var matches = [];
        for (var _i = 0, _a = this.interactionModel.intentSchema.intents(); _i < _a.length; _i++) {
            var intent = _a[_i];
            var intentName = intent.name;
            for (var _b = 0, _c = this.interactionModel.sampleUtterances.samplesForIntent(intentName); _b < _c.length; _b++) {
                var sample = _c[_b];
                var sampleTest = sample.matchesUtterance(this.phrase);
                if (sampleTest.matches()) {
                    matches.push(sampleTest);
                }
            }
        }
        if (matches.length > 0) {
            var topMatch = void 0;
            for (var _d = 0, matches_1 = matches; _d < matches_1.length; _d++) {
                var match = matches_1[_d];
                if (!topMatch || match.score() > topMatch.score()) {
                    topMatch = match;
                }
                else if (topMatch.score() === match.score()) {
                    if (match.scoreSlots() > topMatch.scoreSlots()) {
                        topMatch = match;
                    }
                }
            }
            this.matchedSample = topMatch.samplePhrase;
            this.slots = topMatch.slotValues();
        }
    };
    return Utterance;
}());
exports.Utterance = Utterance;
//# sourceMappingURL=Utterance.js.map