"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SlotTypes = (function () {
    function SlotTypes(slotTypes) {
        this.types = [];
        for (var _i = 0, slotTypes_1 = slotTypes; _i < slotTypes_1.length; _i++) {
            var type = slotTypes_1[_i];
            this.types.push(new SlotType(type.name, type.values));
        }
    }
    SlotTypes.prototype.addTypes = function (slotTypes) {
        this.types = this.types.concat(slotTypes);
    };
    SlotTypes.prototype.slotType = function (name) {
        var slotType;
        name = name.toLowerCase();
        for (var _i = 0, _a = this.types; _i < _a.length; _i++) {
            var o = _a[_i];
            if (o.name.toLowerCase() === name) {
                slotType = o;
                break;
            }
        }
        return slotType;
    };
    SlotTypes.prototype.matchesSlot = function (name, value) {
        var slotType = this.slotType(name);
        if (!slotType) {
            var match = new SlotMatch(true, value);
            match.untyped = true;
            return match;
        }
        return slotType.match(value);
    };
    return SlotTypes;
}());
exports.SlotTypes = SlotTypes;
var SlotMatch = (function () {
    function SlotMatch(matches, value, enumeratedValue, slotValueSynonym) {
        this.matches = matches;
        this.value = value;
        this.enumeratedValue = enumeratedValue;
        this.slotValueSynonym = slotValueSynonym;
        this.untyped = false;
    }
    return SlotMatch;
}());
exports.SlotMatch = SlotMatch;
var SlotType = (function () {
    function SlotType(name, values) {
        this.name = name;
        this.values = values;
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            if (value.builtin === undefined) {
                value.builtin = false;
            }
        }
    }
    SlotType.prototype.isEnumerated = function () {
        return !this.isBuiltin();
    };
    SlotType.prototype.isCustom = function () {
        var custom = false;
        if (this.isBuiltin()) {
            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
                var value = _a[_i];
                if (!value.builtin) {
                    custom = true;
                    break;
                }
            }
        }
        else {
            custom = true;
        }
        return custom;
    };
    SlotType.prototype.isBuiltin = function () {
        return this.name.startsWith("AMAZON");
    };
    SlotType.prototype.match = function (value) {
        var matches = this.matchAll(value);
        if (matches.length > 0) {
            return matches[0];
        }
        else if (this.isBuiltin() && !this.isEnumerated()) {
            return new SlotMatch(true, value);
        }
        return new SlotMatch(false);
    };
    SlotType.prototype.matchAll = function (value) {
        value = value.trim();
        var matches = [];
        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {
            var slotValue = _a[_i];
            if (slotValue.name.value.toLowerCase() === value.toLowerCase()) {
                matches.push(new SlotMatch(true, value, slotValue));
            }
            else if (slotValue.name.synonyms) {
                for (var _b = 0, _c = slotValue.name.synonyms; _b < _c.length; _b++) {
                    var synonym = _c[_b];
                    if (synonym.toLowerCase() === value.toLowerCase()) {
                        matches.push(new SlotMatch(true, value, slotValue, synonym));
                    }
                }
            }
        }
        return matches;
    };
    return SlotType;
}());
exports.SlotType = SlotType;
//# sourceMappingURL=SlotTypes.js.map